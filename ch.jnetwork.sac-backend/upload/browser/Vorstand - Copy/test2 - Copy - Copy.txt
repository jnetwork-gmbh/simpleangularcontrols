Library('base lib') import ch.jnetwork.*

node ('master') {
    
    String gitUrl = "http://git.intra.jnetwork.ch/ch.jnetwork.webappbase.git"
    String gitBranch = "${GitBranch}"

    String solutionFile = "src\\WebAppBase.sln"
    String webProjectFile = "src\\WebAppBase\\WebAppBase.csproj"
    String buildMode = "NightlyBuild"
    String publishProfile = "Deploy"

    String solutionDir = "${WORKSPACE}\\src"
    String testDir = "${WORKSPACE}\\test"

    String ftpDir = "subdomains/dev/httpdocs/webappbase"

    try {
    
        stage ('Checkout') {
            
            WorkspaceClean() {
            }
            
            ScmGit() {
                repository = gitUrl
                branch = gitBranch
            }
            
        }
    
        stage ('Build') {
            
            NugetRestore {
                solutionfile = solutionFile
            }

            dir('src') {
	            powershell returnStatus: true, script: '.\\build.ps1 --target step-build'
            }
            
        }
    
        stage('Configuration') {
            
            dir('src') {
	            powershell returnStatus: true, script: '.\\build.ps1 --target step-configure'
            }

        }
        
        stage('Test Unit') {
        
            catchError(catchInterruptions: false, message: 'Unit Tests Failed', stageResult: 'FAILURE') {

	            dir('src') {
		            powershell returnStatus: true, script: '.\\build.ps1 --target step-testunit'
	            }

            }     
    
        }
        
        stage('Test Integration') {
    
            // Run Automated Tests here
            dir('test') {
                unstash('Release')
            }

            String dotCoverReport = "${WORKSPACE}\\coverage\\coverage_iise.xml"

            ConfigureApplication {
                webconfig = "src/WebAppBase.Test/bin/${buildMode}/WebAppBase.Test.dll.config"
                template = "webappbase.test.transform"
                parameter = [
                    solutiondir: "${solutionDir}",
                    websitedir: "${testDir}",
                    dotcoverreport: "${dotCoverReport}",
                    webserverenabled: "true"
                ]
            }
            
            catchError(catchInterruptions: false, message: 'Integration Tests Failed', stageResult: 'FAILURE') {
    
    		    CoverageStartVsTestRunner(
    		        "src\\jenkins.runsettings", 
    				[
    					"src\\WebAppBase.Test\\bin\\${buildMode}\\WebAppBase.Test.dll"
    				],
    				 "+:class=ch.jnetwork.*;+:class=JNetwork.*",
    				"coverage\\coverage_integration.xml", 
    				"testresults\\testresult_integration.trx",
    				"${WORKSPACE}\\test\\bin\\*.dll;${WORKSPACE}\\src\\WebAppBase.Test\\bin\\${buildMode}\\*.dll",
    				[ "Integration" ],
    				null,
                    true) {	}               

            }           

        }
        
        stage('Test Reporting') {                    

            // Testresultate zu einem Report zusammenführen
            println "Merge all Testresults and Create Report"
            CoverageStartMsTestMergeResult("testresults","testresults\\testresult.trx",false)
            {}            
            
            // Report für Testresultate erzeugen
            CoverageStartMsTestReport("testresults\\testresult.trx")
            { }	
            
            CoverageReport(
                ["${WORKSPACE}\\coverage\\coverage_unit.xml","${WORKSPACE}\\coverage\\coverage_integration.xml","${WORKSPACE}\\coverage\\coverage_iise.xml"], 
                "C:\\Builds\\CoverageHistory\\WebAppBase") {
            }
            
            if (currentBuild.result == "FAILURE") {
                error 'Tests are Failed'    
            }
            
        }
        
    
        stage('Deploy') {


            println "Deploy to Nightly Build Server"
            
            if (params.Installation == true) {

                
                dir('src\\WorkingDir\\application') {
                    stash('Release')
                }


                dir('deploy') {
                    unstash 'Release'
                }
            

                DeployApplication2() {
                    Server = "ftp.jnetwork.ch"
                    Username = "ftpjnetwf95"
                    Password = "%%!@Xaq#vAoFR"
                    Local = "deploy"
                    Remote = ftpDir
                }

            } else {
                
                println "*** Deployment is disabled"   
                
            }            
        }
        
        
        stage('Migrate') {
            
            // Run Migration on Application
            println "Migration is not implemented"
            
        }
        
        stage('Clean') {
            
            // WorkspaceRemove() {
            // }
    
        }

    } catch (InterruptedException x) {
        currentBuild.result = 'ABORTED'
        echo 'Ignoring abort attempt at this spot'
    }
}


