{"version":3,"sources":["C:/Daten/jNetwork/AngularPrototype/AngularPrototype/angular/moduleBase/dist/jngcontrols-common/fesm2015/jnetwork-jngcontrols-common.js"],"names":[],"mappingsgodAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;yOAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;guVAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;2bcAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;yIAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;qLAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAMG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;gqIAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;yQAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;4MAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;kdAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;qmm2BAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;im2BAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;wYAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ioioNAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;kuTAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;kMAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;mogfAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;2YAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;gfgfAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;uLAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;uwPAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;gQAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;sXAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;8yuCAOG;AACH;AACA;AACA;AACA;;6LAOgC;AAChfAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;sIAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;usIAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;weuYAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;oGAAE;AACF,0KAGoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;0JAAE;AACF,0MAG4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;sswuBAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;oMAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;kIAAE;AACF,ggDAEG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0BAOsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"jnetwork-jngcontrols-common.js","sourcesContent":["import { __decorate, __metadata, __param } from 'tslib';\nimport { EventEmitter, Input, Output, ViewChild, ElementRef, HostListener, InjectionToken, ɵɵdefineInjectable, Injectable, Host, Injector, TemplateRef, ɵlooseIdentical, Renderer2, Directive, ViewChildren, QueryList, ContentChild, forwardRef, NgZone, Component, NgModule } from '@angular/core';\nimport { FormGroup, NgControl, Validators, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport * as moment_ from 'moment';\nimport { UploadxService } from 'ngx-uploadx';\n\n/**\r\n * Base Komponente für das Button\r\n */\r\nclass NgButtonCommon {\r\n    constructor() {\r\n        /**\r\n         * Boolean Property für Error; default Wert - false\r\n         */\r\n        this.hasError = false;\r\n        /**\r\n         * Input Property für Name; default Wert - ''\r\n         */\r\n        this.name = '';\r\n        /**\r\n         * Input Property für Text des Buttons; default Wert - ''\r\n         */\r\n        this.text = '';\r\n        /**\r\n         * Input Property für Icon Style Klasse; default Wert - ''\r\n         */\r\n        this.icon = '';\r\n        /**\r\n         * Boolean Property definiert, ob das Button 'disabled' ist; default - false\r\n         */\r\n        this._isdisabledvalue = false;\r\n        /**\r\n         * Das boolean property ist benutzt für Aktivation des Spinner des Button. Default ist false.\r\n         */\r\n        this._isloadingvalue = false;\r\n        /**\r\n         * Das Property definiert die Rolle des Buttons. Standardwert ist 'default'.\r\n         */\r\n        this._role = 'default';\r\n        /**\r\n         * Output Event Emitter\r\n         */\r\n        this.onclick = new EventEmitter();\r\n    }\r\n    /**\r\n     * Das Input property. Definiert der Status des islaoding property. Es ist benutzt für Aktivation des Spinner des Button.\r\n     */\r\n    set isloading(v) {\r\n        if (v === null || v === undefined || typeof v === 'boolean') {\r\n            this._isloadingvalue = v;\r\n        }\r\n        else {\r\n            this._isloadingvalue = v === 'true';\r\n        }\r\n    }\r\n    get isloading() {\r\n        return this._isloadingvalue;\r\n    }\r\n    /**\r\n     * Deaktivieren von Buttons\r\n     * @param v Deaktiviert den Button\r\n     * @return Definiert ob der Button deaktiviert ist\r\n     */\r\n    set isdisabled(v) {\r\n        if (v === null || v === undefined || typeof v === 'boolean') {\r\n            this._isdisabledvalue = v;\r\n        }\r\n        else {\r\n            this._isdisabledvalue = v === 'true';\r\n        }\r\n    }\r\n    get isdisabled() {\r\n        return this._isdisabledvalue;\r\n    }\r\n    /**\r\n     * Definiert den Style des Buttons\r\n     * @param  v Definiert den Style des Buttons.\r\n     * Folgende Typen sind Supported: primary, secondary, success, danger, warning, info, light, dark, link, default\r\n     * @returns  Type des Buttons\r\n     */\r\n    set role(v) {\r\n        // Validation of Input\r\n        switch (v) {\r\n            case '':\r\n            case 'primary':\r\n            case 'default':\r\n            case 'light':\r\n            case 'dark':\r\n            case 'link':\r\n            case 'success':\r\n            case 'secondary':\r\n            case 'danger':\r\n            case 'warning':\r\n            case 'info':\r\n                // Empty Role is Default\r\n                if (v === '') {\r\n                    this._role = 'default';\r\n                }\r\n                else {\r\n                    this._role = v;\r\n                }\r\n                break;\r\n            default:\r\n                throw new Error('Invalid role \" + v + \" for button.');\r\n        }\r\n    }\r\n    /**\r\n     * Die Methode returns die definierte Style-Rolle des Buttons\r\n     */\r\n    get role() {\r\n        return this._role;\r\n    }\r\n    /**\r\n     * Getter Methode. Ergibt boolean Wert. Definiert, ob das Button desabled ist.\r\n     */\r\n    get _isdisabled() {\r\n        return this._isdisabledvalue;\r\n    }\r\n    /**\r\n     * Die Methode wird ein Event aufrufen, wenn das Button geklickt wird UND das Button nicht disabled ODER isloading ist.\r\n     */\r\n    buttonClick() {\r\n        if (this._isdisabled === false && this._isloadingvalue === false) {\r\n            this.onclick.emit();\r\n        }\r\n    }\r\n}\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String)\r\n], NgButtonCommon.prototype, \"name\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String)\r\n], NgButtonCommon.prototype, \"text\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String)\r\n], NgButtonCommon.prototype, \"icon\", void 0);\r\n__decorate([\r\n    Input('isloading'),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], NgButtonCommon.prototype, \"isloading\", null);\r\n__decorate([\r\n    Input('isdisabled'),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], NgButtonCommon.prototype, \"isdisabled\", null);\r\n__decorate([\r\n    Input('role'),\r\n    __metadata(\"design:type\", String),\r\n    __metadata(\"design:paramtypes\", [String])\r\n], NgButtonCommon.prototype, \"role\", null);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", Object)\r\n], NgButtonCommon.prototype, \"onclick\", void 0);\n\n/**\r\n * Base Komponente für Dialog\r\n */\r\nclass NgDialogCommon {\r\n    // #region Constructor\r\n    /**\r\n     * Konstruktor\r\n     * Inject des Formulars\r\n     */\r\n    constructor(cdRef) {\r\n        this.cdRef = cdRef;\r\n        /**\r\n         * Boolean Property definiert ob das Dialog angezeigt wird\r\n         */\r\n        this._show = false;\r\n        /**\r\n         * Das property enthielt (wenn überhaupt gesetzt) entweder keywords für sizing oder custom css Klassen.\r\n         * Die akzeptabel keywordssind: 'small', 'large', 'extralarge', 'medium', ''.\r\n         */\r\n        this._size = '';\r\n        // #endregion\r\n        // #region Properties\r\n        /**\r\n         * Input Property. Erhält den Title des Dialog. Default Value: 'Dialog'.\r\n         */\r\n        this._title = 'Dialog';\r\n        /**\r\n         * Das input property akzeptiert boolen Wert. Definiert ob das Dialog darf durch ESC geschlossen werden. Default ist true.\r\n         */\r\n        this._allowesc = true;\r\n        /**\r\n         * Das input property akzeptiert boolen Wert. Definiert ob das Dialog darf durch click außerhalb des Dialog-Fenster geschlossen werden. Default ist true.\r\n         */\r\n        this._backdrop = true;\r\n        /**\r\n         * Input Property. Erhält den Namen des Dialog - benutzt für das ID. Default Value: ''\r\n         */\r\n        this._name = '';\r\n        /**\r\n         * Steuert ob im Header des Dialogs ein Button angezeigt wird.\r\n         */\r\n        this.closebutton = true;\r\n        /**\r\n         * Input Property. Erhält die Breite des Dialog\r\n         */\r\n        this.width = null;\r\n        /**\r\n         * Output Emitter. Wird aufgerufen, wenn das Wert des _show property geändert ist - damait das Dialog geöfnet/geschlossen wird.\r\n         */\r\n        this.isVisibleEmitter = new EventEmitter();\r\n    }\r\n    /**\r\n     * Implementation als Setter, da mit ngIf das Element bei Unsichtbarkeit UNDEFINED ist.\r\n     */\r\n    set dialogElementSetter(content) {\r\n        this.dialogElement = content;\r\n        /**\r\n         * Detect Changes ausführen, da beim Einblenden/Ausblenden des Dialogs Parameter und Properties ändern können diese ausserhalb der Standart ChangeDetection geändert würden.\r\n         */\r\n        // this.cdRef.detectChanges();\r\n    }\r\n    /**\r\n     * Das Input akzeptiert sowohl default size-css-Klassen als auch custom Klassen.\r\n     * case insensitive.\r\n     * Die akzeptabel default-size-Klassen sind: 'small', 'large', 'extralarge', 'medium', ''.\r\n     * Wenn size ist NICHT gesetzt (oder 'medium' oder ''), default ist in medium size: max-width 500px.\r\n     */\r\n    set defineSize(v) {\r\n        v = v.toLowerCase();\r\n        this._size = v;\r\n    }\r\n    /**\r\n    * Setter. Erhält das boolen Wert des _show property\r\n    */\r\n    set visible(v) {\r\n        this._show = v;\r\n        if (this._show && !document.body.classList.contains('modal-open')) {\r\n            document.body.classList.add('modal-open');\r\n        }\r\n        if (this._show === false && document.body.classList.contains('modal-open')) {\r\n            document.body.classList.remove('modal-open');\r\n        }\r\n    }\r\n    /**\r\n     * Getter. Ergibt das boolen Wert des _show property\r\n     */\r\n    get isVisible() {\r\n        return this._show;\r\n    }\r\n    /**\r\n     * Die Funktion prüft ob es ein default css classe für Size des Dialog durch den size Input gesetzt wurde.\r\n     */\r\n    issetdefaultsize() {\r\n        let result = false;\r\n        switch (this._size) {\r\n            case 'small':\r\n                result = true;\r\n                break;\r\n            case 'medium':\r\n                result = true;\r\n                break;\r\n            case 'large':\r\n                result = true;\r\n                break;\r\n            case 'extralarge':\r\n                result = true;\r\n                break;\r\n            case '':\r\n                result = true;\r\n                break;\r\n        }\r\n        return result;\r\n    }\r\n    // #endregion\r\n    // #region Methods\r\n    /**\r\n     * Die Methode setz den Wert des _show property auf true\r\n     */\r\n    show() {\r\n        this._show = true;\r\n        if (this._show && !document.body.classList.contains('modal-open')) {\r\n            document.body.classList.add('modal-open');\r\n        }\r\n        this.isVisibleEmitter.emit(this._show);\r\n    }\r\n    /**\r\n     * Die Methode setz den Wert des _show property auf false\r\n     */\r\n    hide() {\r\n        this._show = false;\r\n        if (this._show === false && document.body.classList.contains('modal-open')) {\r\n            document.body.classList.remove('modal-open');\r\n        }\r\n        this.isVisibleEmitter.emit(this._show);\r\n    }\r\n    /**\r\n     * Getter for ChangeDetector.\r\n     */\r\n    get ChangeDetector() {\r\n        return this.cdRef;\r\n    }\r\n    // #endregion\r\n    // #region Host Actions\r\n    /**\r\n     * Allow Close by Click outside Dialog\r\n     */\r\n    onClick(event) {\r\n        if (this._allowesc === false || (this.dialogElement !== null && this.dialogElement !== undefined && event.target !== this.dialogElement.nativeElement)) {\r\n            return;\r\n        }\r\n        this.hide();\r\n    }\r\n    /**\r\n     * Allow Close by ESC\r\n     */\r\n    onKeydownHandler(event) {\r\n        const ESCAPE_KEYCODE = 27;\r\n        if (this._allowesc === true && event.keyCode === ESCAPE_KEYCODE) {\r\n            this.hide();\r\n        }\r\n    }\r\n}\r\n__decorate([\r\n    ViewChild('dialog', { static: true }),\r\n    __metadata(\"design:type\", ElementRef),\r\n    __metadata(\"design:paramtypes\", [ElementRef])\r\n], NgDialogCommon.prototype, \"dialogElementSetter\", null);\r\n__decorate([\r\n    Input('title'),\r\n    __metadata(\"design:type\", String)\r\n], NgDialogCommon.prototype, \"_title\", void 0);\r\n__decorate([\r\n    Input('allowesc'),\r\n    __metadata(\"design:type\", Boolean)\r\n], NgDialogCommon.prototype, \"_allowesc\", void 0);\r\n__decorate([\r\n    Input('backdrop'),\r\n    __metadata(\"design:type\", Boolean)\r\n], NgDialogCommon.prototype, \"_backdrop\", void 0);\r\n__decorate([\r\n    Input('name'),\r\n    __metadata(\"design:type\", String)\r\n], NgDialogCommon.prototype, \"_name\", void 0);\r\n__decorate([\r\n    Input('closebutton'),\r\n    __metadata(\"design:type\", Boolean)\r\n], NgDialogCommon.prototype, \"closebutton\", void 0);\r\n__decorate([\r\n    Input('width'),\r\n    __metadata(\"design:type\", String)\r\n], NgDialogCommon.prototype, \"width\", void 0);\r\n__decorate([\r\n    Input('size'),\r\n    __metadata(\"design:type\", String),\r\n    __metadata(\"design:paramtypes\", [String])\r\n], NgDialogCommon.prototype, \"defineSize\", null);\r\n__decorate([\r\n    Output('isvisibleChange'),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], NgDialogCommon.prototype, \"isVisibleEmitter\", void 0);\r\n__decorate([\r\n    Input('isvisible'),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], NgDialogCommon.prototype, \"visible\", null);\r\n__decorate([\r\n    HostListener('click', ['$event']),\r\n    __metadata(\"design:type\", Function),\r\n    __metadata(\"design:paramtypes\", [Object]),\r\n    __metadata(\"design:returntype\", void 0)\r\n], NgDialogCommon.prototype, \"onClick\", null);\r\n__decorate([\r\n    HostListener('document:keydown', ['$event']),\r\n    __metadata(\"design:type\", Function),\r\n    __metadata(\"design:paramtypes\", [KeyboardEvent]),\r\n    __metadata(\"design:returntype\", void 0)\r\n], NgDialogCommon.prototype, \"onKeydownHandler\", null);\n\n/**\r\n * Erzeugt ein Boolean\r\n * @param value\r\n */\r\nfunction convertToBoolean(value) {\r\n    if (value === null || value === undefined || typeof value === 'boolean') {\r\n        return value;\r\n    }\r\n    return value.toString() === 'true';\r\n}\r\n/**\r\n * Erzeugt ein Number\r\n * @param value\r\n */\r\nfunction convertToNumber(value) {\r\n    if (value === null || value === undefined || typeof value === 'number') {\r\n        return value;\r\n    }\r\n    return parseFloat(value.toString());\r\n}\r\n/**\r\n * Erzeugt aus einer Map ein Objekt\r\n * @param map Map mit Key und Values. Key ist ein String. Value kann ein Objekt sein.\r\n */\r\nfunction mapToObject(map) {\r\n    const obj = {};\r\n    map.forEach((v, k) => {\r\n        obj[k] = v;\r\n    });\r\n    return obj;\r\n}\n\n/**\r\n * Base Komponente für NgFormular\r\n */\r\nclass NgFormularCommon {\r\n    /**\r\n     * Konstruktor\r\n     * @param form Instanz von NgForm\r\n     */\r\n    constructor(form) {\r\n        this.form = form;\r\n        /**\r\n        * Inline Errors für das Formular\r\n        */\r\n        this._inlineerrorenabled = null;\r\n        /**\r\n         * Default Label Size for Form\r\n         */\r\n        this.labelsize = 3;\r\n        /**\r\n         * Kontroliert, ob das Label adaptive ist\r\n         */\r\n        this.isadaptivelabel = false;\r\n        /**\r\n         * Type des Forms\r\n         */\r\n        this.orientation = 'horizontal';\r\n        this._updateon = 'change';\r\n        this.form.options = { updateOn: this._updateon };\r\n    }\r\n    /**\r\n     * Definiert, wenn das Model geupdatet wird\r\n     */\r\n    set updateon(v) {\r\n        this._updateon = v;\r\n        this.form.options.updateOn = v;\r\n    }\r\n    get updateon() {\r\n        return this._updateon;\r\n    }\r\n    set inlineerrorenabled(value) {\r\n        if (value === null || value === undefined) {\r\n            this._inlineerrorenabled = null;\r\n        }\r\n        else {\r\n            this._inlineerrorenabled = convertToBoolean(value);\r\n        }\r\n    }\r\n    /**\r\n     * Aktiviert oder Deaktiviert die Inline Errors für das Control\r\n     */\r\n    get inlineerrorenabled() {\r\n        return this._inlineerrorenabled;\r\n    }\r\n    /**\r\n     * Vertikale oder horizontale Orientierung des Formulars zurück\r\n     */\r\n    getOrientation() {\r\n        switch (this.orientation.toLowerCase()) {\r\n            case 'horizontal':\r\n                return 'horizontal';\r\n            case 'vertical':\r\n                return 'vertical';\r\n            case 'none':\r\n                return 'none';\r\n            default:\r\n                throw new Error('Invalid formtype at ngFormularCommon. Valid values are horizontal, vertical, none');\r\n        }\r\n    }\r\n    /**\r\n     * Gibt die NgForm Instanz zurück\r\n     */\r\n    getForm() {\r\n        return this.form;\r\n    }\r\n    /**\r\n     * Markiert alle Controls innerhalb des Formulares als Touched\r\n     */\r\n    markAsTouched() {\r\n        if (this.form && this.form.invalid) {\r\n            this.markAsTouchedInternal(this.form.controls);\r\n        }\r\n    }\r\n    /**\r\n     * Aktualisiert die Werte und den Gültigkeitsstatus des Formulars\r\n     */\r\n    updateValueAndValidity(markAsTouched = true) {\r\n        // Update all Controls\r\n        this.updateValueAndValidityInternal(this.form.controls);\r\n        // Update Main Form\r\n        this.getForm().form.updateValueAndValidity();\r\n        // Mark all Controls as Touched\r\n        if (markAsTouched) {\r\n            this.markAsTouched();\r\n        }\r\n    }\r\n    /**\r\n     * Markiert alle Controls inkl. dem Tree als Touched\r\n     * @param controls Controls Collection\r\n     */\r\n    markAsTouchedInternal(controls) {\r\n        const keyList = Object.keys(controls);\r\n        for (const field of keyList) {\r\n            const control = controls[field];\r\n            if (control instanceof FormGroup) {\r\n                this.markAsTouchedInternal(control.controls);\r\n            }\r\n            else {\r\n                control.markAsTouched({ onlySelf: true });\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Aktualisiert die Werte und die gültigkeit des Formulars\r\n     * @param controls Controls Collection\r\n     */\r\n    updateValueAndValidityInternal(controls) {\r\n        const keyList = Object.keys(controls);\r\n        for (const field of keyList) {\r\n            const control = controls[field];\r\n            if (control instanceof FormGroup) {\r\n                this.updateValueAndValidityInternal(control.controls);\r\n            }\r\n            else {\r\n                control.updateValueAndValidity({ onlySelf: true });\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Gibt zurück, ob die Inline Error Meldungen für das Formular aktiv sind.\r\n     */\r\n    get IsInlineErrorEnabled() {\r\n        return this._inlineerrorenabled !== false;\r\n    }\r\n}\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String)\r\n], NgFormularCommon.prototype, \"ngFormular\", void 0);\r\n__decorate([\r\n    Input('labelsize'),\r\n    __metadata(\"design:type\", Number)\r\n], NgFormularCommon.prototype, \"labelsize\", void 0);\r\n__decorate([\r\n    Input('isadaptivelabel'),\r\n    __metadata(\"design:type\", Boolean)\r\n], NgFormularCommon.prototype, \"isadaptivelabel\", void 0);\r\n__decorate([\r\n    Input('orientation'),\r\n    __metadata(\"design:type\", String)\r\n], NgFormularCommon.prototype, \"orientation\", void 0);\r\n__decorate([\r\n    Input('updateon'),\r\n    __metadata(\"design:type\", String),\r\n    __metadata(\"design:paramtypes\", [String])\r\n], NgFormularCommon.prototype, \"updateon\", null);\r\n__decorate([\r\n    Input('inlineerrorenabled'),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], NgFormularCommon.prototype, \"inlineerrorenabled\", null);\n\n/**\r\n * Prüft ob ein Objekt Defined ist\r\n * @param value Objekt\r\n * @return Objekt ist definied. TRUE wenn Objekt definied. FALSE wenn Objekt NULL oder UNDEFINED.\r\n */\r\nfunction isDefined(value) {\r\n    return typeof value !== 'undefined' && value !== null;\r\n}\n\n/**\r\n *  Klasse zum ersetzen von Platzhaltern in Strings\r\n */\r\nclass Interpolation {\r\n    constructor() {\r\n        /**\r\n         *  Template zum Parsen der Platzhalter\r\n         */\r\n        this.templateMatcher = /{{\\s?([^{}\\s]*)\\s?}}/g;\r\n    }\r\n    /**\r\n     * Platzhalter in String ersetzen\r\n     * @param text Text in welchem die Platzhalter ersetzt werden\r\n     * @param params Objekt mit Parameter.\r\n     */\r\n    interpolateString(text, params) {\r\n        if (!params) {\r\n            return text;\r\n        }\r\n        return text.replace(this.templateMatcher, (substring, b) => {\r\n            const r = this.getValue(params, b);\r\n            return isDefined(r) ? r : substring;\r\n        });\r\n    }\r\n    /**\r\n     * Wert aus Objekt in Objekt oder Objektstruktur lesen\r\n     * @param target Objekt das zu parsen ist.\r\n     * @param key Key nach welchem gesucht wird. Navigation in Properties des Objekt mit einem Punkt.\r\n     */\r\n    getValue(target, key) {\r\n        const keys = key.split('.');\r\n        key = '';\r\n        do {\r\n            key += keys.shift();\r\n            if (isDefined(target) && isDefined(target[key]) && (typeof target[key] === 'object' || !keys.length)) {\r\n                target = target[key];\r\n                key = '';\r\n            }\r\n            else if (!keys.length) {\r\n                target = undefined;\r\n            }\r\n            else {\r\n                key += '.';\r\n            }\r\n        } while (keys.length);\r\n        return target;\r\n    }\r\n}\n\n/**\r\n * Injection Token für Language Resource Service\r\n */\r\nconst LANGUAGERESOURCE_SERVICE = new InjectionToken('LanguageResourceService');\r\n/**\r\n * Base Service für Localisation von Fehlermeldungen\r\n *\r\n * @example\r\n *\r\n * // Eigene Beispielimplementierung für Application mit ngx-translate\r\n * (at)Injectable()\r\n * export class ControlsLocalisation extends LanguageResourceService {\r\n *\r\n *   constructor(private translate: TranslateService) {\r\n *     super();\r\n *\r\n *     this.translate.setDefaultLang('de');\r\n *     this.translate.use('de');\r\n *   }\r\n *\r\n *     public GetString(key: string, params?: any): Observable<string> {\r\n *        return this.translate.get(key, params);\r\n *     }\r\n *  }\r\n *\r\n */\r\n/**\r\n* Service für interne Übersetzungen\r\n* */\r\nlet LanguageResourceService = class LanguageResourceService {\r\n};\r\nLanguageResourceService.ɵprov = ɵɵdefineInjectable({ factory: function LanguageResourceService_Factory() { return new LanguageResourceService(); }, token: LanguageResourceService, providedIn: \"root\" });\r\nLanguageResourceService = __decorate([\r\n    Injectable({ providedIn: 'root' })\r\n], LanguageResourceService);\r\n/**\r\n * Standardservice für interne Übersetzungen der Fehlermeldungen\r\n * */\r\nlet InternalLanguageResourceService = class InternalLanguageResourceService extends LanguageResourceService {\r\n    /**\r\n     * Konstruktor\r\n     * */\r\n    constructor() {\r\n        super();\r\n        /**\r\n         * Language Resources für Controls Library\r\n         */\r\n        this.data = new Map();\r\n        // Set Languages\r\n        this.data.set('de', new Map());\r\n        this.data.get('de').set('VALIDATION_ERROR_REQUIRED', 'Feld ist erforderlich.');\r\n        this.data.get('de').set('VALIDATION_ERROR_SUMMARY_REQUIRED', 'Feld \"{{FIELD}}\" ist erforderlich.');\r\n        this.data.get('de').set('VALIDATION_ERROR_MINVALUE', 'Wert darf nicht kleiner als {{MINVALUE}} sein.');\r\n        this.data.get('de').set('VALIDATION_ERROR_SUMMARY_MINVALUE', 'Feld \"{{FIELD}}\" darf nicht kleiner als {{MINVALUE}} sein.');\r\n        this.data.get('de').set('VALIDATION_ERROR_PATTERN', 'Wert entspricht nicht der Format Vorlage.');\r\n        this.data.get('de').set('VALIDATION_ERROR_SUMMARY_PATTERN', 'Feld \"{{FIELD}}\" entspricht nicht der Format Vorlage.');\r\n        this.data.get('de').set('VALIDATION_ERROR_MAXVALUE', 'Wert darf nicht grösser als {{MAXVALUE}} sein.');\r\n        this.data.get('de').set('VALIDATION_ERROR_SUMMARY_MAXVALUE', 'Feld \"{{FIELD}}\" darf nicht grösser als {{MAXVALUE}} sein.');\r\n        this.data.get('de').set('VALIDATION_ERROR_EMAIL', 'Feld ist keine E-Mail Adresse');\r\n        this.data.get('de').set('VALIDATION_ERROR_SUMMARY_EMAIL', 'Feld \"{{FIELD}}\" ist keine E-Mail Adresse');\r\n        this.data.get('de').set('VALIDATION_ERROR_MINLENGTH', 'Feld erfordert min. {{MINLENGTH}} Zeichen.');\r\n        this.data.get('de').set('VALIDATION_ERROR_SUMMARY_MINLENGTH', 'Feld \"{{FIELD}}\" erfordert min. {{MINLENGTH}} Zeichen.');\r\n        this.data.get('de').set('VALIDATION_ERROR_MINDATE', 'Feld muss neuer oder gleich {{MINDATE}} sein.');\r\n        this.data.get('de').set('VALIDATION_ERROR_SUMMARY_MINDATE', 'Feld \"{{FIELD}}\" muss neuer oder gleich {{MINDATE}} sein.');\r\n        this.data.get('de').set('VALIDATION_ERROR_MAXDATE', 'Feld muss älter oder gleich {{MAXDATE}} sein.');\r\n        this.data.get('de').set('VALIDATION_ERROR_SUMMARY_MAXDATE', 'Feld \"{{FIELD}}\" muss älter oder gleich {{MAXDATE}} sein.');\r\n        this.data.get('de').set('VALIDATION_ERROR_MINTIME', 'Feld muss neuer oder gleich {{MINTIME}} sein.');\r\n        this.data.get('de').set('VALIDATION_ERROR_SUMMARY_MINTIME', 'Feld \"{{FIELD}}\" muss neuer oder gleich {{MINTIME}} sein.');\r\n        this.data.get('de').set('VALIDATION_ERROR_MAXTIME', 'Feld muss älter oder gleich {{MAXTIME}} sein.');\r\n        this.data.get('de').set('VALIDATION_ERROR_SUMMARY_MAXTIME', 'Feld \"{{FIELD}}\" muss älter oder gleich {{MAXTIME}} sein.');\r\n        this.data.get('de').set('VALIDATION_ERROR_DATETIMEFORMAT', 'Feld ist kein gültiges Datum.');\r\n        this.data.get('de').set('VALIDATION_ERROR_SUMMARY_DATETIMEFORMAT', 'Feld \"{{FIELD}}\" ist kein gültiges Datum.');\r\n        this.data.get('de').set('VALIDATION_ERROR_FILESMIN', 'Es müssen min. {{MINFILES}} Dateien hochgeladen sein.');\r\n        this.data.get('de').set('VALIDATION_ERROR_SUMMARY_FILESMIN', 'Feld \"{{FIELD}}\" muss min. {{MINFILES}} Dateien hochgeladen haben.');\r\n        this.data.get('de').set('VALIDATION_ERROR_MULTILANGUAGEREQUIREDANY', 'Es muss min. 1 Sprache erfasst sein.');\r\n        this.data.get('de').set('VALIDATION_ERROR_SUMMARY_MULTILANGUAGEREQUIREDANY', 'Feld \"{{FIELD}}\" muss min. 1 Sprache erfasst haben.');\r\n        this.data.get('de').set('VALIDATION_ERROR_MULTILANGUAGEREQUIRED', 'Es müssen alle Sprachen erfasst sein.');\r\n        this.data.get('de').set('VALIDATION_ERROR_SUMMARY_MULTILANGUAGEREQUIRED', 'Feld \"{{FIELD}}\" muss alle Sprachen erfasst haben.');\r\n        // EN\r\n        this.data.set('en', new Map());\r\n    }\r\n    /**\r\n     * Die Funktion setzt die default Sprache auf DE, falls die Sprach-Setzung nicht möglich ist.\r\n     */\r\n    GetFallbackLanguage() {\r\n        return 'de';\r\n    }\r\n    /**\r\n     * Die Funktion ergibt die ausgewählte Sprache.\r\n     */\r\n    GetLanguage() {\r\n        const language = navigator.language;\r\n        if (language.indexOf('-') >= 0) {\r\n            return language.split('-')[0];\r\n        }\r\n        else {\r\n            return language;\r\n        }\r\n    }\r\n    /**\r\n    * Die Methode ergibt die selecte Sprache (string)  anhand von Key und Params\r\n    */\r\n    GetString(key, params) {\r\n        return new Observable((observer) => {\r\n            let language = this.GetLanguage();\r\n            if (!this.data.has(language)) {\r\n                language = this.GetFallbackLanguage();\r\n                // Return Key if no Language exists\r\n                if (!this.data.has(language)) {\r\n                    observer.next(key);\r\n                    observer.complete();\r\n                    return;\r\n                }\r\n            }\r\n            if (this.data.get(language).has(key)) {\r\n                const resource = this.data.get(language).get(key);\r\n                if (params !== undefined && params !== null) {\r\n                    const formatter = new Interpolation();\r\n                    observer.next(formatter.interpolateString(resource, params));\r\n                    observer.complete();\r\n                    return;\r\n                }\r\n                else {\r\n                    observer.next(resource);\r\n                    observer.complete();\r\n                    return;\r\n                }\r\n            }\r\n            else {\r\n                observer.next(key);\r\n                observer.complete();\r\n                return;\r\n            }\r\n        });\r\n    }\r\n};\r\nInternalLanguageResourceService.ɵprov = ɵɵdefineInjectable({ factory: function InternalLanguageResourceService_Factory() { return new InternalLanguageResourceService(); }, token: InternalLanguageResourceService, providedIn: \"root\" });\r\nInternalLanguageResourceService = __decorate([\r\n    Injectable({ providedIn: 'root' }),\r\n    __metadata(\"design:paramtypes\", [])\r\n], InternalLanguageResourceService);\n\n/**\r\n * Abstract Klasse für NgBaseModelControl. Implements ControlValueAccessor, Validator, OnInit\r\n */\r\nlet NgBaseModelControl = class NgBaseModelControl {\r\n    // #endregion\r\n    // #region Constructor\r\n    /**\r\n     * Konstruktor\r\n     * Inject des Formulars\r\n     * @parent NgFormularCommon\r\n     * @injector Injector\r\n     */\r\n    constructor(parent, injector) {\r\n        this.injector = injector;\r\n        /**\r\n         * NgModel Form ist disabled\r\n         */\r\n        this._disabledForm = false;\r\n        // #endregion\r\n        // #region Properties\r\n        /**\r\n         * Name des Controls\r\n         */\r\n        this._name = '';\r\n        /**\r\n         * Definiert den Label Text\r\n         */\r\n        this._label = '';\r\n        /**\r\n         * Definiert die Labelgröse\r\n         */\r\n        this._labelsize = undefined;\r\n        /**\r\n         * Deaktiviert das Label im Template\r\n         */\r\n        this._disablelabel = false;\r\n        /**\r\n         * Deaktiviert das Input Control\r\n         */\r\n        this._disabledControl = false;\r\n        /**\r\n         * Kontroliert, ob das Label adaptive ist\r\n         */\r\n        this._isadaptivelabel = undefined;\r\n        /**\r\n         * Definiert, ob das Control Sprachspezifisch ist\r\n         */\r\n        this._islanguagespecific = false;\r\n        /**\r\n         * Interne Variable, die den Wert des Controls hält\r\n         */\r\n        this._value = null;\r\n        /**\r\n        * Boolean Property dirty; default Wert - false\r\n        */\r\n        this._dirty = false;\r\n        /**\r\n         * Boolean Property touched; default Wert - false\r\n         */\r\n        this._touched = false;\r\n        /**\r\n        * Inline Errors für das Control\r\n        */\r\n        this._inlineerrorenabled = null;\r\n        // #endregion\r\n        // #region Implementation ControlValueAccessor\r\n        /**\r\n         * Leere Implementation von \"propagateChange\". Muss gemacht werden, damit kein Fehler entsteht\r\n         */\r\n        this.propagateChange = () => { };\r\n        /**\r\n         * Leere Implementation von \"propagateTouch\". Muss gemacht werden, damit kein Fehler entsteht\r\n         */\r\n        this.propagateTouch = () => { };\r\n        this.parent = parent;\r\n        this.lngResourceService = injector.get(LANGUAGERESOURCE_SERVICE, new InternalLanguageResourceService());\r\n    }\r\n    /**\r\n     * Definiert ob das Control disabled ist\r\n     */\r\n    get isdisabled() {\r\n        return this._disabledForm || this._disabledControl;\r\n    }\r\n    // #endregion\r\n    // #region Control Events\r\n    /**\r\n     * Init Event\r\n     */\r\n    ngOnInit() {\r\n        this.ngControl = this.injector.get(NgControl, null);\r\n        /**\r\n         * Label Size von Formular lesen\r\n         */\r\n        if (this._labelsize === undefined) {\r\n            if (this.parent.labelsize !== undefined) {\r\n                this._labelsize = this.parent.labelsize;\r\n            }\r\n            else {\r\n                this._labelsize = 4;\r\n            }\r\n        }\r\n        /**\r\n         * Adaptive Label from Form\r\n         */\r\n        if (this._isadaptivelabel === undefined) {\r\n            if (this.parent.isadaptivelabel !== undefined) {\r\n                this._isadaptivelabel = this.parent.isadaptivelabel;\r\n            }\r\n            else {\r\n                this._isadaptivelabel = false;\r\n            }\r\n        }\r\n        this.OnClassInit();\r\n    }\r\n    /**\r\n     * Methode, damit andere Controls änderungen im Control mitbekommen können\r\n     * Zur Änderungsinfo die Methode propagateChange aufrufen.\r\n     */\r\n    registerOnChange(fn) {\r\n        this.propagateChange = (obj) => fn(obj);\r\n    }\r\n    /**\r\n     * Methode, damit andere Controls änderungen mitbekommen, wenn das Control aktiviert (Focus) wird.\r\n     */\r\n    registerOnTouched(fn) {\r\n        this.propagateTouch = (obj) => fn(obj);\r\n    }\r\n    /**\r\n     * Methode zum schreiben von Werten aus dem Model in das Control\r\n     */\r\n    writeValue(value) {\r\n        this._value = value;\r\n    }\r\n    /**\r\n     * Setzt das Control auf Disabled\r\n     */\r\n    setDisabledState(isDisabled) {\r\n        this._disabledForm = isDisabled;\r\n    }\r\n    // #endregion\r\n    // #region Control Value\r\n    /**\r\n     * Set Methode für NgModel Binding in Html Markup\r\n     * Input wird benötigt, damit der Wert auch über das Markup gesetzt werden kann.\r\n     */\r\n    set value(v) {\r\n        this._value = this.ConvertInputValue(v);\r\n        this.propagateChange(this._value);\r\n    }\r\n    /**\r\n     * Get Methode für NgModel Binding in Html Markup\r\n     */\r\n    get value() {\r\n        return this._value;\r\n    }\r\n    /**\r\n     * Methode die den Wert des Inputs setzt\r\n     */\r\n    setValue(v) {\r\n        this.value = v;\r\n    }\r\n    // #endregion\r\n    // #region Internal Properties\r\n    /**\r\n     * Berechnet die Breite des Labels\r\n     */\r\n    get _inputsize() {\r\n        return 12 - this._labelsize;\r\n    }\r\n    // #endregion\r\n    // #region Protected Helper Methods\r\n    /**\r\n     * Method can be used to Set Properties at Class Init\r\n     */\r\n    OnClassInit() {\r\n    }\r\n    /**\r\n     * Methode ergibt Decimal Symbol\r\n     */\r\n    GetDecimalSymbol() {\r\n        return '.';\r\n    }\r\n    /**\r\n     * Method can Overwriten in Parent Classes\r\n     */\r\n    ConvertInputValue(value) {\r\n        return value;\r\n    }\r\n    // #endregion\r\n    //#region Validation Base\r\n    /**\r\n     * Validator Methode\r\n     */\r\n    validate(c) {\r\n        const error = this.validateData(c);\r\n        return error;\r\n    }\r\n    /**\r\n     * Methode registriert Änderungen bei der Validierung\r\n     */\r\n    registerOnValidatorChange(fn) { this._onChange = fn; }\r\n    /**\r\n     * Methode ergibt Boolean Wert für dirty\r\n     */\r\n    get dirty() {\r\n        if (this.ngControl !== null) {\r\n            this._dirty = this.ngControl.dirty;\r\n        }\r\n        return this._dirty;\r\n    }\r\n    /**\r\n     * Methode ergibt Boolean Wert für touched\r\n     */\r\n    get touched() {\r\n        if (this.ngControl !== null) {\r\n            this._touched = this.ngControl.touched;\r\n        }\r\n        return this._touched;\r\n    }\r\n    /**\r\n     * Methode ergibt boolean Wert wenn Form invalid oder nicht invalid ist\r\n     */\r\n    get invalid() { return this.ngControl !== undefined && this.ngControl !== null && this.ngControl.invalid; }\r\n    /**\r\n     * Methode ergibt boolean touched = true\r\n     */\r\n    onTouch() {\r\n        this._touched = true;\r\n        this.propagateTouch();\r\n    }\r\n    /**\r\n     * Methode ergibt Error anhand von gegebenen Kriterien\r\n     */\r\n    GetErrorMessage() {\r\n        if (this.ngControl.errors === undefined || this.ngControl.errors === null) {\r\n            return new Observable((observer) => {\r\n                observer.next('');\r\n                observer.complete();\r\n            });\r\n        }\r\n        const errors = this.ngControl.errors;\r\n        if (errors.length === 0) {\r\n            return new Observable((observer) => {\r\n                observer.next('');\r\n                observer.complete();\r\n            });\r\n        }\r\n        const keys = Object.keys(errors);\r\n        if (keys.length <= 0) {\r\n            return new Observable((observer) => {\r\n                observer.next('');\r\n                observer.complete();\r\n            });\r\n        }\r\n        const errorItem = errors[keys[0]];\r\n        // Validation Parameters\r\n        const parameters = {};\r\n        if (errorItem.parameters !== null && errorItem.parameters !== undefined) {\r\n            errorItem.parameters.forEach((v, k) => { parameters[k] = v; });\r\n        }\r\n        parameters['FIELD'] = errorItem.fieldName;\r\n        return this.lngResourceService.GetString(errorItem.errorMessageKey, parameters);\r\n    }\r\n    UpdateValueAndValidity() {\r\n        this.ngControl.control.updateValueAndValidity({ onlySelf: true });\r\n    }\r\n    set inlineerrorenabled(value) {\r\n        if (value === null || value === undefined) {\r\n            this._inlineerrorenabled = null;\r\n        }\r\n        else {\r\n            this._inlineerrorenabled = convertToBoolean(value);\r\n        }\r\n    }\r\n    /**\r\n     * Aktiviert oder Deaktiviert die Inline Errors für das Control\r\n     */\r\n    get inlineerrorenabled() {\r\n        return this._inlineerrorenabled;\r\n    }\r\n    /**\r\n     * Gibt zurück, ob die Inline Error Meldungen für diesem Control aktiv sind.\r\n     */\r\n    get IsInlineErrorEnabled() {\r\n        if (this.parent.IsInlineErrorEnabled === null || this.parent.IsInlineErrorEnabled === undefined) {\r\n            return this._inlineerrorenabled;\r\n        }\r\n        return this.parent.IsInlineErrorEnabled !== false && this._inlineerrorenabled !== false;\r\n    }\r\n};\r\n__decorate([\r\n    Input('name'),\r\n    __metadata(\"design:type\", String)\r\n], NgBaseModelControl.prototype, \"_name\", void 0);\r\n__decorate([\r\n    Input('label'),\r\n    __metadata(\"design:type\", String)\r\n], NgBaseModelControl.prototype, \"_label\", void 0);\r\n__decorate([\r\n    Input('labelsize'),\r\n    __metadata(\"design:type\", Number)\r\n], NgBaseModelControl.prototype, \"_labelsize\", void 0);\r\n__decorate([\r\n    Input('disablelabel'),\r\n    __metadata(\"design:type\", Boolean)\r\n], NgBaseModelControl.prototype, \"_disablelabel\", void 0);\r\n__decorate([\r\n    Input('disabled'),\r\n    __metadata(\"design:type\", Boolean)\r\n], NgBaseModelControl.prototype, \"_disabledControl\", void 0);\r\n__decorate([\r\n    Input('isadaptivelabel'),\r\n    __metadata(\"design:type\", Boolean)\r\n], NgBaseModelControl.prototype, \"_isadaptivelabel\", void 0);\r\n__decorate([\r\n    Input('islanguagespecific'),\r\n    __metadata(\"design:type\", Boolean)\r\n], NgBaseModelControl.prototype, \"_islanguagespecific\", void 0);\r\n__decorate([\r\n    Input('value'),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], NgBaseModelControl.prototype, \"value\", null);\r\n__decorate([\r\n    Input('inlineerrorenabled'),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], NgBaseModelControl.prototype, \"inlineerrorenabled\", null);\r\nNgBaseModelControl = __decorate([\r\n    __param(0, Host()),\r\n    __metadata(\"design:paramtypes\", [NgFormularCommon, Injector])\r\n], NgBaseModelControl);\n\n/**\r\n * Basis Komponente für NgCheckboxCommon. Extends NgBaseModelControl\r\n */\r\nclass NgCheckboxCommon extends NgBaseModelControl {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n        * Text welcher als Tooltip angezeigt wird.\r\n        */\r\n        this._tooltiptext = '';\r\n    }\r\n    /**\r\n     * Control hat keinen Validator\r\n     */\r\n    validateData(c) {\r\n        return null;\r\n    }\r\n}\r\n__decorate([\r\n    Input('tooltiptext'),\r\n    __metadata(\"design:type\", String)\r\n], NgCheckboxCommon.prototype, \"_tooltiptext\", void 0);\r\n__decorate([\r\n    Input('checkboxtext'),\r\n    __metadata(\"design:type\", Object)\r\n], NgCheckboxCommon.prototype, \"_checkboxtext\", void 0);\n\n/**\r\n * Basis Komponente für NgRadiobutton.\r\n */\r\nclass NgRadiobuttonCommon {\r\n    /**\r\n     * Konstruktor\r\n     * @param ngRadioButtons\r\n     */\r\n    constructor(ngRadioButtons) {\r\n        this.ngRadioButtons = ngRadioButtons;\r\n        /**\r\n         * Output Event\r\n         */\r\n        this.onselectitem = new EventEmitter();\r\n        /**\r\n         * Boolean Property zum Ausblenden des Controls; default Wert - false\r\n         */\r\n        this._hidden = false;\r\n        /**\r\n         * Unique Index für RadioButton\r\n         */\r\n        this._index = null;\r\n        // Registration des Controls in NgRadioButtons Container\r\n        this.ngRadioButtons.RegisterRadioButton(this);\r\n    }\r\n    /**\r\n     * Methode ergibt Boolean, ob Control disabled ist\r\n     */\r\n    get isDisabled() {\r\n        return this._disabled || this.ngRadioButtons._disabledControl;\r\n    }\r\n    /**\r\n     * Setter für hidden Property\r\n     */\r\n    set hidden(v) {\r\n        if (v === null || v === undefined || typeof v === 'boolean') {\r\n            this._hidden = v;\r\n        }\r\n        else {\r\n            this._hidden = v === 'true';\r\n        }\r\n        // Model Reset falls RadioButton selektiert war\r\n        if (this._hidden && this._checked) {\r\n            this.ngRadioButtons.SelectItem(null);\r\n        }\r\n    }\r\n    get hidden() {\r\n        return this._hidden;\r\n    }\r\n    /**\r\n     * Getter für Unique Index\r\n     */\r\n    get getIndex() {\r\n        if (this._index === null && this.ngRadioButtons !== null && this.ngRadioButtons !== undefined) {\r\n            this._index = this.ngRadioButtons.GetRadionButtonIndex();\r\n        }\r\n        return this._index;\r\n    }\r\n    /**\r\n     * Parent Control Name\r\n     */\r\n    get getName() {\r\n        return this.ngRadioButtons._name;\r\n    }\r\n    //#endregion\r\n    //#region Control Events\r\n    /**\r\n     * Event wenn die Komponente zerstört wird\r\n     */\r\n    ngOnDestroy() {\r\n        // De-Registration des Controls in NgRadioButtons Container\r\n        this.ngRadioButtons.UnregisterRadioButton(this);\r\n    }\r\n    //#endregion\r\n    /**\r\n     * Event bei Änderungen\r\n     */\r\n    ChangeEvent() {\r\n        this.ngRadioButtons.SelectItem(this._value);\r\n        this.onselectitem.emit();\r\n    }\r\n}\r\n__decorate([\r\n    Input('value'),\r\n    __metadata(\"design:type\", Object)\r\n], NgRadiobuttonCommon.prototype, \"_value\", void 0);\r\n__decorate([\r\n    Input('label'),\r\n    __metadata(\"design:type\", String)\r\n], NgRadiobuttonCommon.prototype, \"_label\", void 0);\r\n__decorate([\r\n    Input('checked'),\r\n    __metadata(\"design:type\", Boolean)\r\n], NgRadiobuttonCommon.prototype, \"_checked\", void 0);\r\n__decorate([\r\n    Input('disabled'),\r\n    __metadata(\"design:type\", Boolean)\r\n], NgRadiobuttonCommon.prototype, \"_disabled\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", Object)\r\n], NgRadiobuttonCommon.prototype, \"onselectitem\", void 0);\r\n__decorate([\r\n    Input('hidden'),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], NgRadiobuttonCommon.prototype, \"hidden\", null);\r\n__decorate([\r\n    Input('labeltemplate'),\r\n    __metadata(\"design:type\", TemplateRef)\r\n], NgRadiobuttonCommon.prototype, \"displayValueTemplate\", void 0);\n\n/**\r\n * Moment\r\n */\r\nconst moment = moment_;\r\n/**\r\n * Klasse für Validierungsfehler\r\n * */\r\nclass ValidationErrorItem {\r\n    /**\r\n     * Konstruktor\r\n     * @param errorType Type des Fehlers\r\n     * @param errorMessageKey Key für Fehlermeldung\r\n     * @param errorMessageSummaryKey Key für Fehlermeldung in Validation Summary\r\n     * @param fieldName Name des Labels oder Bezeichnung des Feldes\r\n     */\r\n    constructor(errorType, errorMessageKey, errorMessageSummaryKey, fieldName) {\r\n        /**\r\n         * Map mit Parametern die in den Meldungen als Platzhalter verwendet werden können\r\n         */\r\n        this.parameters = new Map();\r\n        this.errorType = errorType;\r\n        this.errorMessageKey = errorMessageKey;\r\n        this.errorMessageValidationSummaryKey = errorMessageSummaryKey;\r\n        this.fieldName = fieldName;\r\n    }\r\n}\r\n/**\r\n * Klasse mit Standard Validatoren\r\n */\r\nclass Validation {\r\n    /**\r\n     * Die Methode ist von jedem Validator aufgerufen. Die setzt sowohl den errorType des gerpüfte Item, als auch die ErrorMessage (gemäss von errorType, FieldName und Parameters).\r\n     * @param errorType Typ den Fehler\r\n     * @param errorMessageKey Error Message Key\r\n     * @param errorMessageValidationSummaryKey Error Message Key für Validation Summary\r\n     * @param fieldName  Label oder Name des Feldes\r\n     * @param parameters Parametern die in den Meldungen als Platzhalter verwendet werden können\r\n     */\r\n    static GetValidationErrorItem(errorType, errorMessageKey, errorMessageValidationSummaryKey, fieldName, parameters = new Map()) {\r\n        const item = new ValidationErrorItem(errorType, errorMessageKey, errorMessageValidationSummaryKey, fieldName);\r\n        if (parameters !== null && parameters !== undefined && parameters.size > 0) {\r\n            parameters.forEach((v, k) => {\r\n                item.parameters.set(k, v);\r\n            });\r\n        }\r\n        return { [errorType]: item };\r\n    }\r\n    /**\r\n     * Validator für Required State\r\n     * @param control Control das Validiert wird\r\n     * @param fieldName Label des Controls\r\n     * @param validationMessage Validierungsmeldung die\r\n     * @param validationMessageSummary Validierungsmeldung die im Validation Summary angezeigt wird\r\n     */\r\n    static required(control, fieldName, validationMessage, validationMessageSummary) {\r\n        if (Validators.required(control) !== null) {\r\n            return Validation.GetValidationErrorItem('required', validationMessage, validationMessageSummary, fieldName);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    /**\r\n     * Validator für Min Value\r\n     * @param control Control das Validiert wird\r\n     * @param minvalue Min. Value\r\n     * @param fieldName Label des Controls\r\n     * @param validationMessage Validierungsmeldung die\r\n     * @param validationMessageSummary Validierungsmeldung die im Validation Summary angezeigt wird\r\n     */\r\n    static minValue(control, minvalue, fieldName, validationMessage, validationMessageSummary) {\r\n        const validator = Validators.min(minvalue);\r\n        if (validator(control) !== null) {\r\n            const parameters = new Map();\r\n            parameters.set('MINVALUE', minvalue);\r\n            return Validation.GetValidationErrorItem('minvalue', validationMessage, validationMessageSummary, fieldName, parameters);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    /**\r\n     * Validierung mit einem RegEx Pattern\r\n     * @param control Control das validiert werden soll.\r\n     * @param pattern RegEx Pattern\r\n     * @param fieldName Label des Controls\r\n     * @param validationMessage Validierungsmeldung die\r\n     * @param validationMessageSummary Validierungsmeldung die im Validation Summary angezeigt wird\r\n     */\r\n    static patternValidator(control, pattern, fieldName, validationMessage, validationMessageSummary) {\r\n        const validator = Validators.pattern(pattern);\r\n        if (validator(control) !== null) {\r\n            const parameters = new Map();\r\n            parameters.set('PATTERN', pattern);\r\n            return Validation.GetValidationErrorItem('pattern', validationMessage, validationMessageSummary, fieldName, parameters);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    /**\r\n     * Validator für Max Value\r\n     * @param control Control das Validiert werden soll\r\n     * @param maxvalue Max. Wert\r\n     * @param fieldName Label des Controls\r\n     * @param validationMessage Validierungsmeldung die\r\n     * @param validationMessageSummary Validierungsmeldung die im Validation Summary angezeigt wird\r\n     */\r\n    static maxValue(control, maxvalue, fieldName, validationMessage, validationMessageSummary) {\r\n        const validator = Validators.max(maxvalue);\r\n        if (validator(control) !== null) {\r\n            const parameters = new Map();\r\n            parameters.set('MAXVALUE', maxvalue);\r\n            return Validation.GetValidationErrorItem('maxvalue', validationMessage, validationMessageSummary, fieldName, parameters);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    /**\r\n     * Validiert Feld auf E-Mail Adresse\r\n     * @param control Control das Valdiert werden soll\r\n     * @param fieldName Label des Controls\r\n     * @param validationMessage Validierungsmeldung die\r\n     * @param validationMessageSummary Validierungsmeldung die im Validation Summary angezeigt wird\r\n     */\r\n    static email(control, fieldName, validationMessage, validationMessageSummary) {\r\n        if (Validators.email(control) !== null) {\r\n            return Validation.GetValidationErrorItem('email', validationMessage, validationMessageSummary, fieldName);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    /**\r\n     * Validiert auf die Länge des Wertes im Control\r\n     * @param control Control das Validiert werden soll\r\n     * @param minlength Min. Länge des Wertes\r\n     * @param fieldName Label des Controls\r\n     * @param validationMessage Validierungsmeldung die\r\n     * @param validationMessageSummary Validierungsmeldung die im Validation Summary angezeigt wird\r\n     */\r\n    static minLength(control, minlength, fieldName, validationMessage, validationMessageSummary) {\r\n        const validator = Validators.minLength(minlength);\r\n        if (minlength !== null && minlength !== undefined && control.value !== '' && control.value !== undefined && control.value != null && validator(control) != null) {\r\n            const parameters = new Map();\r\n            parameters.set('MINLENGTH', minlength);\r\n            return Validation.GetValidationErrorItem('minlength', validationMessage, validationMessageSummary, fieldName, parameters);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    /**\r\n     * Validiert ob das Datum neuer als minDate ist\r\n     * @param control Control das Validiert werden soll. Muss IDateTimeControl implementiert haben\r\n     * @param minDate Min. Datum\r\n     * @param fieldName Label des Controls\r\n     * @param validationMessage Validierungsmeldung die\r\n     * @param validationMessageSummary Validierungsmeldung die im Validation Summary angezeigt wird\r\n     */\r\n    static minDate(control, minDate, fieldName, validationMessage, validationMessageSummary) {\r\n        // Check abbrechen, wenn kein gültiges Datum\r\n        if (!control.IsDateValid() || minDate === null) {\r\n            return null;\r\n        }\r\n        if (minDate > control.value) {\r\n            const parameters = new Map();\r\n            parameters.set('MINDATE', moment(minDate).format(control.GetDateTimeFormatString()));\r\n            return Validation.GetValidationErrorItem('datemin', validationMessage, validationMessageSummary, fieldName, parameters);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    /**\r\n     * Validiert ob das Datum älter als maxDate ist\r\n     * @param control Control das Validiert werden soll. Muss IDateTimeControl implementiert haben\r\n     * @param maxDate max. Datum\r\n     * @param fieldName Label des Controls\r\n     * @param validationMessage Validierungsmeldung die\r\n     * @param validationMessageSummary Validierungsmeldung die im Validation Summary angezeigt wird\r\n     */\r\n    static maxDate(control, maxDate, fieldName, validationMessage, validationMessageSummary) {\r\n        // Check abbrechen, wenn kein gültiges Datum\r\n        if (!control.IsDateValid() || maxDate === null) {\r\n            return null;\r\n        }\r\n        if (maxDate < control.value) {\r\n            const parameters = new Map();\r\n            parameters.set('MAXDATE', moment(maxDate).format(control.GetDateTimeFormatString()));\r\n            return Validation.GetValidationErrorItem('datemax', validationMessage, validationMessageSummary, fieldName, parameters);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    /**\r\n     * Validiert ob die Zeit später als minTime ist.\r\n     * @param control Control das Validiert werden soll. Muss IDateTimeControl implementiert haben\r\n     * @param minTime Min. Zeit\r\n     * @param fieldName Label des Controls\r\n     * @param validationMessage Validierungsmeldung die\r\n     * @param validationMessageSummary Validierungsmeldung die im Validation Summary angezeigt wird\r\n     */\r\n    static minTime(control, minTime, fieldName, validationMessage, validationMessageSummary) {\r\n        // Check abbrechen, wenn kein gültiges Datum\r\n        if (!control.IsDateValid() || minTime === null) {\r\n            return null;\r\n        }\r\n        if (control.value !== null && minTime > control.value) {\r\n            const parameters = new Map();\r\n            parameters.set('MINTIME', moment(minTime).format(control.GetDateTimeFormatString()));\r\n            return Validation.GetValidationErrorItem('timemin', validationMessage, validationMessageSummary, fieldName, parameters);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    /**\r\n     * Validiert ob die Zeit früher als maxTime ist.\r\n     * @param control Control das Validiert werden soll. Muss IDateTimeControl implementiert haben\r\n     * @param maxTime Min. Zeit\r\n     * @param fieldName Label des Controls\r\n     * @param validationMessage Validierungsmeldung die\r\n     * @param validationMessageSummary Validierungsmeldung die im Validation Summary angezeigt wird\r\n     */\r\n    static maxTime(control, maxTime, fieldName, validationMessage, validationMessageSummary) {\r\n        // Check abbrechen, wenn kein gültiges Datum\r\n        if (!control.IsDateValid() || maxTime === null) {\r\n            return null;\r\n        }\r\n        if (control.value !== null && maxTime < control.value) {\r\n            const parameters = new Map();\r\n            parameters.set('MAXTIME', moment(maxTime).format(control.GetDateTimeFormatString()));\r\n            return Validation.GetValidationErrorItem('timemax', validationMessage, validationMessageSummary, fieldName, parameters);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    /**\r\n     * Validator der prüft ob der Wert ein Datum ist.\r\n     * @param control Control mit IDateTimeControl Interface implementierung\r\n     * @param fieldName Label des Controls\r\n     * @param validationMessage Validierungsmeldung die beim Control angezeigt wird\r\n     * @param validationMessageSummary Validierungsmeldung die im Validation Summary angezeigt wird\r\n     */\r\n    static isValidDate(control, fieldName, validationMessage, validationMessageSummary) {\r\n        if (!control.IsDateValid()) {\r\n            return Validation.GetValidationErrorItem('dateformat', validationMessage, validationMessageSummary, fieldName);\r\n            // return { 'dateformat': true, 'message': 'Feld \"' + fieldName + '\" ist kein gültiges Datum' };\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    /**\r\n     * Validator für min. Anzahl von Uploads\r\n     * @param control Control das Validatiert werden soll. Control muss IUploadControl implementiert haben\r\n     * @param minFiles Min. Anzahl Files die hochgeladen werden müssen\r\n     * @param fieldName Label des Controls\r\n     * @param validationMessage Validierungsmeldung die unterhalb des Controls angezeigt wird\r\n     * @param validationMessageSummary Validierungsmeldung die im Validation Summary angezeigt wird\r\n     */\r\n    static minFiles(control, minFiles, fieldName, validationMessage, validationMessageSummary) {\r\n        // Check abbrechen, wenn Min Files nicht gesetzt oder 0\r\n        if (minFiles === null || minFiles === 0) {\r\n            return null;\r\n        }\r\n        if (control.UploadedFileCount() !== null && minFiles > control.UploadedFileCount()) {\r\n            const parameters = new Map();\r\n            parameters.set('MINFILES', minFiles);\r\n            return Validation.GetValidationErrorItem('dateformat', validationMessage, validationMessageSummary, fieldName, parameters);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    /**\r\n     * Validator für MultiLanguage Control, welcher überprüft ob alle Sprachen erfasst sind.\r\n     * @param control Control das Validatiert werden soll\r\n     * @param languages Sprachen die im Control erfasst werden können.\r\n     * @param fieldName Label des Controls\r\n     * @param validationMessage Validierungsmeldung die unterhalb des Controls angezeigt wird\r\n     * @param validationMessageSummary Validierungsmeldung die im Validation Summary angezeigt wird\r\n     */\r\n    static multilanguageRequired(control, languages, fieldName, validationMessage, validationMessageSummary) {\r\n        let found = false;\r\n        languages.forEach((item) => {\r\n            if (control.value) {\r\n                if (control.value[item.IsoCode] === undefined || control.value[item.IsoCode] === null || control.value[item.IsoCode] === '') {\r\n                    found = true;\r\n                }\r\n            }\r\n        });\r\n        if (found) {\r\n            return Validation.GetValidationErrorItem('required', validationMessage, validationMessageSummary, fieldName);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    /**\r\n     * Validator für MultiLanguage Control, welcher überprüft ob min. ein Wert erfasst wurde\r\n     * @param control Control das Validatiert werden soll\r\n     * @param languages Sprachen die im Control erfasst werden können.\r\n     * @param fieldName Label des Controls\r\n     * @param validationMessage Validierungsmeldung die unterhalb des Controls angezeigt wird\r\n     * @param validationMessageSummary Validierungsmeldung die im Validation Summary angezeigt wird\r\n     */\r\n    static multilanguageRequiredAny(control, languages, fieldName, validationMessage, validationMessageSummary) {\r\n        let found = false;\r\n        languages.forEach((item) => {\r\n            if (control.value) {\r\n                if (control.value[item.IsoCode] !== undefined && control.value[item.IsoCode] !== null && control.value[item.IsoCode] !== '') {\r\n                    found = true;\r\n                }\r\n            }\r\n        });\r\n        if (!found) {\r\n            return Validation.GetValidationErrorItem('requiredany', validationMessage, validationMessageSummary, fieldName);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n}\n\n/**\r\n * Basis Komponente für NgRadiobuttonsCommon. Extends NgBaseModelControl\r\n */\r\nlet NgRadiobuttonsCommon = class NgRadiobuttonsCommon extends NgBaseModelControl {\r\n    /**\r\n     * Konstruktor\r\n     * Inject des Formulars\r\n     */\r\n    constructor(parent, injector) {\r\n        super(parent, injector);\r\n        /**\r\n         * Radio Button Index\r\n         */\r\n        this.radioButtonIndex = 0;\r\n        /**\r\n         * Resource Key für Validation Message Required bei Control\r\n         */\r\n        this._validationMessageRequired = 'VALIDATION_ERROR_REQUIRED';\r\n        /**\r\n         * Resource Key für Validation Message Required in Validation Summary\r\n         */\r\n        this._validationMessageRequiredSummary = 'VALIDATION_ERROR_SUMMARY_REQUIRED';\r\n        //#region Sub Control registration\r\n        /**\r\n         * Radio Buttons Content\r\n         */\r\n        this.contentRadiobuttons = [];\r\n    }\r\n    /**\r\n     * Erstellung des RadioButton\r\n     */\r\n    RegisterRadioButton(radioButton) {\r\n        this.contentRadiobuttons.push(radioButton);\r\n    }\r\n    /**\r\n     * Löschen des Radio Button\r\n     */\r\n    UnregisterRadioButton(radioButton) {\r\n        const index = this.contentRadiobuttons.indexOf(radioButton);\r\n        if (index >= 0) {\r\n            this.contentRadiobuttons.splice(index, 1);\r\n        }\r\n    }\r\n    //#endregion\r\n    /**\r\n     * GEtter für Radio Button Index\r\n     */\r\n    GetRadionButtonIndex() {\r\n        this.radioButtonIndex++;\r\n        return this.radioButtonIndex;\r\n    }\r\n    //#region ngModel Implementation\r\n    /**\r\n     * Wert schreiben\r\n     */\r\n    writeValue(value) {\r\n        super.writeValue(value);\r\n        if (value !== null && value !== undefined) {\r\n            this.contentRadiobuttons.forEach(itm => {\r\n                itm._checked = itm._value === value;\r\n            });\r\n        }\r\n    }\r\n    //#endregion\r\n    /**\r\n     * Item selektieren\r\n     */\r\n    SelectItem(value) {\r\n        this.contentRadiobuttons.forEach(itm => {\r\n            itm._checked = itm._value === value;\r\n        });\r\n        this.value = value;\r\n    }\r\n    /**\r\n     * Methode prüft ob Item checked ist\r\n     */\r\n    HasCheckedItem() {\r\n        const radioButtons = this.contentRadiobuttons;\r\n        if (radioButtons === undefined || radioButtons === null) {\r\n            return false;\r\n        }\r\n        return this.contentRadiobuttons.some(itm => itm._checked);\r\n    }\r\n    /**\r\n     * Validator\r\n     */\r\n    validateData(c) {\r\n        if (!this.HasCheckedItem()) {\r\n            return Validation.GetValidationErrorItem('required', this._validationMessageRequired, this._validationMessageRequiredSummary, this._label);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n};\r\n__decorate([\r\n    Input('validationmessagerequired'),\r\n    __metadata(\"design:type\", String)\r\n], NgRadiobuttonsCommon.prototype, \"_validationMessageRequired\", void 0);\r\n__decorate([\r\n    Input('validationmessagesummaryrequired'),\r\n    __metadata(\"design:type\", String)\r\n], NgRadiobuttonsCommon.prototype, \"_validationMessageRequiredSummary\", void 0);\r\nNgRadiobuttonsCommon = __decorate([\r\n    __param(0, Host()),\r\n    __metadata(\"design:paramtypes\", [NgFormularCommon, Injector])\r\n], NgRadiobuttonsCommon);\n\n/**\r\n * Abstract Klasse für NgBaseListControl. Extendes NgBaseModelControl\r\n */\r\nclass NgBaseListControl extends NgBaseModelControl {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * Definiert das Label für das Option Element\r\n         */\r\n        this._fieldLabel = 'label';\r\n        /**\r\n         * Definiert den Wert für das Option Element\r\n         */\r\n        this._fieldValue = 'value';\r\n        /**\r\n         * Definiert, ob das Option Element aktiv ist\r\n         */\r\n        this._fieldEnabled = '';\r\n        /**\r\n         * Definiert das Control als Required\r\n         */\r\n        this._isrequired = false;\r\n        /**\r\n         * Style Breite für List Control Element\r\n         */\r\n        this._width = null;\r\n    }\r\n    /**\r\n     * Input property für options\r\n     */\r\n    get options() {\r\n        return this._options;\r\n    }\r\n    /**\r\n     * setter für options\r\n     */\r\n    set options(val) {\r\n        this._options = val;\r\n    }\r\n}\r\n__decorate([\r\n    Input('optionlabeltemplate'),\r\n    __metadata(\"design:type\", TemplateRef)\r\n], NgBaseListControl.prototype, \"displayValueTemplate\", void 0);\r\n__decorate([\r\n    Input('optionlabel'),\r\n    __metadata(\"design:type\", String)\r\n], NgBaseListControl.prototype, \"_fieldLabel\", void 0);\r\n__decorate([\r\n    Input('optionvalue'),\r\n    __metadata(\"design:type\", String)\r\n], NgBaseListControl.prototype, \"_fieldValue\", void 0);\r\n__decorate([\r\n    Input('optionenabled'),\r\n    __metadata(\"design:type\", String)\r\n], NgBaseListControl.prototype, \"_fieldEnabled\", void 0);\r\n__decorate([\r\n    Input('isrequired'),\r\n    __metadata(\"design:type\", Boolean)\r\n], NgBaseListControl.prototype, \"_isrequired\", void 0);\r\n__decorate([\r\n    Input('width'),\r\n    __metadata(\"design:type\", String)\r\n], NgBaseListControl.prototype, \"_width\", void 0);\r\n__decorate([\r\n    Input('options'),\r\n    __metadata(\"design:type\", Array),\r\n    __metadata(\"design:paramtypes\", [Array])\r\n], NgBaseListControl.prototype, \"options\", null);\n\n/**\r\n * Abstract Klasse für NgBaseSelectControl. Extendes NgBaseListControl\r\n */\r\nclass NgBaseSelectControl extends NgBaseListControl {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * Definiert das Label für das Group Element\r\n         */\r\n        this._fieldGroupLabel = 'label';\r\n        /**\r\n         * Definiert die Collection der Items im Group Element\r\n         */\r\n        this._fieldGroupItems = '';\r\n    }\r\n}\r\n__decorate([\r\n    Input('grouplabel'),\r\n    __metadata(\"design:type\", String)\r\n], NgBaseSelectControl.prototype, \"_fieldGroupLabel\", void 0);\r\n__decorate([\r\n    Input('groupitems'),\r\n    __metadata(\"design:type\", String)\r\n], NgBaseSelectControl.prototype, \"_fieldGroupItems\", void 0);\n\n/**\r\n * Function um ein Key Value Pair für das Dropdown zu erzeugen\r\n * @param id ID\r\n * @param value Wert der an das Element gebunden werden soll\r\n */\r\nfunction _buildValueString(id, value) {\r\n    // Wenn ID null ist Object zurückgeben\r\n    if (id == null) {\r\n        return `${value}`;\r\n    }\r\n    // Mapping Objekt zu String\r\n    if (value && typeof value === 'object') {\r\n        value = 'Object';\r\n    }\r\n    // String als ID\r\n    return `${id}: ${value}`.slice(0, 50);\r\n}\r\n/**\r\n * Base Dropdown Komponente\r\n */\r\nlet NgDropdownCommon = class NgDropdownCommon extends NgBaseSelectControl {\r\n    /**\r\n     * Konstruktor\r\n     * @param parent Übergeordnetes HTML Element\r\n     * @param injector Injector für Services\r\n     * @param _renderer Render Engine\r\n     * @param _elementRef Referenz von HTML Element\r\n     */\r\n    constructor(parent, injector, _renderer, _elementRef) {\r\n        super(parent, injector);\r\n        this._renderer = _renderer;\r\n        this._elementRef = _elementRef;\r\n        /**\r\n         * Counter vom OptionID; default Wert = 0\r\n         */\r\n        this._optionIdCounter = 0;\r\n        /**\r\n         * OptionMap\r\n         */\r\n        this._optionMap = new Map();\r\n        /**\r\n         * compareWith-Funktion\r\n         */\r\n        this._compareWith = ɵlooseIdentical;\r\n        /**\r\n         * Label Text für Empty Item\r\n         */\r\n        this._emptylabel = '';\r\n        /**\r\n         * Option Value für Empty Item\r\n         */\r\n        this._emptyoptionvalue = null;\r\n        /**\r\n       * Resource Key für Validation Message Required bei Control\r\n       */\r\n        this._validationMessageRequired = 'VALIDATION_ERROR_REQUIRED';\r\n        /**\r\n         * Resource Key für Validation Message Required in Validation Summary\r\n         */\r\n        this._validationMessageRequiredSummary = 'VALIDATION_ERROR_SUMMARY_REQUIRED';\r\n    }\r\n    /**\r\n     * compareWith-Funktion\r\n     */\r\n    set compareWith(fn) {\r\n        if (typeof fn !== 'function') {\r\n            throw new Error(`compareWith must be a function, but received ${JSON.stringify(fn)}`);\r\n        }\r\n        this._compareWith = fn;\r\n    }\r\n    /**\r\n     * Wert einstellen\r\n     * @param value - Wert\r\n     */\r\n    setValue(value) {\r\n        super.setValue(this.getOptionValue(value));\r\n    }\r\n    /**\r\n     * Wert schreiben\r\n     * @param value - Wert\r\n     */\r\n    writeValue(value) {\r\n        this.setSelectedValue(value);\r\n        super.writeValue(value);\r\n    }\r\n    /**\r\n     * Registriert das OptionID-Counter als String\r\n     */\r\n    registerOption() {\r\n        return (this._optionIdCounter++).toString();\r\n    }\r\n    /**\r\n     * Methode die von Options aufgerufen wird, um das Mapping zwischen Dropdown Value und Value herzustellen.\r\n     * @param id: Id aus Options\r\n     * @param value: Value\r\n     */\r\n    setOptionMap(id, value) {\r\n        this._optionMap.set(id, value);\r\n        // Selected Value auf Control aktualisieren, wenn Value dem SelectedValue entspricht\r\n        if (this.value === value) {\r\n            this.setSelectedValue(value);\r\n        }\r\n    }\r\n    /**\r\n     * Setzt den Selected Value auf dem Control\r\n     * @param value Value\r\n     */\r\n    setSelectedValue(value) {\r\n        // Select Item aus Control lesen\r\n        const selectItem = this._elementRef.nativeElement.getElementsByTagName('select')[0];\r\n        /**\r\n         * Id vom Select Item\r\n         */\r\n        const id = this.getOptionId(value);\r\n        /**\r\n         * Value String\r\n         */\r\n        const valueString = _buildValueString(id, value);\r\n        if (selectItem !== undefined) {\r\n            this._renderer.setProperty(selectItem, 'value', valueString);\r\n        }\r\n    }\r\n    /**\r\n     * Nimmt das ID vom Option\r\n     * @param value\r\n     */\r\n    getOptionId(value) {\r\n        for (const id of Array.from(this._optionMap.keys())) {\r\n            if (this._compareWith(this._optionMap.get(id), value)) {\r\n                return id;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Nimmt den String-Wert vom Option\r\n     * @param valueString\r\n     */\r\n    getOptionValue(valueString) {\r\n        const id = this.extractId(valueString);\r\n        return this._optionMap.has(id) ? this._optionMap.get(id) : valueString;\r\n    }\r\n    /**\r\n     * ID extrahieren\r\n     * @param valueString String bei welchem die ID Extrahiert werden soll\r\n     */\r\n    extractId(valueString) {\r\n        return valueString.split(':')[0];\r\n    }\r\n    /**\r\n     * Validator\r\n     * @param c Control Instanz\r\n     */\r\n    validateData(c) {\r\n        let error = null;\r\n        if (this._isrequired) {\r\n            error = Validation.required(c, this._label, this._validationMessageRequired, this._validationMessageRequiredSummary);\r\n        }\r\n        return error;\r\n    }\r\n};\r\n__decorate([\r\n    Input('emptylabel'),\r\n    __metadata(\"design:type\", String)\r\n], NgDropdownCommon.prototype, \"_emptylabel\", void 0);\r\n__decorate([\r\n    Input('emptyvalue'),\r\n    __metadata(\"design:type\", String)\r\n], NgDropdownCommon.prototype, \"_emptyoptionvalue\", void 0);\r\n__decorate([\r\n    Input('compareWith'),\r\n    __metadata(\"design:type\", Function),\r\n    __metadata(\"design:paramtypes\", [Function])\r\n], NgDropdownCommon.prototype, \"compareWith\", null);\r\n__decorate([\r\n    Input('validationmessagerequired'),\r\n    __metadata(\"design:type\", String)\r\n], NgDropdownCommon.prototype, \"_validationMessageRequired\", void 0);\r\n__decorate([\r\n    Input('validationmessagesummaryrequired'),\r\n    __metadata(\"design:type\", String)\r\n], NgDropdownCommon.prototype, \"_validationMessageRequiredSummary\", void 0);\r\nNgDropdownCommon = __decorate([\r\n    __param(0, Host()),\r\n    __metadata(\"design:paramtypes\", [NgFormularCommon, Injector, Renderer2, ElementRef])\r\n], NgDropdownCommon);\r\n/**\r\n * ngDropdownOption-Klasse\r\n */\r\nclass NgDropdownOptionCommon {\r\n    /**\r\n     * Konstruktor\r\n     * @param _element Referenz auf HTML Element\r\n     * @param _renderer Render Engine\r\n     * @param _dropdown Dropdown Instanz\r\n     */\r\n    constructor(_element, _renderer, _dropdown) {\r\n        this._element = _element;\r\n        this._renderer = _renderer;\r\n        this._dropdown = _dropdown;\r\n        /**\r\n         * ID-String\r\n         */\r\n        this.id = null;\r\n        if (this._dropdown) {\r\n            this.id = this._dropdown.registerOption();\r\n        }\r\n    }\r\n    /**\r\n     * Option ngValue\r\n     */\r\n    set ngValue(value) {\r\n        // Cancel wenn kein Parent Dropdown vorhanden\r\n        if (this._dropdown == null) {\r\n            return;\r\n        }\r\n        this._dropdown.setOptionMap(this.id, value);\r\n        this._setElementValue(_buildValueString(this.id, value));\r\n        this._dropdown.writeValue(this._dropdown.value);\r\n    }\r\n    /**\r\n     * Wert-Setter\r\n     */\r\n    set value(value) {\r\n        this._setElementValue(value);\r\n    }\r\n    /**\r\n     * Den Wert vom Option-Element einstellen\r\n     * @param value Wert\r\n     */\r\n    _setElementValue(value) {\r\n        this._renderer.setProperty(this._element.nativeElement, 'value', value);\r\n    }\r\n    /**\r\n     * OnDestroy Event\r\n     */\r\n    ngOnDestroy() {\r\n        if (this._dropdown) {\r\n            this._dropdown._optionMap.delete(this.id);\r\n        }\r\n    }\r\n}\r\n__decorate([\r\n    Input('ngValue'),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], NgDropdownOptionCommon.prototype, \"ngValue\", null);\r\n__decorate([\r\n    Input('value'),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], NgDropdownOptionCommon.prototype, \"value\", null);\n\n/**\r\n *  Element für Access auf Option Field\r\n * @selector option\r\n */\r\nlet NgListboxOptionDirective = \r\n/**\r\n *Basis Komponente für NgListboxOption\r\n */\r\nclass NgListboxOptionDirective {\r\n    /**\r\n     * Konstruktor\r\n     * @param _element: ElementRef\r\n     * @param _renderer: Renderer2\r\n     */\r\n    constructor(_element, _renderer) {\r\n        this._element = _element;\r\n        this._renderer = _renderer;\r\n    }\r\n    /**\r\n     * Methode ergibt den Status der Elemente, die selektiert wurden\r\n     */\r\n    _setSelected(selected) {\r\n        this._renderer.setProperty(this._element.nativeElement, 'selected', selected);\r\n    }\r\n};\r\nNgListboxOptionDirective.ctorParameters = () => [\r\n    { type: ElementRef },\r\n    { type: Renderer2 }\r\n];\r\n__decorate([\r\n    Input('value'),\r\n    __metadata(\"design:type\", String)\r\n], NgListboxOptionDirective.prototype, \"_value\", void 0);\r\nNgListboxOptionDirective = __decorate([\r\n    Directive({ selector: '[ngOption], option' })\r\n    /**\r\n     *Basis Komponente für NgListboxOption\r\n     */\r\n    ,\r\n    __metadata(\"design:paramtypes\", [ElementRef, Renderer2])\r\n], NgListboxOptionDirective);\r\n/**\r\n * Wrapper für HTML Select\r\n */\r\nclass HTMLCollection {\r\n}\r\n// @Component({\r\n//   selector: 'ngListbox',\r\n//   templateUrl: './listbox.html',\r\n//   // Value Access Provider registrieren, damit Wert via Model geschrieben und gelesen werden kann\r\n//   providers: [\r\n//     { provide: NG_VALUE_ACCESSOR, multi: true, useExisting: NgListbox },\r\n//     { provide: NG_VALIDATORS, multi: true, useExisting: forwardRef(() => NgListbox) }\r\n//   ],\r\n//   // View Provider, damit das Formular an das Control gebunden werden kann\r\n//   viewProviders: [{ provide: ControlContainer, useExisting: NgFormular }]\r\n// })\r\n/**\r\n * Komponente für NgListboxCommon. Extends NgBaseSelectControl\r\n */\r\nclass NgListboxCommon extends NgBaseSelectControl {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * Anzahl der Zeilen\r\n         */\r\n        this._rowsize = 5;\r\n        /**\r\n         * Resource Key für Validation Message Required bei Control\r\n         */\r\n        this._validationMessageRequired = 'VALIDATION_ERROR_REQUIRED';\r\n        /**\r\n         * Resource Key für Validation Message Required in Validation Summary\r\n         */\r\n        this._validationMessageRequiredSummary = 'VALIDATION_ERROR_SUMMARY_REQUIRED';\r\n    }\r\n    /**\r\n     * Getter für selektierte Elemente\r\n     */\r\n    getSelectedItems(selectelement) {\r\n        const selectedValues = new Array();\r\n        if (selectelement.hasOwnProperty('selectedOptions')) {\r\n            const options = selectelement.selectedOptions;\r\n            for (let i = 0; i < options.length; i++) {\r\n                const opt = options.item(i);\r\n                selectedValues.push(opt.value);\r\n            }\r\n        }\r\n        else { // Degrade on IE\r\n            const options = selectelement.options;\r\n            for (let i = 0; i < options.length; i++) {\r\n                const opt = options.item(i);\r\n                if (opt.selected) {\r\n                    selectedValues.push(opt.value);\r\n                }\r\n            }\r\n            this.setValue(selectedValues);\r\n        }\r\n    }\r\n    /**\r\n     * Methode schreibt neuen Wert\r\n     */\r\n    writeValue(value) {\r\n        if (this.contentOptions && value) {\r\n            this.contentOptions.forEach(itm => {\r\n                itm._setSelected(value.indexOf(itm._value) >= 0);\r\n            });\r\n        }\r\n        super.writeValue(value);\r\n    }\r\n    /**\r\n     * Validator Methode\r\n     */\r\n    validateData(c) {\r\n        let error = null;\r\n        if (this._isrequired) {\r\n            error = Validation.required(c, this._label, this._validationMessageRequired, this._validationMessageRequiredSummary);\r\n        }\r\n        return error;\r\n    }\r\n}\r\n__decorate([\r\n    Input('rowsize'),\r\n    __metadata(\"design:type\", Number)\r\n], NgListboxCommon.prototype, \"_rowsize\", void 0);\r\n__decorate([\r\n    Input('validationmessagerequired'),\r\n    __metadata(\"design:type\", String)\r\n], NgListboxCommon.prototype, \"_validationMessageRequired\", void 0);\r\n__decorate([\r\n    Input('validationmessagesummaryrequired'),\r\n    __metadata(\"design:type\", String)\r\n], NgListboxCommon.prototype, \"_validationMessageRequiredSummary\", void 0);\r\n__decorate([\r\n    ViewChildren(NgListboxOptionDirective),\r\n    __metadata(\"design:type\", QueryList)\r\n], NgListboxCommon.prototype, \"contentOptions\", void 0);\n\n/**\r\n * Basis Komponente für NgValidationSummary\r\n */\r\nclass NgValidationSummaryCommon {\r\n    // #endregion\r\n    // #region Constructor\r\n    /**\r\n     * Konstruktor\r\n     * Inject des Formulars\r\n     */\r\n    constructor(parent, injector) {\r\n        /**\r\n         * Name-Property\r\n         */\r\n        this._name = '';\r\n        this.parent = parent;\r\n        this.lngResourceService = injector.get(LANGUAGERESOURCE_SERVICE, new InternalLanguageResourceService());\r\n    }\r\n    // #endregion\r\n    /**\r\n     * Validation Methode\r\n     */\r\n    get formErrors() {\r\n        const collection = new Array();\r\n        const items = Object.keys(this.parent.getForm().controls).map(key => {\r\n            return this.parent.getForm().controls[key];\r\n        });\r\n        this.getErrorCollection(items, collection);\r\n        return collection.filter(item => item !== null);\r\n    }\r\n    /**\r\n     * Die Methode gibt Collection von Errors. Verlangt controls: Array<NgForm | FormArray> und  collection: Array<Observable<string>>\r\n     */\r\n    getErrorCollection(controls, collection) {\r\n        controls.forEach(ctl => {\r\n            if (ctl.controls === undefined || ctl.controls === null) {\r\n                this.addErrorToCollection(ctl, collection);\r\n            }\r\n            else {\r\n                Object.keys(ctl.controls).map(controlKey => {\r\n                    const control = ctl.controls[controlKey];\r\n                    // Cancel Analyse wenn Item not Touched oder Valid\r\n                    if (control.touched === false || control.valid === true) {\r\n                        return;\r\n                    }\r\n                    // Handle wenn Control kein Container ist\r\n                    if (control.controls === undefined || control.controls === null) {\r\n                        this.addErrorToCollection(control, collection);\r\n                    }\r\n                    else {\r\n                        // Handling eines Control Containers\r\n                        const items = Object.keys(control.controls).map(formKey => {\r\n                            return control.controls[formKey];\r\n                        });\r\n                        this.getErrorCollection(items, collection);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Fügt einen Validation Error in die Error Collection hinzu\r\n     * @param ctl Fehlerhaftes Control\r\n     * @param collection Collection aller Fehlermeldungen\r\n     */\r\n    addErrorToCollection(ctl, collection) {\r\n        if (ctl.errors === null || ctl.touched === false || ctl.valid === true) {\r\n            return;\r\n        }\r\n        const keys = Object.keys(ctl.errors);\r\n        if (keys.length <= 0) {\r\n            return;\r\n        }\r\n        const errorItem = ctl.errors[keys[0]];\r\n        // Validation Parameters\r\n        const parameters = {};\r\n        if (errorItem.parameters !== null && errorItem.parameters !== undefined) {\r\n            errorItem.parameters.forEach((v, k) => {\r\n                parameters[k] = v;\r\n            });\r\n        }\r\n        parameters['FIELD'] = errorItem.fieldName;\r\n        collection.push(this.lngResourceService.GetString(errorItem.errorMessageValidationSummaryKey, parameters));\r\n    }\r\n    /**\r\n     * Getter wenn Errors entstehen\r\n     */\r\n    get hasErrors() {\r\n        return this.formErrors.length > 0;\r\n    }\r\n}\r\n__decorate([\r\n    Input('name'),\r\n    __metadata(\"design:type\", String)\r\n], NgValidationSummaryCommon.prototype, \"_name\", void 0);\n\n/**\r\n *Basis Komponente für NgTab\r\n */\r\nclass NgTabCommon {\r\n    constructor() {\r\n        /**\r\n         * Name des Controls\r\n         */\r\n        this._name = '';\r\n        /**\r\n         * Löscht versteckte TabItems\r\n         */\r\n        this._unloadtabitemswhenhidden = null;\r\n    }\r\n    // #region Control initialisieren\r\n    /**\r\n     * AfterContentInit Event\r\n     */\r\n    ngAfterContentInit() {\r\n        this.initTabs();\r\n    }\r\n    /**\r\n     * Initialisiert die Tabs\r\n     */\r\n    initTabs() {\r\n        const activeTab = this.tabItems().filter((tab) => tab._active);\r\n        this.tabItems().forEach(itm => {\r\n            if (this._unloadtabitemswhenhidden !== null) {\r\n                itm._unloadwhenhidden = this._unloadtabitemswhenhidden;\r\n            }\r\n        });\r\n        if (activeTab.length === 0) {\r\n            this.selectTab(this.tabItems()[0]);\r\n        }\r\n    }\r\n    // #endregion\r\n    /**\r\n     * Tab selektieren\r\n     * @param tab\r\n     */\r\n    selectTab(tab) {\r\n        // Cancel if Selected Tab is disabled\r\n        if (tab._disabled) {\r\n            return;\r\n        }\r\n        this.tabItems().forEach(item => item._active = false);\r\n        tab._active = true;\r\n    }\r\n    /**\r\n     * Ergibt das ID vom Tab-Button\r\n     * @param tabitemid ID des Tabs\r\n     */\r\n    GetTabItemButtonId(tabitemid) {\r\n        return this._name + '_' + tabitemid;\r\n    }\r\n}\r\n__decorate([\r\n    Input('name'),\r\n    __metadata(\"design:type\", String)\r\n], NgTabCommon.prototype, \"_name\", void 0);\r\n__decorate([\r\n    Input('tablabeltemplate'),\r\n    __metadata(\"design:type\", TemplateRef)\r\n], NgTabCommon.prototype, \"displayTabLabelTemplate\", void 0);\r\n__decorate([\r\n    Input('unloadtabitemswhenhidden'),\r\n    __metadata(\"design:type\", Boolean)\r\n], NgTabCommon.prototype, \"_unloadtabitemswhenhidden\", void 0);\n\n/**\r\n * Die Basis Komponente für NgTabItem\r\n */\r\nclass NgTabItemCommon {\r\n    constructor() {\r\n        /**\r\n         * Boolean Property prüft ob das Tab disabled ist\r\n         */\r\n        this._disabled = false;\r\n        /**\r\n         * Das Input property ekzeptiert boolen Wert. Default ist true. Definiert, ob die Komponente hidden sein sollte.\r\n         */\r\n        this._unloadwhenhidden = true;\r\n    }\r\n}\r\n__decorate([\r\n    Input('active'),\r\n    __metadata(\"design:type\", Boolean)\r\n], NgTabItemCommon.prototype, \"_active\", void 0);\r\n__decorate([\r\n    Input('disabled'),\r\n    __metadata(\"design:type\", Boolean)\r\n], NgTabItemCommon.prototype, \"_disabled\", void 0);\r\n__decorate([\r\n    Input('id'),\r\n    __metadata(\"design:type\", String)\r\n], NgTabItemCommon.prototype, \"_id\", void 0);\r\n__decorate([\r\n    Input('label'),\r\n    __metadata(\"design:type\", String)\r\n], NgTabItemCommon.prototype, \"_label\", void 0);\r\n__decorate([\r\n    Input('unloadwhenhidden'),\r\n    __metadata(\"design:type\", Boolean)\r\n], NgTabItemCommon.prototype, \"_unloadwhenhidden\", void 0);\r\n__decorate([\r\n    ContentChild(TemplateRef, { static: true }),\r\n    __metadata(\"design:type\", TemplateRef)\r\n], NgTabItemCommon.prototype, \"templateRef\", void 0);\n\n/**\r\n * Abstract Klasse für NgInputBase. Extendes NgBaseModelControl\r\n */\r\nclass NgInputBase extends NgBaseModelControl {\r\n    constructor() {\r\n        // #region Properties\r\n        super(...arguments);\r\n        /**\r\n         * Definiert das Control als Required\r\n         */\r\n        this._isrequired = false;\r\n        /**\r\n         * TextBox Placeholder\r\n         */\r\n        this._placeholder = null;\r\n        /**\r\n         * Erlaubte Zeichen bei der Eingabe\r\n         */\r\n        this._allowedchars = '';\r\n        /**\r\n         * Macht das Input readonly\r\n         */\r\n        this._readonly = false;\r\n        /**\r\n         * Text welcher als Tooltip angezeigt wird.\r\n         */\r\n        this._tooltiptext = '';\r\n        /**\r\n         * Autofill aktivieren oder deaktivieren\r\n         */\r\n        this._disableautocomplete = false;\r\n        // #endregion\r\n    }\r\n    // #endregion\r\n    // #region Event Handler\r\n    /**\r\n     * Methode validiert Input wenn KeyPress-Event passiert\r\n     */\r\n    onKeyPress(event) {\r\n        // Cancel wenn _allowedChars leer ist.\r\n        if (this._allowedchars.length === 0) {\r\n            return true;\r\n        }\r\n        // Validate Input\r\n        const character = String.fromCharCode(event.charCode);\r\n        // Zeichen in Allowed Chars nicht gefunden, Event nicht weitergeben\r\n        if (this._allowedchars.indexOf(character) < 0) {\r\n            event.preventDefault();\r\n        }\r\n        const inputControl = event.srcElement;\r\n        if (!this.OnKeyPressValidation(inputControl.selectionStart, character)) {\r\n            event.preventDefault();\r\n        }\r\n    }\r\n    // #endregion\r\n    // #region Protected Virtual Methods\r\n    /**\r\n     * Methode validiert wenn ein Drück-Event passiert\r\n     */\r\n    OnKeyPressValidation(position, character) {\r\n        return true;\r\n    }\r\n}\r\n__decorate([\r\n    Input('isrequired'),\r\n    __metadata(\"design:type\", Boolean)\r\n], NgInputBase.prototype, \"_isrequired\", void 0);\r\n__decorate([\r\n    Input('placeholder'),\r\n    __metadata(\"design:type\", String)\r\n], NgInputBase.prototype, \"_placeholder\", void 0);\r\n__decorate([\r\n    Input('allowedchars'),\r\n    __metadata(\"design:type\", String)\r\n], NgInputBase.prototype, \"_allowedchars\", void 0);\r\n__decorate([\r\n    Input('readonly'),\r\n    __metadata(\"design:type\", Boolean)\r\n], NgInputBase.prototype, \"_readonly\", void 0);\r\n__decorate([\r\n    Input('regexvalidation'),\r\n    __metadata(\"design:type\", String)\r\n], NgInputBase.prototype, \"_pattern\", void 0);\r\n__decorate([\r\n    Input('tooltiptext'),\r\n    __metadata(\"design:type\", String)\r\n], NgInputBase.prototype, \"_tooltiptext\", void 0);\r\n__decorate([\r\n    Input('disableautocomplete'),\r\n    __metadata(\"design:type\", Boolean)\r\n], NgInputBase.prototype, \"_disableautocomplete\", void 0);\n\n/**\r\n * Basis Komponente für NgInput\r\n */\r\nclass NgInputCommon extends NgInputBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * Max länge an Zeichen für Eingabefeld\r\n         */\r\n        this._maxlength = null;\r\n        /**\r\n         * Fix breite für das Control definieren.\r\n         */\r\n        this._controlwidth = null;\r\n        /**\r\n         * Resource Key für Validation Message Required bei Control\r\n         */\r\n        this._validationMessageRequired = 'VALIDATION_ERROR_REQUIRED';\r\n        /**\r\n         * Resource Key für Validation Message Required in Validation Summary\r\n         */\r\n        this._validationMessageRequiredSummary = 'VALIDATION_ERROR_SUMMARY_REQUIRED';\r\n        /**\r\n         * Resource Key für Validation Message Pattern bei Control\r\n         */\r\n        this._validationMessagePattern = 'VALIDATION_ERROR_PATTERN';\r\n        /**\r\n         * Resource Key für Validation Message Pattern in Validation Summary\r\n         */\r\n        this._validationMessagePatternSummary = 'VALIDATION_ERROR_SUMMARY_PATTERN';\r\n    }\r\n    /**\r\n     * Methode validiert, ob der Wert den gegebenen Kriterien entspricht\r\n     */\r\n    validateData(c) {\r\n        let error = null;\r\n        if (this._isrequired) {\r\n            error = Validation.required(c, this._label, this._validationMessageRequired, this._validationMessageRequiredSummary);\r\n        }\r\n        if (error === null && this._pattern !== undefined && this._pattern !== null) {\r\n            error = Validation.patternValidator(c, this._pattern, this._label, this._validationMessagePattern, this._validationMessagePatternSummary);\r\n        }\r\n        return error;\r\n    }\r\n}\r\n__decorate([\r\n    Input('maxlength'),\r\n    __metadata(\"design:type\", Number)\r\n], NgInputCommon.prototype, \"_maxlength\", void 0);\r\n__decorate([\r\n    Input('controlwidth'),\r\n    __metadata(\"design:type\", String)\r\n], NgInputCommon.prototype, \"_controlwidth\", void 0);\r\n__decorate([\r\n    Input('validationmessagerequired'),\r\n    __metadata(\"design:type\", String)\r\n], NgInputCommon.prototype, \"_validationMessageRequired\", void 0);\r\n__decorate([\r\n    Input('validationmessagesummaryrequired'),\r\n    __metadata(\"design:type\", String)\r\n], NgInputCommon.prototype, \"_validationMessageRequiredSummary\", void 0);\r\n__decorate([\r\n    Input('validationmessagepattern'),\r\n    __metadata(\"design:type\", String)\r\n], NgInputCommon.prototype, \"_validationMessagePattern\", void 0);\r\n__decorate([\r\n    Input('validationmessagesummarypattern'),\r\n    __metadata(\"design:type\", String)\r\n], NgInputCommon.prototype, \"_validationMessagePatternSummary\", void 0);\n\n/**\r\n * Basis Komponente für NgInputArea\r\n */\r\nclass NgInputAreaCommon extends NgInputCommon {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * Definiert die Höhe der TextArea Box.\r\n         */\r\n        this._rows = 5;\r\n        /**\r\n         * Definiert die Höhe der TextArea Box. Ist normalfall leer, da Höhe auch über Rows gesetzt werden kann.\r\n         */\r\n        this._height = null;\r\n        /**\r\n         * Property mit dem Custom CSS Klassen auf dem Form-Control definiert werden können.\r\n         */\r\n        this._customClasses = '';\r\n    }\r\n    /**\r\n     * Getter für die Länge des Inputs\r\n     */\r\n    get _currentLength() {\r\n        if (this.value === null || this.value === undefined) {\r\n            return 0;\r\n        }\r\n        else {\r\n            return this.value.length + this.value.split(/\\r|\\n/).length - 1;\r\n        }\r\n    }\r\n    /**\r\n     * Methode wird 'true' ergeben wenn ein Key gedrückt wird und maxlength ist nicht definiert\r\n     */\r\n    onKeyPress(event) {\r\n        // Exist if MaxLength not defined\r\n        if (this._maxlength === undefined || this._maxlength === null) {\r\n            return true;\r\n        }\r\n        if (this._currentLength >= this._maxlength || ((event.keyCode === 13 || event.keyCode === 10) && this._currentLength + 1 >= this._maxlength)) {\r\n            event.preventDefault();\r\n        }\r\n    }\r\n}\r\n__decorate([\r\n    Input('rows'),\r\n    __metadata(\"design:type\", Number)\r\n], NgInputAreaCommon.prototype, \"_rows\", void 0);\r\n__decorate([\r\n    Input('height'),\r\n    __metadata(\"design:type\", String)\r\n], NgInputAreaCommon.prototype, \"_height\", void 0);\r\n__decorate([\r\n    Input('customCssClass'),\r\n    __metadata(\"design:type\", String)\r\n], NgInputAreaCommon.prototype, \"_customClasses\", void 0);\n\n/**\r\n * Basis Komponente für NgInputDecimal\r\n */\r\nclass NgInputDecimalCommon extends NgInputBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * Definiert das Negative Werte erlaubt sind\r\n         */\r\n        this._allownegativ = false;\r\n        /**\r\n         * Definiert den minimalen Wert\r\n         */\r\n        this._minvalue = undefined;\r\n        /**\r\n         * Definiert den maximalen Wert\r\n         */\r\n        this._maxvalue = undefined;\r\n        /**\r\n         * Resource Key für Validation Message Required bei Control\r\n         */\r\n        this._validationMessageRequired = 'VALIDATION_ERROR_REQUIRED';\r\n        /**\r\n         * Resource Key für Validation Message Required in Validation Summary\r\n         */\r\n        this._validationMessageRequiredSummary = 'VALIDATION_ERROR_SUMMARY_REQUIRED';\r\n        /**\r\n         * Resource Key für Validation Message MinValue bei Control\r\n         */\r\n        this._validationMessageMinValue = 'VALIDATION_ERROR_MINVALUE';\r\n        /**\r\n         * Resource Key für Validation Message MinValue in Validation Summary\r\n         */\r\n        this._validationMessageMinValueSummary = 'VALIDATION_ERROR_SUMMARY_MINVALUE';\r\n        /**\r\n         * Resource Key für Validation Message MaxValue bei Control\r\n         */\r\n        this._validationMessageMaxValue = 'VALIDATION_ERROR_MAXVALUE';\r\n        /**\r\n         * Resource Key für Validation Message MaxValue in Validation Summary\r\n         */\r\n        this._validationMessageMaxValueSummary = 'VALIDATION_ERROR_SUMMARY_MAXVALUE';\r\n    }\r\n    /**\r\n     * Methode die erzeugt den Control in Abhängigkeit davon, ob negative Were erlaubt sing oder nicht\r\n     */\r\n    OnClassInit() {\r\n        super.OnClassInit();\r\n        /**\r\n         * Definiert die Werte die erlaubt sind\r\n         */\r\n        this._allowedchars = '0123456789' + this.GetDecimalSymbol();\r\n        if (this._allownegativ) {\r\n            this._allowedchars = this._allowedchars + '-';\r\n        }\r\n    }\r\n    /**\r\n     * Konvertiert den Wert des Inputs\r\n     */\r\n    ConvertInputValue(value) {\r\n        if (value === '' || value === null) {\r\n            return null;\r\n        }\r\n        else {\r\n            if (this._allownegativ === true && value === '-') {\r\n                return '-';\r\n            }\r\n            else if (value === '.') {\r\n                return '0.';\r\n            }\r\n            else {\r\n                return parseFloat(value);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Methode validiert ob der Wert entspricht den gegebenen Kriterien wenn ein Key gedrückt wird\r\n     */\r\n    OnKeyPressValidation(position, character) {\r\n        if (this._allownegativ === false && character === '-' || this._allownegativ === true && position > 0 && character === '-') {\r\n            return false;\r\n        }\r\n        // Verhindern von Doppelpunkt Eingabe (45..545)\r\n        if (this._value !== null && this._value.toString().length < position && character === '.') {\r\n            return false;\r\n        }\r\n        if (character === this.GetDecimalSymbol() && this._value !== null && this._value.toString().indexOf(this.GetDecimalSymbol()) >= 0) {\r\n            return false;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n    /**\r\n     * Methode validiert ob der Wert entspricht den gegebenen Kriterien\r\n     */\r\n    validateData(c) {\r\n        /**\r\n         * Error Meldung, die angezeigt wird, wenn die Kriterien nicht erfüllt sind\r\n         */\r\n        let error = null;\r\n        if (this._isrequired) {\r\n            error = Validation.required(c, this._label, this._validationMessageRequired, this._validationMessageRequiredSummary);\r\n        }\r\n        if (error === null && this._minvalue !== undefined && this._minvalue !== null) {\r\n            error = Validation.minValue(c, this._minvalue, this._label, this._validationMessageMinValue, this._validationMessageMinValueSummary);\r\n        }\r\n        if (error === null && this._maxvalue !== undefined && this._maxvalue !== null) {\r\n            error = Validation.maxValue(c, this._maxvalue, this._label, this._validationMessageMaxValue, this._validationMessageMaxValueSummary);\r\n        }\r\n        return error;\r\n    }\r\n}\r\n__decorate([\r\n    Input('allownegativ'),\r\n    __metadata(\"design:type\", Boolean)\r\n], NgInputDecimalCommon.prototype, \"_allownegativ\", void 0);\r\n__decorate([\r\n    Input('minvalue'),\r\n    __metadata(\"design:type\", Number)\r\n], NgInputDecimalCommon.prototype, \"_minvalue\", void 0);\r\n__decorate([\r\n    Input('maxvalue'),\r\n    __metadata(\"design:type\", Number)\r\n], NgInputDecimalCommon.prototype, \"_maxvalue\", void 0);\r\n__decorate([\r\n    Input('validationmessagerequired'),\r\n    __metadata(\"design:type\", String)\r\n], NgInputDecimalCommon.prototype, \"_validationMessageRequired\", void 0);\r\n__decorate([\r\n    Input('validationmessagesummaryrequired'),\r\n    __metadata(\"design:type\", String)\r\n], NgInputDecimalCommon.prototype, \"_validationMessageRequiredSummary\", void 0);\r\n__decorate([\r\n    Input('validationmessageminvalue'),\r\n    __metadata(\"design:type\", String)\r\n], NgInputDecimalCommon.prototype, \"_validationMessageMinValue\", void 0);\r\n__decorate([\r\n    Input('validationmessagesummaryminvalue'),\r\n    __metadata(\"design:type\", String)\r\n], NgInputDecimalCommon.prototype, \"_validationMessageMinValueSummary\", void 0);\r\n__decorate([\r\n    Input('validationmessagemaxvalue'),\r\n    __metadata(\"design:type\", String)\r\n], NgInputDecimalCommon.prototype, \"_validationMessageMaxValue\", void 0);\r\n__decorate([\r\n    Input('validationmessagesummarymaxvalue'),\r\n    __metadata(\"design:type\", String)\r\n], NgInputDecimalCommon.prototype, \"_validationMessageMaxValueSummary\", void 0);\n\n/**\r\n * Basis Komponente für NgInputCurrency\r\n */\r\nclass NgInputCurrencyCommon extends NgInputDecimalCommon {\r\n}\n\n/**\r\n * Basis Komponente für NgInputEmail\r\n */\r\nclass NgInputEmailCommon extends NgInputCommon {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * Resource Key für Validation Message Email bei Control\r\n         */\r\n        this._validationMessageEmail = 'VALIDATION_ERROR_EMAIL';\r\n        /**\r\n         * Resource Key für Validation Message Email in Validation Summary\r\n         */\r\n        this._validationMessageEmailSummary = 'VALIDATION_ERROR_SUMMARY_EMAIL';\r\n    }\r\n    /**\r\n     * Methode validiert, ob der Wert den gegebenen Kriteriten entspricht\r\n     */\r\n    validateData(c) {\r\n        let error = super.validateData(c);\r\n        if (error === null) {\r\n            error = Validation.email(c, this._label, this._validationMessageEmail, this._validationMessageEmailSummary);\r\n        }\r\n        return error;\r\n    }\r\n}\r\n__decorate([\r\n    Input('validationmessageemail'),\r\n    __metadata(\"design:type\", String)\r\n], NgInputEmailCommon.prototype, \"_validationMessageEmail\", void 0);\r\n__decorate([\r\n    Input('validationmessagesummaryemail'),\r\n    __metadata(\"design:type\", String)\r\n], NgInputEmailCommon.prototype, \"_validationMessageEmailSummary\", void 0);\n\n/**\r\n * Basis Komponente für NgInputInteger\r\n */\r\nclass NgInputIntegerCommon extends NgInputBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * Definiert das Negative Werte erlaubt sind\r\n         */\r\n        this._allownegativ = false;\r\n        /**\r\n         * Definiert den minimalen Wert\r\n         */\r\n        this._minvalue = undefined;\r\n        /**\r\n         * Definiert den maximalen Wert\r\n         */\r\n        this._maxvalue = undefined;\r\n        /**\r\n         * Resource Key für Validation Message Required bei Control\r\n         */\r\n        this._validationMessageRequired = 'VALIDATION_ERROR_REQUIRED';\r\n        /**\r\n         * Resource Key für Validation Message Required in Validation Summary\r\n         */\r\n        this._validationMessageRequiredSummary = 'VALIDATION_ERROR_SUMMARY_REQUIRED';\r\n        /**\r\n         * Resource Key für Validation Message MinValue bei Control\r\n         */\r\n        this._validationMessageMinValue = 'VALIDATION_ERROR_MINVALUE';\r\n        /**\r\n         * Resource Key für Validation Message MinValue in Validation Summary\r\n         */\r\n        this._validationMessageMinValueSummary = 'VALIDATION_ERROR_SUMMARY_MINVALUE';\r\n        /**\r\n         * Resource Key für Validation Message MaxValue bei Control\r\n         */\r\n        this._validationMessageMaxValue = 'VALIDATION_ERROR_MAXVALUE';\r\n        /**\r\n         * Resource Key für Validation Message MaxValue in Validation Summary\r\n         */\r\n        this._validationMessageMaxValueSummary = 'VALIDATION_ERROR_SUMMARY_MAXVALUE';\r\n    }\r\n    /**\r\n     * Methode die erzeugt den Control in Abhängigkeit davon, ob negative Were erlaubt sing oder nicht\r\n     */\r\n    OnClassInit() {\r\n        super.OnClassInit();\r\n        /**\r\n         * Definiert die Wete die erlaubt sind\r\n         */\r\n        this._allowedchars = '0123456789';\r\n        if (this._allownegativ) {\r\n            this._allowedchars = this._allowedchars + '-';\r\n        }\r\n    }\r\n    /**\r\n     * Konvertiert den Wert des Inputs\r\n     */\r\n    ConvertInputValue(value) {\r\n        if (value === '' || value === null) {\r\n            return null;\r\n        }\r\n        else {\r\n            if (this._allownegativ === true && value === '-') {\r\n                return '-';\r\n            }\r\n            else {\r\n                return parseInt(value, 10);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Methode validiert ob der Wert entspricht den gegebenen Kriterien wenn ein Key gedrückt wird\r\n     */\r\n    OnKeyPressValidation(position, character) {\r\n        if (this._allownegativ === false && character === '-' || this._allownegativ === true && position > 0 && character === '-') {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * Methode validiert ob der Wert entspricht den gegebenen Kriterien\r\n     */\r\n    validateData(c) {\r\n        /**\r\n         * Error Meldung, die angezeigt wird, wenn die Kriterien nicht erfüllt sind\r\n         */\r\n        let error = null;\r\n        if (this._isrequired) {\r\n            error = Validation.required(c, this._label, this._validationMessageRequired, this._validationMessageRequiredSummary);\r\n        }\r\n        if (error === null && this._minvalue !== undefined && this._minvalue !== null) {\r\n            error = Validation.minValue(c, this._minvalue, this._label, this._validationMessageMinValue, this._validationMessageMinValueSummary);\r\n        }\r\n        if (error === null && this._maxvalue !== undefined && this._maxvalue !== null) {\r\n            error = Validation.maxValue(c, this._maxvalue, this._label, this._validationMessageMaxValue, this._validationMessageMaxValueSummary);\r\n        }\r\n        return error;\r\n    }\r\n}\r\n__decorate([\r\n    Input('allownegativ'),\r\n    __metadata(\"design:type\", Boolean)\r\n], NgInputIntegerCommon.prototype, \"_allownegativ\", void 0);\r\n__decorate([\r\n    Input('minvalue'),\r\n    __metadata(\"design:type\", Number)\r\n], NgInputIntegerCommon.prototype, \"_minvalue\", void 0);\r\n__decorate([\r\n    Input('maxvalue'),\r\n    __metadata(\"design:type\", Number)\r\n], NgInputIntegerCommon.prototype, \"_maxvalue\", void 0);\r\n__decorate([\r\n    Input('validationmessagerequired'),\r\n    __metadata(\"design:type\", String)\r\n], NgInputIntegerCommon.prototype, \"_validationMessageRequired\", void 0);\r\n__decorate([\r\n    Input('validationmessagesummaryrequired'),\r\n    __metadata(\"design:type\", String)\r\n], NgInputIntegerCommon.prototype, \"_validationMessageRequiredSummary\", void 0);\r\n__decorate([\r\n    Input('validationmessageminvalue'),\r\n    __metadata(\"design:type\", String)\r\n], NgInputIntegerCommon.prototype, \"_validationMessageMinValue\", void 0);\r\n__decorate([\r\n    Input('validationmessagesummaryminvalue'),\r\n    __metadata(\"design:type\", String)\r\n], NgInputIntegerCommon.prototype, \"_validationMessageMinValueSummary\", void 0);\r\n__decorate([\r\n    Input('validationmessagemaxvalue'),\r\n    __metadata(\"design:type\", String)\r\n], NgInputIntegerCommon.prototype, \"_validationMessageMaxValue\", void 0);\r\n__decorate([\r\n    Input('validationmessagesummarymaxvalue'),\r\n    __metadata(\"design:type\", String)\r\n], NgInputIntegerCommon.prototype, \"_validationMessageMaxValueSummary\", void 0);\n\n/**\r\n * Basis Komponente für NgInputPassword\r\n */\r\nclass NgInputPasswordCommon extends NgInputCommon {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * Resource Key für Validation Message MinLength bei Control\r\n         */\r\n        this._validationMessageMinLength = 'VALIDATION_ERROR_MINLENGTH';\r\n        /**\r\n         * Resource Key für Validation Message MinLength in Validation Summary\r\n         */\r\n        this._validationMessageMinLengthSummary = 'VALIDATION_ERROR_SUMMARY_MINLENGTH';\r\n        /**\r\n         * Min. Textlänge\r\n         */\r\n        this._minlength = 5;\r\n    }\r\n    /**\r\n     * Methode validiert, ob der Wert den gegebenen Kriteriten entspricht\r\n     */\r\n    validateData(c) {\r\n        let error = super.validateData(c);\r\n        if (error === null) {\r\n            error = Validation.minLength(c, this._minlength, this._label, this._validationMessageMinLength, this._validationMessageMinLengthSummary);\r\n        }\r\n        return error;\r\n    }\r\n}\r\n__decorate([\r\n    Input('validationmessageminlength'),\r\n    __metadata(\"design:type\", String)\r\n], NgInputPasswordCommon.prototype, \"_validationMessageMinLength\", void 0);\r\n__decorate([\r\n    Input('validationmessagesummaryminlength'),\r\n    __metadata(\"design:type\", String)\r\n], NgInputPasswordCommon.prototype, \"_validationMessageMinLengthSummary\", void 0);\r\n__decorate([\r\n    Input('minlength'),\r\n    __metadata(\"design:type\", Number)\r\n], NgInputPasswordCommon.prototype, \"_minlength\", void 0);\n\n/**\r\n * Basis Komponente für NgInputSearch\r\n */\r\nclass NgInputSearchCommon extends NgInputCommon {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * Name des Such-Icons\r\n         */\r\n        this._searchIconName = '';\r\n        /**\r\n       * Text welcher auf dem Button angezeigt wird\r\n       */\r\n        this._buttontext = '';\r\n        /**\r\n         * Event wenn auf das Such-Icon geclickt wird\r\n         */\r\n        this.clickaction = new EventEmitter();\r\n    }\r\n    /**\r\n     * Methode sendet den Wert des Inputs durch das Event\r\n     */\r\n    searchClick() {\r\n        this.clickaction.emit(this.value);\r\n    }\r\n}\r\n__decorate([\r\n    Input('iconname'),\r\n    __metadata(\"design:type\", String)\r\n], NgInputSearchCommon.prototype, \"_searchIconName\", void 0);\r\n__decorate([\r\n    Input('buttontext'),\r\n    __metadata(\"design:type\", String)\r\n], NgInputSearchCommon.prototype, \"_buttontext\", void 0);\r\n__decorate([\r\n    Output('onclick'),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], NgInputSearchCommon.prototype, \"clickaction\", void 0);\n\n/**\r\n * Model für Pager Settings\r\n */\r\nclass PagerData {\r\n    /**\r\n     * Konstruktor\r\n     * @param PageSize Anzahl Elemente pro Seite\r\n     * @param CurrentPageIndex Aktuelle Seite\r\n     * @param TotalRowCount Total Rows in Datenbank\r\n     */\r\n    constructor(PageSize, CurrentPageIndex, TotalRowCount) {\r\n        /**\r\n         * Gesamte Anzahl der Zeilen\r\n        */\r\n        this.TotalRowCount = 0;\r\n        /**\r\n         * Aktueller Index der Seite\r\n         */\r\n        this.CurrentPageIndex = 0;\r\n        /**\r\n         * PageSize\r\n         */\r\n        this.PageSize = 0;\r\n        this.PageSize = PageSize;\r\n        this.CurrentPageIndex = CurrentPageIndex;\r\n        this.TotalRowCount = TotalRowCount;\r\n    }\r\n}\r\n/**\r\n * GridResponse-Klasse\r\n */\r\nclass GridResponse {\r\n}\r\n/**\r\n * Model für Sortierung\r\n */\r\nclass SortDescriptor {\r\n    /**\r\n     * Konstruktor\r\n     * @param sortcolumn Column die Sortiert wird\r\n     * @param sortorder Art der Sortierung\r\n     */\r\n    constructor(sortcolumn, sortorder) {\r\n        this.SortColumn = sortcolumn;\r\n        this.SortOrder = sortorder;\r\n    }\r\n}\r\n/**\r\n * Enum für Sortierung\r\n */\r\nvar SortOrder;\r\n(function (SortOrder) {\r\n    SortOrder[SortOrder[\"None\"] = 0] = \"None\";\r\n    SortOrder[SortOrder[\"Ascending\"] = 1] = \"Ascending\";\r\n    SortOrder[SortOrder[\"Descending\"] = 2] = \"Descending\";\r\n})(SortOrder || (SortOrder = {}));\n\n/**\r\n *Basis Komponente für NgGrid\r\n */\r\nclass NgGridCommon {\r\n    constructor(cd) {\r\n        this.cd = cd;\r\n        /**\r\n         * Private Property. Enthielt die Column Menge. Type: number. Default ist 0\r\n         */\r\n        this.ColumnCount = 0;\r\n        /**\r\n         * Protected Property. Enthielt Array of Pages. Default value: empty array []\r\n         */\r\n        this.paginators = [];\r\n        /**\r\n         * Protected Property. Enthielt die Nummer der aktiven Seite. Type: number. Default ist 1\r\n         */\r\n        this.activePage = 1;\r\n        /**\r\n         * Protected Property. Enthielt die Nummer der ersten angezeigtenen Seite in Pager. Type: number. Default ist 1\r\n         */\r\n        this.firstPageNumber = 1;\r\n        /**\r\n         * Text in Pager für 'Seite x von y'.\r\n         * Folgende Interpolation Texte sind vorhanden:\r\n         * {{CURRENTPAGE}}: Aktuelle Seite\r\n         * {{TOTALPAGES}}: Anzahl Seiten\r\n         */\r\n        this.pagingText = 'Seite {{CURRENTPAGE}} von {{TOTALPAGES}}';\r\n        /**\r\n         * Text in Page für Anzahl Seitenelemente pro Seite\r\n         * Folgende Interpolation Texte sind vorhanden:\r\n         * {{PAGESIZE}}: Anzahl Elemente pro Seite\r\n         */\r\n        this.pageSizeText = 'Einträge pro Seite {{PAGESIZE}}';\r\n        /**\r\n         * Output EventEmitter. Wird aufgerufen wenn das Pager geklickt ist.\r\n         */\r\n        this._pagingEvent = new EventEmitter();\r\n        /**\r\n         * Output EventEmitter. Wird aufgerufen wenn ein Header geklickt ist, damit das Column soritert wird.\r\n         */\r\n        this._sortingevent = new EventEmitter();\r\n        /**\r\n         * Output EventEmitter. Wird aufgerufen wenn ein PageSize geklickt ist, damit PageSizing geändert wird.\r\n         */\r\n        this._pageSizeChanged = new EventEmitter();\r\n        //#endregion\r\n        /**\r\n         * Aktuelle Sortierung\r\n         */\r\n        this.sortDirection = SortOrder.None;\r\n        /**\r\n         * Aktuell Sortierte Spalte\r\n         */\r\n        this.sortColumn = '';\r\n    }\r\n    /**\r\n     * Setzt die neue Seite\r\n     * @param newStartIndex Neuer Seiten Index (Zero-Based)\r\n     */\r\n    pageChange(newStartIndex) {\r\n        this._pagingEvent.emit(newStartIndex);\r\n    }\r\n    /**\r\n     * Setzt die Page Size auf dem Grid neu\r\n     * @param pageSize Grösse der Page\r\n     */\r\n    pageSizeChanged(pageSize) {\r\n        this._pageSizeChanged.emit(pageSize);\r\n    }\r\n    /**\r\n     * Die Methode erhöht die Column-Stücke um eins\r\n     */\r\n    RegisterColumn() {\r\n        this.ColumnCount++;\r\n        // Detect Changes ausführen, da ColumnChange nach OnInit ausgeführt wird.\r\n        this.cd.detectChanges();\r\n    }\r\n    /**\r\n     * Die Methode verringert die Column-Stücke um eins\r\n     */\r\n    UnregisterColumn() {\r\n        this.ColumnCount--;\r\n    }\r\n    /**\r\n     * Die Methode deffiniert das Sortierung Flow\r\n     */\r\n    SortBy(command) {\r\n        if (command === this.sortColumn) {\r\n            switch (this.sortDirection) {\r\n                case SortOrder.None:\r\n                case SortOrder.Descending:\r\n                    this.sortDirection = SortOrder.Ascending;\r\n                    break;\r\n                case SortOrder.Ascending:\r\n                    this.sortDirection = SortOrder.Descending;\r\n                    break;\r\n            }\r\n        }\r\n        else {\r\n            this.sortDirection = SortOrder.Ascending;\r\n        }\r\n        const result = new SortDescriptor();\r\n        result.SortColumn = command;\r\n        result.SortOrder = this.sortDirection;\r\n        this._sortingevent.emit(result);\r\n    }\r\n    /**\r\n     * Model für Sortierung\r\n     * @param sortDescription Settings für aktuelle sortierung\r\n     */\r\n    set ApplySort(sortDescription) {\r\n        this.sortColumn = sortDescription.SortColumn;\r\n        this.sortDirection = sortDescription.SortOrder;\r\n    }\r\n    /**\r\n     * Methode welche die aktuelle Sortierte Spalte zurückgibt\r\n     */\r\n    GetSortColumn() {\r\n        return this.sortColumn;\r\n    }\r\n    /**\r\n     * Methode welche die Sortierung für die Spalte zurückgibt\r\n     */\r\n    GetSortDirection() {\r\n        return this.sortDirection;\r\n    }\r\n}\r\n__decorate([\r\n    Input('value'),\r\n    __metadata(\"design:type\", Object)\r\n], NgGridCommon.prototype, \"value\", void 0);\r\n__decorate([\r\n    Input('pagerdata'),\r\n    __metadata(\"design:type\", PagerData)\r\n], NgGridCommon.prototype, \"pagerdata\", void 0);\r\n__decorate([\r\n    Input('name'),\r\n    __metadata(\"design:type\", String)\r\n], NgGridCommon.prototype, \"name\", void 0);\r\n__decorate([\r\n    Input('emptytext'),\r\n    __metadata(\"design:type\", String)\r\n], NgGridCommon.prototype, \"_emptytext\", void 0);\r\n__decorate([\r\n    Input('pagingtext'),\r\n    __metadata(\"design:type\", String)\r\n], NgGridCommon.prototype, \"pagingText\", void 0);\r\n__decorate([\r\n    Input('pagesizetext'),\r\n    __metadata(\"design:type\", String)\r\n], NgGridCommon.prototype, \"pageSizeText\", void 0);\r\n__decorate([\r\n    Input('maxvisiblepagenumbers'),\r\n    __metadata(\"design:type\", Number)\r\n], NgGridCommon.prototype, \"_maxvisiblepagenumbers\", void 0);\r\n__decorate([\r\n    Input('headers'),\r\n    __metadata(\"design:type\", TemplateRef)\r\n], NgGridCommon.prototype, \"_headers\", void 0);\r\n__decorate([\r\n    Input('body'),\r\n    __metadata(\"design:type\", TemplateRef)\r\n], NgGridCommon.prototype, \"_body\", void 0);\r\n__decorate([\r\n    Output('onpaging'),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], NgGridCommon.prototype, \"_pagingEvent\", void 0);\r\n__decorate([\r\n    Output('onsorting'),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], NgGridCommon.prototype, \"_sortingevent\", void 0);\r\n__decorate([\r\n    Output('onpagesizechanged'),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], NgGridCommon.prototype, \"_pageSizeChanged\", void 0);\r\n__decorate([\r\n    Input('sortdata'),\r\n    __metadata(\"design:type\", SortDescriptor),\r\n    __metadata(\"design:paramtypes\", [SortDescriptor])\r\n], NgGridCommon.prototype, \"ApplySort\", null);\n\n/**\r\n * Erzeugt ein Boolean\r\n * @param value\r\n */\r\nfunction convertToBoolean$1(value) {\r\n    if (value === null || value === undefined || typeof value === 'boolean') {\r\n        return value;\r\n    }\r\n    return value.toString() === 'true';\r\n}\r\n/**\r\n * Erzeugt ein Number\r\n * @param value\r\n */\r\nfunction convertToNumber$1(value) {\r\n    if (value === null || value === undefined || typeof value === 'number') {\r\n        return value;\r\n    }\r\n    return parseFloat(value.toString());\r\n}\r\n/**\r\n * Erzeugt aus einer Map ein Objekt\r\n * @param map Map mit Key und Values. Key ist ein String. Value kann ein Objekt sein.\r\n */\r\nfunction mapToObject$1(map) {\r\n    const obj = {};\r\n    map.forEach((v, k) => {\r\n        obj[k] = v;\r\n    });\r\n    return obj;\r\n}\n\n/**\r\n * Base Komponente für GridColumn\r\n */\r\nclass NgGridColumnBaseCommon {\r\n    /**\r\n     * Konstruktor\r\n     */\r\n    constructor(grid, el) {\r\n        this.grid = grid;\r\n        this.el = el;\r\n    }\r\n    //#endregion\r\n    //#region Interface Implementations\r\n    /**\r\n    * lifecycle hook - OnInit. Wird aufgeruren sobald das Komponent initialisiert ist.\r\n    */\r\n    ngOnInit() {\r\n        const rootElement = this.el.nativeElement;\r\n        const parentElement = rootElement.parentElement;\r\n        while (rootElement.firstChild) {\r\n            parentElement.insertBefore(rootElement.firstChild, rootElement);\r\n        }\r\n        parentElement.removeChild(rootElement);\r\n        if (this.IsHeader()) {\r\n            this.grid.RegisterColumn();\r\n        }\r\n    }\r\n    /**\r\n     * lifecycle hook - ngOnDestroy. Wird aufgeruren wenn das Component zerstört wird.\r\n     */\r\n    ngOnDestroy() {\r\n        if (this.IsHeader()) {\r\n            this.grid.UnregisterColumn();\r\n        }\r\n    }\r\n    //#endregion\r\n    //#region Type Handling\r\n    /**\r\n     * die Methode ergibt boolean Wert, ob das Element Header ist.\r\n     */\r\n    IsHeader() {\r\n        return this.type === 'header';\r\n    }\r\n    /**\r\n     * die Methode ergibt boolean Wert, ob das Element Body ist.\r\n     */\r\n    IsBody() {\r\n        return this.type === 'body';\r\n    }\r\n    /**\r\n     * die Methode ergibt boolean Wert, ob das Element Footer ist.\r\n     */\r\n    IsFooter() {\r\n        return this.type === 'footer';\r\n    }\r\n    //#endregion\r\n    /**\r\n     * Die Methode deffiniert wie das Grid sortiert wird, abhängig von gekligte Column\r\n     */\r\n    SortByColumn() {\r\n        if (this.SortKey !== undefined && this.SortKey !== null && this.SortKey !== '') {\r\n            return this.grid.SortBy(this.SortKey);\r\n        }\r\n    }\r\n    /**\r\n     * die Methode ergibt boolean Wert und definiert, ob das Column für Sortierung aktiviert ist, gemäß eingegebene sortKey\r\n     */\r\n    IsSortedColumn() {\r\n        return this.grid.GetSortColumn() === this.SortKey;\r\n    }\r\n    /**\r\n     * Die methode definiert die Dortirung Richtung. Die Werte sind: none, asc, desc.\r\n     */\r\n    GetSortDirection() {\r\n        switch (this.grid.GetSortDirection()) {\r\n            case SortOrder.None:\r\n                return 'none';\r\n            case SortOrder.Ascending:\r\n                return 'asc';\r\n            case SortOrder.Descending:\r\n                return 'desc';\r\n            default:\r\n                return 'none';\r\n        }\r\n    }\r\n}\r\n__decorate([\r\n    Input('name'),\r\n    __metadata(\"design:type\", Object)\r\n], NgGridColumnBaseCommon.prototype, \"name\", void 0);\r\n__decorate([\r\n    Input('value'),\r\n    __metadata(\"design:type\", Object)\r\n], NgGridColumnBaseCommon.prototype, \"value\", void 0);\r\n__decorate([\r\n    Input('header'),\r\n    __metadata(\"design:type\", String)\r\n], NgGridColumnBaseCommon.prototype, \"header\", void 0);\r\n__decorate([\r\n    Input('width'),\r\n    __metadata(\"design:type\", String)\r\n], NgGridColumnBaseCommon.prototype, \"width\", void 0);\r\n__decorate([\r\n    Input('type'),\r\n    __metadata(\"design:type\", String)\r\n], NgGridColumnBaseCommon.prototype, \"type\", void 0);\r\n__decorate([\r\n    Input('sortkey'),\r\n    __metadata(\"design:type\", String)\r\n], NgGridColumnBaseCommon.prototype, \"SortKey\", void 0);\n\n/**\r\n * Komponente für NgGridColumnCommon. Extends NgGridColumnBaseCommon\r\n */\r\nclass NgGridColumnCommon extends NgGridColumnBaseCommon {\r\n    /**\r\n     * Konstruktor\r\n     */\r\n    constructor(grid, el) {\r\n        super(grid, el);\r\n        /**\r\n        * Das Property enthielt boolean Wert für die CSS Klasse ellipsis. Default is false.\r\n        */\r\n        this._ellipsis = false;\r\n    }\r\n    /**\r\n     * Input Parameter für das css Class ellipsis. Das Setter setzt das boolean Wert auf das private property _ellipsis\r\n     */\r\n    set ellipsis(v) {\r\n        this._ellipsis = convertToBoolean$1(v);\r\n    }\r\n    /**\r\n     * Getter für das private property _ellipsis. Ergibt das boolean Wert des Property\r\n     */\r\n    get ellipsis() {\r\n        return this._ellipsis;\r\n    }\r\n    /**\r\n     * Die Methode returns das Wert des Property _ellipsis\r\n     */\r\n    IsEllipsis() {\r\n        return this._ellipsis;\r\n    }\r\n}\r\n__decorate([\r\n    Input('ellipsis'),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], NgGridColumnCommon.prototype, \"ellipsis\", null);\n\n/**\r\n * Komponente für NgGridColumnActionCommon. Extends NgGridColumnBaseCommon\r\n */\r\nclass NgGridColumnActionCommon extends NgGridColumnBaseCommon {\r\n    /**\r\n    * Konstruktor\r\n    * @param el Element Referenz\r\n    * @param grid NgGridCommon\r\n    */\r\n    constructor(grid, el) {\r\n        super(grid, el);\r\n    }\r\n}\n\n/**\r\n * Basiskomponente für Paging\r\n */\r\nclass NgPagingCommon {\r\n    /**\r\n     * Konstruktor\r\n     */\r\n    constructor() {\r\n        /**\r\n         * Item für jedes Paging Element (Seitenzahl)\r\n         */\r\n        this.paginators = [];\r\n        /**\r\n         * Aktiver Seitenindex\r\n         */\r\n        this.activePageIndex = 0;\r\n        /**\r\n         * Erster Seitenindex\r\n         */\r\n        this.firstPageIndex = 0;\r\n        /**\r\n         * Letzter Seitenindex\r\n         */\r\n        this.lastPageIndex = 0;\r\n        /**\r\n         * Total Anzahl Rows\r\n         */\r\n        this.totalRowCount = 0;\r\n        /**\r\n         * Anzahl Rows pro Seite\r\n         */\r\n        this.pageSize = 20;\r\n        /**\r\n         * Text in Pager für 'Seite x von y'.\r\n         * Folgende Interpolation Texte sind vorhanden:\r\n         * {{CURRENTPAGE}}: Aktuelle Seite\r\n         * {{TOTALPAGES}}: Anzahl Seiten\r\n         */\r\n        this.pagingText = 'Seite {{CURRENTPAGE}} von {{TOTALPAGES}}';\r\n        /**\r\n         * Text in Page für Anzahl Seitenelemente pro Seite\r\n         * Folgende Interpolation Texte sind vorhanden:\r\n         * {{PAGESIZE}}: Anzahl Elemente pro Seite\r\n         */\r\n        this.pageSizeText = 'Einträge pro Seite {{PAGESIZE}}';\r\n        /**\r\n         * Event wenn im Grid die Seite geändert wird. Als Parameter wird der neue PageIndex mitgegeben.\r\n         */\r\n        this._pagingEvent = new EventEmitter();\r\n        /**\r\n         * Event wenn im Pager die PageSize geändert wird\r\n         */\r\n        this._pagesizeChangedEvent = new EventEmitter();\r\n    }\r\n    //#region Input and Outputs\r\n    /**\r\n     * Property für Pager Data\r\n     */\r\n    set PagerData(p) {\r\n        if (p != null) {\r\n            this.totalRowCount = p.TotalRowCount;\r\n            this.activePageIndex = p.CurrentPageIndex;\r\n            this.pageSize = p.PageSize;\r\n            this.pagedata = p;\r\n        }\r\n        this.createPager();\r\n    }\r\n    /**\r\n     * Getter für pagesize. returns String\r\n     */\r\n    GetPageSizeText() {\r\n        const interpolation = new Interpolation();\r\n        const data = {\r\n            PAGESIZE: this.getPageSize()\r\n        };\r\n        return interpolation.interpolateString(this.pageSizeText, data);\r\n    }\r\n    /**\r\n     * Die Methode erstellt den Text, der auf den Pager renderierrt wird. Current page und TotalPage\r\n     */\r\n    GetPagingText() {\r\n        const interpolation = new Interpolation();\r\n        const data = {\r\n            CURRENTPAGE: this.getCurrentPageNumber(),\r\n            TOTALPAGES: this.getTotalPageNumber()\r\n        };\r\n        return interpolation.interpolateString(this.pagingText, data);\r\n    }\r\n    /**\r\n     * Ändert die Seitegrösse\r\n     * @param newSize: Neue Page Size\r\n     */\r\n    changePageSize(newSize) {\r\n        this.pageSize = newSize;\r\n        // Parent Controls über neue Page Size informieren\r\n        this._pagesizeChangedEvent.emit(newSize);\r\n    }\r\n    //#endregion\r\n    //#region Protected Methods\r\n    /**\r\n     * Erzeugt die Pager Daten\r\n     */\r\n    createPager() {\r\n        this.paginators = [];\r\n        if (this.totalRowCount > 0) {\r\n            let totalPageCount = Math.ceil(this.totalRowCount / this.pageSize);\r\n            // PageCount auf 1 stellen, wenn keine Records vorhanden sind.\r\n            if (totalPageCount === 0) {\r\n                totalPageCount = 1;\r\n            }\r\n            // PageIndex berechnen\r\n            this.lastPageIndex = totalPageCount - 1;\r\n            const startPageIndex = this.getStartPageIndex(totalPageCount);\r\n            const endPageIndex = this.getEndPageIndex(totalPageCount);\r\n            for (let i = startPageIndex; i <= endPageIndex; i++) {\r\n                this.paginators.push(i);\r\n            }\r\n        }\r\n        else {\r\n            this.paginators.push(0);\r\n        }\r\n    }\r\n    /**\r\n     * Methode löst den Event aus, dass ein Paging stattgefunden hat\r\n     */\r\n    paged(newPageIndex) {\r\n        const pagerData = new PagerData(this.pagedata.PageSize, newPageIndex, this.pagedata.TotalRowCount);\r\n        this._pagingEvent.emit(pagerData);\r\n    }\r\n    /**\r\n     * Gibt den Start Index zurück\r\n     * @param totalPageCount Total Anzahl Seiten\r\n     */\r\n    getStartPageIndex(totalPageCount) {\r\n        let startingPageToDisplay = 0;\r\n        startingPageToDisplay = this.activePageIndex - 2;\r\n        if ((totalPageCount - this.activePageIndex - 1) < 2) {\r\n            startingPageToDisplay = totalPageCount - 5;\r\n        }\r\n        if (startingPageToDisplay < 0) {\r\n            startingPageToDisplay = 0;\r\n        }\r\n        return startingPageToDisplay;\r\n    }\r\n    /**\r\n     * Gibt den letzten Seitenindex zurück.\r\n     * @param totalPageCount Total Anzahl Seiten\r\n     */\r\n    getEndPageIndex(totalPageCount) {\r\n        let endingPageToDisplay = this.activePageIndex + 2;\r\n        const maxEndingPageIndex = (4 > (totalPageCount - 1)) ? (totalPageCount - 1) : 4;\r\n        if (endingPageToDisplay > totalPageCount - 1) {\r\n            endingPageToDisplay = totalPageCount - 1;\r\n        }\r\n        else if (this.activePageIndex < 2) {\r\n            endingPageToDisplay = maxEndingPageIndex;\r\n        }\r\n        return endingPageToDisplay;\r\n    }\r\n    //#endregion\r\n    //#region Public Methods\r\n    /**\r\n     * Andert die Seite auf den neuen Index\r\n     * @param newPageIndex Seiten Index. Dies entspricht der Seitenzahl - 1.\r\n     */\r\n    changePage(newPageIndex) {\r\n        if (this.activePageIndex !== newPageIndex) {\r\n            this.paged(newPageIndex);\r\n        }\r\n    }\r\n    /**\r\n     * Paging auf nächste Seite\r\n     */\r\n    nextPage() {\r\n        if (this.activePageIndex !== this.lastPageIndex) {\r\n            this.paged(this.activePageIndex + 1);\r\n        }\r\n    }\r\n    /**\r\n     * Paging eine Seite zurück\r\n     */\r\n    previousPage() {\r\n        if (this.activePageIndex !== this.firstPageIndex) {\r\n            this.paged(this.activePageIndex - 1);\r\n        }\r\n    }\r\n    /**\r\n     * Paging auf 1. Seite\r\n     */\r\n    firstPage() {\r\n        if (this.activePageIndex !== this.firstPageIndex) {\r\n            this.paged(0);\r\n        }\r\n    }\r\n    /**\r\n     * Paging auf letzter Seite\r\n     */\r\n    lastPage() {\r\n        if (this.activePageIndex !== this.lastPageIndex) {\r\n            this.paged(this.lastPageIndex);\r\n        }\r\n    }\r\n    /**\r\n     * Gibt die aktuelle Seitenzahl zurück\r\n     */\r\n    getCurrentPageNumber() {\r\n        return this.activePageIndex + 1;\r\n    }\r\n    /**\r\n     * Gibt die totale Anzahl Seiten zurück\r\n     */\r\n    getTotalPageNumber() {\r\n        return this.lastPageIndex + 1;\r\n    }\r\n    /**\r\n     * Gibt die aktuelle Pager Size zurück\r\n     */\r\n    getPageSize() {\r\n        return this.pageSize;\r\n    }\r\n}\r\n__decorate([\r\n    Input('pagerdata'),\r\n    __metadata(\"design:type\", PagerData),\r\n    __metadata(\"design:paramtypes\", [PagerData])\r\n], NgPagingCommon.prototype, \"PagerData\", null);\r\n__decorate([\r\n    Input('pagingtext'),\r\n    __metadata(\"design:type\", String)\r\n], NgPagingCommon.prototype, \"pagingText\", void 0);\r\n__decorate([\r\n    Input('pagesizetext'),\r\n    __metadata(\"design:type\", String)\r\n], NgPagingCommon.prototype, \"pageSizeText\", void 0);\r\n__decorate([\r\n    Input('name'),\r\n    __metadata(\"design:type\", String)\r\n], NgPagingCommon.prototype, \"name\", void 0);\r\n__decorate([\r\n    Output('onpaging'),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], NgPagingCommon.prototype, \"_pagingEvent\", void 0);\r\n__decorate([\r\n    Output('onpagesizechanged'),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], NgPagingCommon.prototype, \"_pagesizeChangedEvent\", void 0);\n\n/**\r\n * Base Grid Action Button\r\n */\r\nclass NgGridButtonCommon {\r\n    constructor() {\r\n        /**\r\n         * Input Property für Styling des Buttons. Deffiniert die Css Klassen des Buttons\r\n         */\r\n        this.iconstyle = '';\r\n        /**\r\n         * Button ist deaktiviert\r\n         */\r\n        this._isdisabledvalue = false;\r\n        /**\r\n        * Event wenn auf den Button geklickt wird\r\n        */\r\n        this.clickaction = new EventEmitter();\r\n    }\r\n    /**\r\n     * Deaktivieren von Buttons\r\n     * @param v Deaktiviert den Button\r\n     * @return Definiert ob der Button deaktiviert ist\r\n     */\r\n    set isdisabled(v) {\r\n        if (v === null || v === undefined || typeof v === 'boolean') {\r\n            this._isdisabledvalue = v;\r\n        }\r\n        else {\r\n            this._isdisabledvalue = v === 'true';\r\n        }\r\n    }\r\n    get isdisabled() {\r\n        return this._isdisabledvalue;\r\n    }\r\n    /**\r\n     * Die Methode wird das cklickaction Emitter aktivieren\r\n     */\r\n    callaction() {\r\n        if (!this._isdisabledvalue) {\r\n            this.clickaction.emit(this.iconstyle);\r\n        }\r\n    }\r\n}\r\n__decorate([\r\n    Input('iconstyle'),\r\n    __metadata(\"design:type\", String)\r\n], NgGridButtonCommon.prototype, \"iconstyle\", void 0);\r\n__decorate([\r\n    Input('icon'),\r\n    __metadata(\"design:type\", String)\r\n], NgGridButtonCommon.prototype, \"icon\", void 0);\r\n__decorate([\r\n    Input('isdisabled'),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], NgGridButtonCommon.prototype, \"isdisabled\", null);\r\n__decorate([\r\n    Output('onclick'),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], NgGridButtonCommon.prototype, \"clickaction\", void 0);\n\n/**\r\n * Basis Komponente für NgGridImage\r\n */\r\nclass NgGridImageCommon {\r\n}\r\n__decorate([\r\n    Input('iconstyle'),\r\n    __metadata(\"design:type\", String)\r\n], NgGridImageCommon.prototype, \"iconstyle\", void 0);\n\n/**\r\n * Moment\r\n */\r\nconst moment$1 = moment_;\r\n/**\r\n * Injectable directive\r\n */\r\nlet NgBaseDateTimeControl = class NgBaseDateTimeControl extends NgBaseModelControl {\r\n    // #region Constructor\r\n    /**\r\n     * Konstruktor\r\n     * @param parent typ NgFormularCommon\r\n     * @param injector typ Injector\r\n     * @param _elementRef typ ElementRef\r\n     */\r\n    constructor(parent, injector, _elementRef) {\r\n        super(parent, injector);\r\n        this._elementRef = _elementRef;\r\n        // #endregion\r\n        //#region Abstract Methods\r\n        /**\r\n         * das property enthielt das Value als string. Default ist ''\r\n         */\r\n        this._valueAsString = '';\r\n        /**\r\n         * Definiert das Control als Required\r\n         */\r\n        this._isrequired = false;\r\n        /**\r\n         * TextBox Placeholder\r\n         */\r\n        this._placeholder = null;\r\n        /**\r\n         * Resource Key für Validation Message Required bei Control\r\n         */\r\n        this._validationMessageRequired = 'VALIDATION_ERROR_REQUIRED';\r\n        /**\r\n         * Resource Key für Validation Message Required in Validation Summary\r\n         */\r\n        this._validationMessageRequiredSummary = 'VALIDATION_ERROR_SUMMARY_REQUIRED';\r\n        /**\r\n         * Resource Key für Validation Message DateTimeFormat bei Control\r\n         */\r\n        this._validationMessageDateTimeFormat = 'VALIDATION_ERROR_DATETIMEFORMAT';\r\n        /**\r\n         * Resource Key für Validation Message DateTimeFormat in Validation Summary\r\n         */\r\n        this._validationMessageDateTimeFormatSummary = 'VALIDATION_ERROR_SUMMARY_DATETIMEFORMAT';\r\n    }\r\n    //#endregion\r\n    //#region Variablen\r\n    //#endregion\r\n    // #region Properties\r\n    //#endregion\r\n    //#region ValueControlAccess\r\n    /**\r\n     * Overwrite WriteValue to Set correct Date Object\r\n     */\r\n    writeValue(value) {\r\n        if (value === '' || value === null || value === undefined) {\r\n            this._value = null;\r\n        }\r\n        else {\r\n            this._value = this.getDate(value).toDate();\r\n        }\r\n        super.writeValue(this._value);\r\n    }\r\n    /**\r\n    * JSON Date String in ein UTC DateTime Object konvertieren, welches vom Control verwendete werden kann\r\n    */\r\n    getDate(timestamp) {\r\n        const date = new Date(timestamp);\r\n        const year = date.getUTCFullYear();\r\n        const month = date.getUTCMonth();\r\n        const day = date.getUTCDate();\r\n        const hours = date.getUTCHours();\r\n        const minutes = date.getUTCMinutes();\r\n        const seconds = date.getUTCSeconds();\r\n        return moment$1(Date.UTC(year, month, day, hours, minutes, seconds));\r\n    }\r\n    //#endregion\r\n    // #region Value as String\r\n    /**\r\n     * Das Input bekommt das value von typ string\r\n     */\r\n    set valuestring(v) {\r\n        this._valueAsString = v;\r\n        let date = moment$1(v, [this.GetDateTimeFormatString()], true);\r\n        date = this.ModifyParsedDateTimeValue(date).utc();\r\n        if (date.isValid()) {\r\n            this.value = date.toDate();\r\n        }\r\n        else {\r\n            this.value = null;\r\n        }\r\n    }\r\n    /**\r\n     * getter für valuestring\r\n     */\r\n    get valuestring() {\r\n        if (this.value === null) {\r\n            return this._valueAsString;\r\n        }\r\n        else {\r\n            const date = moment$1.utc(this.value);\r\n            return date.local().format(this.GetDateTimeFormatString());\r\n        }\r\n    }\r\n    /**\r\n     * setzt das value von typ string zu property valuestring\r\n     */\r\n    setValueString(v) {\r\n        this.valuestring = v;\r\n    }\r\n    // #endregion\r\n    //#region Validation\r\n    /**\r\n     * prüft ob das Date ist valid\r\n     */\r\n    IsDateValid() {\r\n        // NULL ist gültig\r\n        if (this._valueAsString === null || this._valueAsString === undefined || this._valueAsString === '') {\r\n            return true;\r\n        }\r\n        let date = moment$1(this.valuestring, [this.GetDateTimeFormatString()], true);\r\n        date = this.ModifyParsedDateTimeValue(date).utc();\r\n        return date.isValid();\r\n    }\r\n    /**\r\n     * Validator\r\n     */\r\n    validateData(c) {\r\n        let error = null;\r\n        error = Validation.isValidDate(this, this._label, this._validationMessageDateTimeFormat, this._validationMessageDateTimeFormatSummary);\r\n        if (this._isrequired) {\r\n            error = Validation.required(c, this._label, this._validationMessageRequired, this._validationMessageRequiredSummary);\r\n        }\r\n        return error;\r\n    }\r\n};\r\nNgBaseDateTimeControl.ctorParameters = () => [\r\n    { type: NgFormularCommon },\r\n    { type: Injector },\r\n    { type: ElementRef }\r\n];\r\n__decorate([\r\n    Input('isrequired'),\r\n    __metadata(\"design:type\", Boolean)\r\n], NgBaseDateTimeControl.prototype, \"_isrequired\", void 0);\r\n__decorate([\r\n    Input('placeholder'),\r\n    __metadata(\"design:type\", String)\r\n], NgBaseDateTimeControl.prototype, \"_placeholder\", void 0);\r\n__decorate([\r\n    Input('validationmessagerequired'),\r\n    __metadata(\"design:type\", String)\r\n], NgBaseDateTimeControl.prototype, \"_validationMessageRequired\", void 0);\r\n__decorate([\r\n    Input('validationmessagesummaryrequired'),\r\n    __metadata(\"design:type\", String)\r\n], NgBaseDateTimeControl.prototype, \"_validationMessageRequiredSummary\", void 0);\r\n__decorate([\r\n    Input('validationmessagedatetimeformat'),\r\n    __metadata(\"design:type\", String)\r\n], NgBaseDateTimeControl.prototype, \"_validationMessageDateTimeFormat\", void 0);\r\n__decorate([\r\n    Input('validationmessagesummarydatetimeformat'),\r\n    __metadata(\"design:type\", String)\r\n], NgBaseDateTimeControl.prototype, \"_validationMessageDateTimeFormatSummary\", void 0);\r\n__decorate([\r\n    Input('valuestring'),\r\n    __metadata(\"design:type\", String),\r\n    __metadata(\"design:paramtypes\", [String])\r\n], NgBaseDateTimeControl.prototype, \"valuestring\", null);\r\nNgBaseDateTimeControl = __decorate([\r\n    Injectable(),\r\n    __metadata(\"design:paramtypes\", [NgFormularCommon, Injector, ElementRef])\r\n], NgBaseDateTimeControl);\n\n/**\r\n * Moment\r\n */\r\nconst moment$2 = moment_;\r\n/**\r\n * Komponente für NgDateCommon. Extends NgBaseDateTimeControl\r\n */\r\nclass NgDateCommon extends NgBaseDateTimeControl {\r\n    // #endregion\r\n    /**\r\n     * Konstruktor\r\n     * @param parent typ NgFormularCommon\r\n     * @param injector typ Injector\r\n     * @param _elementRef typ ElementRef\r\n     */\r\n    constructor(parent, injector, _elementRef) {\r\n        super(parent, injector, _elementRef);\r\n        this._elementRef = _elementRef;\r\n        // #region Constants\r\n        /**\r\n         * Format des Datums\r\n         */\r\n        this.DATEFORMAT = 'DD.MM.YYYY';\r\n        /**\r\n         * Maske\r\n         */\r\n        this._mask = { mask: [/\\d/, /\\d/, '.', /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, /\\d/], guide: true, placeholderChar: '_', keepCharPositions: true };\r\n        /**\r\n         * Min Date\r\n         */\r\n        this._mindate = null;\r\n        /**\r\n         * Min Date\r\n         */\r\n        this._maxdate = null;\r\n        /**\r\n         * Definiert ob der Date Selector angezeigt wird\r\n         */\r\n        this._showselector = false;\r\n        /**\r\n         * Resource Key für Validation Message MinDate bei Control\r\n         */\r\n        this._validationMessageMinDate = 'VALIDATION_ERROR_MINDATE';\r\n        /**\r\n         * Resource Key für Validation Message MinDate in Validation Summary\r\n         */\r\n        this._validationMessageMinDateSummary = 'VALIDATION_ERROR_SUMMARY_MINDATE';\r\n        /**\r\n         * Resource Key für Validation Message MaxDate bei Control\r\n         */\r\n        this._validationMessageMaxDate = 'VALIDATION_ERROR_MAXDATE';\r\n        /**\r\n         * Resource Key für Validation Message MaxDate in Validation Summary\r\n         */\r\n        this._validationMessageMaxDateSummary = 'VALIDATION_ERROR_SUMMARY_MAXDATE';\r\n    }\r\n    // #endregion\r\n    // #region Properties\r\n    /**\r\n     * Min Date\r\n     */\r\n    set mindate(v) {\r\n        const date = moment$2(v, [this.DATEFORMAT], true);\r\n        if (date.isValid()) {\r\n            this._mindate = super.getDate(date).toDate();\r\n        }\r\n        else {\r\n            this._mindate = null;\r\n        }\r\n    }\r\n    /**\r\n     * Min Date\r\n     */\r\n    set maxdate(v) {\r\n        const date = moment$2(v, [this.DATEFORMAT], true);\r\n        if (date.isValid()) {\r\n            this._maxdate = super.getDate(date).toDate();\r\n        }\r\n        else {\r\n            this._maxdate = null;\r\n        }\r\n    }\r\n    // #region Abstract Methods\r\n    /**\r\n     * Methode ergibt Datum-Format vom String\r\n     */\r\n    GetDateTimeFormatString() {\r\n        return this.DATEFORMAT;\r\n    }\r\n    /**\r\n     * Methode ergibt Datum - Moment\r\n     */\r\n    ModifyParsedDateTimeValue(v) {\r\n        return v;\r\n    }\r\n    // #endregion\r\n    // #region Date Selector\r\n    /**\r\n     * Zeigt Date Selector an\r\n     */\r\n    showDateSelector() {\r\n        // Touch Event auslösen\r\n        this.onTouch();\r\n        if (this._showselector) {\r\n            this._showselector = false;\r\n        }\r\n        else {\r\n            this._showselector = true;\r\n        }\r\n    }\r\n    /**\r\n     * HostListener\r\n     */\r\n    onClick(targetElement) {\r\n        const clickedInside = this._elementRef.nativeElement.contains(targetElement);\r\n        if (!clickedInside) {\r\n            this._showselector = false;\r\n        }\r\n    }\r\n    /**\r\n     * Date Selector\r\n     */\r\n    dateselect(v) {\r\n        if (v.date === null) {\r\n            this.setValueString('');\r\n        }\r\n        else {\r\n            this.value = moment$2(v.date).utc().toDate();\r\n        }\r\n        this._showselector = false;\r\n    }\r\n    // #endregion\r\n    /**\r\n     * Validator\r\n     */\r\n    validateData(c) {\r\n        let error = null;\r\n        error = super.validateData(c);\r\n        if (error === null && c.value !== null && c.value !== undefined && c.value !== '' && this._mindate !== undefined && this._mindate !== null) {\r\n            error = Validation.minDate(this, this._mindate, this._label, this._validationMessageMinDate, this._validationMessageMinDateSummary);\r\n        }\r\n        if (error === null && c.value !== null && c.value !== undefined && c.value !== '' && this._maxdate !== undefined && this._maxdate !== null) {\r\n            error = Validation.maxDate(this, this._maxdate, this._label, this._validationMessageMaxDate, this._validationMessageMaxDateSummary);\r\n        }\r\n        return error;\r\n    }\r\n}\r\n__decorate([\r\n    Input('mindate'),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], NgDateCommon.prototype, \"mindate\", null);\r\n__decorate([\r\n    Input('maxdate'),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], NgDateCommon.prototype, \"maxdate\", null);\r\n__decorate([\r\n    Input('validationmessagemindate'),\r\n    __metadata(\"design:type\", String)\r\n], NgDateCommon.prototype, \"_validationMessageMinDate\", void 0);\r\n__decorate([\r\n    Input('validationmessagesummarymindate'),\r\n    __metadata(\"design:type\", String)\r\n], NgDateCommon.prototype, \"_validationMessageMinDateSummary\", void 0);\r\n__decorate([\r\n    Input('validationmessagemaxdate'),\r\n    __metadata(\"design:type\", String)\r\n], NgDateCommon.prototype, \"_validationMessageMaxDate\", void 0);\r\n__decorate([\r\n    Input('validationmessagesummarymaxdate'),\r\n    __metadata(\"design:type\", String)\r\n], NgDateCommon.prototype, \"_validationMessageMaxDateSummary\", void 0);\r\n__decorate([\r\n    HostListener('document:click', ['$event.target']),\r\n    __metadata(\"design:type\", Function),\r\n    __metadata(\"design:paramtypes\", [Object]),\r\n    __metadata(\"design:returntype\", void 0)\r\n], NgDateCommon.prototype, \"onClick\", null);\n\n/**\r\n * Moment\r\n */\r\nconst moment$3 = moment_;\r\n// #region Helper Classes\r\n/**\r\n *Basis Komponente für DateSelectorItem\r\n */\r\nclass DateSelectorItem {\r\n    /**\r\n     * Konstruktor\r\n     * @param displaytext Anzeigetext\r\n     * @param date Datum\r\n     * @param isenabled Element ist aktiv\r\n     * @param isselected Element ist selektiert\r\n     * @param iscurrent Element ist aktuelles Element\r\n     * @param isnew Element ist neu\r\n     */\r\n    constructor(displaytext, date, isenabled, isselected, iscurrent, isnew) {\r\n        /**\r\n         * DisplayText Property; default Wert - ''\r\n         */\r\n        this.displaytext = '';\r\n        /**\r\n         * Datum\r\n         */\r\n        this.date = undefined;\r\n        /**\r\n         * Boolean Property, die zeigt, ob das Control enabled ist; default Wert - false\r\n         */\r\n        this.isenabled = false;\r\n        /**\r\n         * Boolean Property, die zeigt, ob das Element aktuell ist; default Wert - false\r\n         */\r\n        this.iscurrent = false;\r\n        /**\r\n         * Boolean Property, die zeigt, ob das Element selektiert ist; default Wert - false\r\n         */\r\n        this.isselected = false;\r\n        /**\r\n         * Boolean Property, die zeigt, ob das Element neu ist; default Wert - false\r\n         */\r\n        this.isnew = false;\r\n        this.displaytext = displaytext;\r\n        this.date = date;\r\n        this.isenabled = isenabled;\r\n        this.iscurrent = iscurrent;\r\n        this.isselected = isselected;\r\n        this.isnew = isnew;\r\n    }\r\n}\r\n// #endregion\r\n// @Component({\r\n//   selector: 'ngDateSelector',\r\n//   templateUrl: './dateselector.html',\r\n// })\r\n/**\r\n *Basis Komponente für NgDateSelector\r\n */\r\nclass NgDateSelectorCommon {\r\n    constructor() {\r\n        /**\r\n         * Anfang des Kalenders\r\n         */\r\n        this.beginOfCalendar = 1;\r\n        /**\r\n         * Array von Daten\r\n         */\r\n        this.dates = [];\r\n        /**\r\n         * Datum Selector\r\n         */\r\n        this._dateselection = false;\r\n        /**\r\n         * Time Selector\r\n         */\r\n        this._timeselection = false;\r\n        /**\r\n         * Monat\r\n         */\r\n        this._month = 4;\r\n        /**\r\n         * Jahr\r\n         */\r\n        this._year = 2018;\r\n        /**\r\n         * Boolean Property für automatische Selektierung; default Wert - false\r\n         */\r\n        this._autoapplyselection = false;\r\n        /**\r\n         * Output Event beim Datum Selektieren\r\n         */\r\n        this.onSelectDate = new EventEmitter();\r\n        //#endregion\r\n    }\r\n    /**\r\n     * Input für ursprüngliches Datum\r\n     */\r\n    get initialValue() {\r\n        return this._initialValue.toDate();\r\n    }\r\n    set initialValue(v) {\r\n        if (v === null || v === undefined) {\r\n            this._initialValue = null;\r\n        }\r\n        else {\r\n            this._initialValue = moment$3(v);\r\n        }\r\n        this._selectedValue = null;\r\n        if (this._initialValue === null) {\r\n            this.initCalendar(moment$3());\r\n        }\r\n        else {\r\n            this.initCalendar(this._initialValue);\r\n        }\r\n    }\r\n    /**\r\n     * Ursprünglicher Kalender\r\n     */\r\n    initCalendar(v) {\r\n        /**\r\n         * Monat und Jahr setzen\r\n         */\r\n        this._month = v.month();\r\n        this._year = v.year();\r\n        /**\r\n         * Daten für Kalender initialiseren\r\n         */\r\n        this.initDates();\r\n    }\r\n    /**\r\n     * Init Event\r\n     */\r\n    ngOnInit() {\r\n        /**\r\n         * Init Initial Date if Empty\r\n         */\r\n        if (this._initialValue === undefined) {\r\n            this.initialValue = null;\r\n        }\r\n        this.initDates();\r\n    }\r\n    /**\r\n     * Initial Datum\r\n     */\r\n    initDates() {\r\n        const currentMonth = moment$3(new Date(this._year, this._month, 1));\r\n        const lastMonth = moment$3(new Date(this._year, this._month, 1));\r\n        lastMonth.add({ months: -1 });\r\n        const nextMonths = moment$3(new Date(this._year, this._month, 1));\r\n        nextMonths.add({ months: 1 });\r\n        const weekdayBegin = currentMonth.weekday();\r\n        const weekdayEnd = moment$3(new Date(currentMonth.year(), currentMonth.month(), currentMonth.daysInMonth())).weekday();\r\n        // Clear Array\r\n        const daysInCalendar = [];\r\n        this.dates = [];\r\n        if (weekdayBegin !== this.beginOfCalendar) {\r\n            const lastMonthDay = lastMonth.daysInMonth();\r\n            const lastMonthDate = new Date(lastMonth.year(), lastMonth.month(), lastMonthDay);\r\n            const lastMonthWeekday = moment$3(lastMonthDate).weekday();\r\n            let daysInLastMonth = 7 - (((7 + this.beginOfCalendar) - lastMonthWeekday) % 7);\r\n            if (daysInLastMonth === 7) {\r\n                daysInLastMonth = 0;\r\n            }\r\n            for (let day = lastMonthDay; day >= lastMonthDay - daysInLastMonth; day--) {\r\n                daysInCalendar.splice(0, 0, new DateSelectorItem(day.toString(), new Date(lastMonth.year(), lastMonth.month(), day), false, false, false, false));\r\n            }\r\n        }\r\n        // Add all Days in Month\r\n        for (let dayinmonth = 1; dayinmonth <= currentMonth.daysInMonth(); dayinmonth++) {\r\n            let isSelectedDate = false;\r\n            let isNewDate = false;\r\n            const isCurrentDate = moment$3().month() === this._month && moment$3().year() === this._year && moment$3().date() === dayinmonth;\r\n            // Initial Wert setzen, falls vorhanden\r\n            if (this._initialValue !== null) {\r\n                isSelectedDate = this._initialValue.month() === this._month && this._initialValue.year() === this._year && this._initialValue.date() === dayinmonth;\r\n            }\r\n            // Selected Date Wert setzen, falls Wert gesetzt\r\n            if (this._selectedValue !== null) {\r\n                isNewDate = this._selectedValue.month() === this._month && this._selectedValue.year() === this._year && this._selectedValue.date() === dayinmonth;\r\n            }\r\n            daysInCalendar.push(new DateSelectorItem(dayinmonth.toString(), moment$3([this._year, this._month, dayinmonth]).toDate(), true, isSelectedDate, isCurrentDate, isNewDate));\r\n        }\r\n        let endOfCalender;\r\n        if (this.beginOfCalendar === 0) {\r\n            endOfCalender = 6;\r\n        }\r\n        else {\r\n            endOfCalender = 0;\r\n        }\r\n        if (weekdayEnd !== endOfCalender) {\r\n            let countMissingDays;\r\n            if (this.beginOfCalendar === 0) {\r\n                countMissingDays = endOfCalender - weekdayEnd;\r\n            }\r\n            else {\r\n                countMissingDays = 7 - weekdayEnd;\r\n            }\r\n            for (let i = 1; i <= countMissingDays; i++) {\r\n                daysInCalendar.push(new DateSelectorItem(i.toString(), new Date(nextMonths.year(), nextMonths.month(), i), false, false, false, false));\r\n            }\r\n        }\r\n        for (let index = 0; index < daysInCalendar.length / 7; index++) {\r\n            for (let day = 0; day < 7; day++) {\r\n                if (day === 0) {\r\n                    this.dates[index] = [];\r\n                }\r\n                this.dates[index].push(daysInCalendar[(index * 7) + day]);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Modus ändern\r\n     */\r\n    changeMode() {\r\n        if (this.beginOfCalendar === 0) {\r\n            this.beginOfCalendar = 1;\r\n        }\r\n        else {\r\n            this.beginOfCalendar = 0;\r\n        }\r\n        this.initDates();\r\n    }\r\n    /**\r\n     * Vorheriger Monat\r\n     */\r\n    monthBack() {\r\n        this._month = this._month - 1;\r\n        if (this._month < 0) {\r\n            this._month = 11;\r\n            this._year = this._year - 1;\r\n        }\r\n        this.initDates();\r\n    }\r\n    /**\r\n     * Nächster Monat\r\n     */\r\n    monthNext() {\r\n        this._month = this._month + 1;\r\n        if (this._month > 11) {\r\n            this._month = 0;\r\n            this._year = this._year + 1;\r\n        }\r\n        this.initDates();\r\n    }\r\n    /**\r\n     * Methode ergibt das selektierte Datum\r\n     */\r\n    selectDate(v) {\r\n        if (v.isenabled) {\r\n            this.dates.forEach(date => date.filter(filter => filter.isnew).forEach(itm => itm.isnew = false));\r\n            this.dates.forEach(date => date.filter(filter => filter.isselected).forEach(itm => itm.isselected = false));\r\n            v.isnew = true;\r\n            v.isselected = true;\r\n            const dateValue = moment$3(v.date);\r\n            // Übernehmen der Zeit aus dem bestehenden Wert\r\n            if (this._selectedValue === null) {\r\n                if (this._initialValue !== null) {\r\n                    dateValue.hour(this._initialValue.hour());\r\n                    dateValue.minute(this._initialValue.minute());\r\n                }\r\n            }\r\n            else {\r\n                dateValue.hour(this._selectedValue.hour());\r\n                dateValue.minute(this._selectedValue.minute());\r\n            }\r\n            // Sekunden un Milisekunden Clean\r\n            dateValue.second(0);\r\n            dateValue.millisecond(0);\r\n            this._selectedValue = dateValue;\r\n            if (this._autoapplyselection) {\r\n                this.applySelection();\r\n            }\r\n        }\r\n    }\r\n    //#region Time Settings\r\n    /**\r\n     * Getter für Stunden Uhrzeit\r\n     */\r\n    getHours() {\r\n        if (this._selectedValue === null) {\r\n            /**\r\n             * Wert aus Init Value lesen\r\n             */\r\n            if (this._initialValue === null) {\r\n                return 0;\r\n            }\r\n            else {\r\n                return this._initialValue.hour();\r\n            }\r\n        }\r\n        else {\r\n            return this._selectedValue.hour();\r\n        }\r\n    }\r\n    /**\r\n     * Setter für Stunden Uhrzeit\r\n     */\r\n    setHours(v) {\r\n        /**\r\n         * Select Value setzen falls leer\r\n         */\r\n        this.initSelectedValue();\r\n        if (v === null) {\r\n            this._selectedValue.hour(0);\r\n        }\r\n        else {\r\n            this._selectedValue.hour(v);\r\n        }\r\n    }\r\n    /**\r\n     * Getter für Minuten Uhrzeit\r\n     */\r\n    getMinutes() {\r\n        if (this._selectedValue === null) {\r\n            /**\r\n             * Wert aus Init Value lesen\r\n             */\r\n            if (this._initialValue === null) {\r\n                return 0;\r\n            }\r\n            else {\r\n                return this._initialValue.minutes();\r\n            }\r\n        }\r\n        else {\r\n            return this._selectedValue.minutes();\r\n        }\r\n    }\r\n    /**\r\n     * Setter für Minuten Uhrzeit\r\n     */\r\n    setMinutes(v) {\r\n        /**\r\n         * Select Value setzen falls leer\r\n         */\r\n        this.initSelectedValue();\r\n        if (v === null) {\r\n            this._selectedValue.minutes(0);\r\n        }\r\n        else {\r\n            this._selectedValue.minutes(v);\r\n        }\r\n    }\r\n    initSelectedValue() {\r\n        /**\r\n         * Select Value setzen falls leer\r\n         */\r\n        if (this._selectedValue === null) {\r\n            if (this._initialValue === null) {\r\n                this._selectedValue = moment$3();\r\n            }\r\n            else {\r\n                this._selectedValue = this._initialValue;\r\n            }\r\n        }\r\n    }\r\n    //#endregion\r\n    //#region Button Actions\r\n    /**\r\n     * Auswahl auf aktuelle Zeit stellen\r\n     */\r\n    setToday() {\r\n        this._selectedValue = moment$3();\r\n        /**\r\n         * Sekunden un Milisekunden Clean\r\n         */\r\n        this._selectedValue.second(0);\r\n        this._selectedValue.millisecond(0);\r\n        /**\r\n         * Kalender Daten initialisieren falls Kalender angezeigt\r\n         */\r\n        if (this._dateselection) {\r\n            this.initCalendar(this._selectedValue);\r\n        }\r\n        if (this._autoapplyselection) {\r\n            this.applySelection();\r\n        }\r\n    }\r\n    /**\r\n     * Selektierung übernehmen\r\n     */\r\n    applySelection() {\r\n        if (this._timeselection === false && this._selectedValue !== null) {\r\n            this._selectedValue.hour(0);\r\n            this._selectedValue.minute(0);\r\n            this._selectedValue.second(0);\r\n            this._selectedValue.millisecond(0);\r\n        }\r\n        if (this._dateselection === false && this._selectedValue !== null) {\r\n            const tempValue = this._selectedValue.local();\r\n            tempValue.date(1);\r\n            tempValue.month(0);\r\n            tempValue.year(1900);\r\n            this._selectedValue = tempValue.utc();\r\n        }\r\n        this.onSelectDate.emit({\r\n            date: this._selectedValue\r\n        });\r\n    }\r\n    /**\r\n     * Selektierung resetten\r\n     */\r\n    resetSelection() {\r\n        this.onSelectDate.emit({\r\n            date: null\r\n        });\r\n    }\r\n}\r\n__decorate([\r\n    Input('dateselection'),\r\n    __metadata(\"design:type\", Boolean)\r\n], NgDateSelectorCommon.prototype, \"_dateselection\", void 0);\r\n__decorate([\r\n    Input('timeselection'),\r\n    __metadata(\"design:type\", Boolean)\r\n], NgDateSelectorCommon.prototype, \"_timeselection\", void 0);\r\n__decorate([\r\n    Input('month'),\r\n    __metadata(\"design:type\", Number)\r\n], NgDateSelectorCommon.prototype, \"_month\", void 0);\r\n__decorate([\r\n    Input('year'),\r\n    __metadata(\"design:type\", Number)\r\n], NgDateSelectorCommon.prototype, \"_year\", void 0);\r\n__decorate([\r\n    Input('autoapplyselection'),\r\n    __metadata(\"design:type\", Object)\r\n], NgDateSelectorCommon.prototype, \"_autoapplyselection\", void 0);\r\n__decorate([\r\n    Input('initialValue'),\r\n    __metadata(\"design:type\", Date),\r\n    __metadata(\"design:paramtypes\", [Date])\r\n], NgDateSelectorCommon.prototype, \"initialValue\", null);\r\n__decorate([\r\n    Output('onSelect'),\r\n    __metadata(\"design:type\", Object)\r\n], NgDateSelectorCommon.prototype, \"onSelectDate\", void 0);\n\n/**\r\n * Moment\r\n */\r\nconst moment$4 = moment_;\r\n/**\r\n * Komponente für NgDateTimeCommon. Extends NgBaseDateTimeControl\r\n */\r\nclass NgDateTimeCommon extends NgBaseDateTimeControl {\r\n    // #endregion\r\n    /**\r\n     * Konstruktor\r\n     * @param parent typ NgFormularCommon\r\n     * @param injector typ Injector\r\n     * @param _elementRef typ ElementRef\r\n     */\r\n    constructor(parent, injector, _elementRef) {\r\n        super(parent, injector, _elementRef);\r\n        this._elementRef = _elementRef;\r\n        // #region Constants\r\n        /**\r\n         * Format des Datums\r\n         */\r\n        this.DATEFORMAT = 'DD.MM.YYYY HH:mm';\r\n        /**\r\n         * Maske\r\n         */\r\n        this._mask = { mask: [/\\d/, /\\d/, '.', /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, /\\d/, ' ', /[0-2]/, /\\d/, ':', /[0-5]/, /\\d/], guide: true, placeholderChar: '_', keepCharPositions: true };\r\n        /**\r\n         * Minimaler Wert des Datums\r\n         */\r\n        this._mindate = null;\r\n        /**\r\n         * Maximaler Wert des Datums\r\n         */\r\n        this._maxdate = null;\r\n        /**\r\n         * Definiert ob der Date Selector angezeigt wird\r\n         */\r\n        this._showselector = false;\r\n        /**\r\n         * Resource Key für Validation Message MinDate bei Control\r\n         */\r\n        this._validationMessageMinDate = 'VALIDATION_ERROR_MINDATE';\r\n        /**\r\n         * Resource Key für Validation Message MinDate in Validation Summary\r\n         */\r\n        this._validationMessageMinDateSummary = 'VALIDATION_ERROR_SUMMARY_MINDATE';\r\n        /**\r\n         * Resource Key für Validation Message MaxDate bei Control\r\n         */\r\n        this._validationMessageMaxDate = 'VALIDATION_ERROR_MAXDATE';\r\n        /**\r\n         * Resource Key für Validation Message MaxDate in Validation Summary\r\n         */\r\n        this._validationMessageMaxDateSummary = 'VALIDATION_ERROR_SUMMARY_MAXDATE';\r\n    }\r\n    // #endregion\r\n    // #region Properties\r\n    /**\r\n     * Min Date\r\n     */\r\n    set mindate(v) {\r\n        const date = moment$4(v, [this.DATEFORMAT], true);\r\n        if (date.isValid()) {\r\n            this._mindate = super.getDate(date).toDate();\r\n        }\r\n        else {\r\n            this._mindate = null;\r\n        }\r\n    }\r\n    /**\r\n     * Max Date\r\n     */\r\n    set maxdate(v) {\r\n        const date = moment$4(v, [this.DATEFORMAT], true);\r\n        if (date.isValid()) {\r\n            this._maxdate = super.getDate(date).toDate();\r\n        }\r\n        else {\r\n            this._maxdate = null;\r\n        }\r\n    }\r\n    // #region Abstract Methods\r\n    /**\r\n     * Methode ergibt Datum-Format vom String\r\n     */\r\n    GetDateTimeFormatString() {\r\n        return this.DATEFORMAT;\r\n    }\r\n    /**\r\n     * Methode modifiziert den parsed Wert des Datums\r\n     */\r\n    ModifyParsedDateTimeValue(v) {\r\n        return v;\r\n    }\r\n    // #endregion\r\n    // #region Date Selector\r\n    /**\r\n     * DateSelector wird beim Click-Event angezeigt\r\n     */\r\n    showDateSelector() {\r\n        /**\r\n         * Touch Event auslösen\r\n         */\r\n        this.onTouch();\r\n        if (this._showselector) {\r\n            this._showselector = false;\r\n        }\r\n        else {\r\n            this._showselector = true;\r\n        }\r\n    }\r\n    /**\r\n     * HostListener\r\n     */\r\n    onClick(targetElement) {\r\n        const clickedInside = this._elementRef.nativeElement.contains(targetElement);\r\n        if (!clickedInside) {\r\n            this._showselector = false;\r\n        }\r\n    }\r\n    /**\r\n     * Methode ergibt das selektierte Datum\r\n     */\r\n    dateselect(v) {\r\n        if (v.date === null) {\r\n            this.setValueString('');\r\n        }\r\n        else {\r\n            this.value = moment$4(v.date).utc().toDate();\r\n        }\r\n        this._showselector = false;\r\n    }\r\n    // #endregion\r\n    /**\r\n     * Validator\r\n     */\r\n    validateData(c) {\r\n        let error = null;\r\n        error = super.validateData(c);\r\n        if (error === null && c.value !== null && c.value !== undefined && c.value !== '' && this._mindate !== undefined && this._mindate !== null) {\r\n            error = Validation.minDate(this, this._mindate, this._label, this._validationMessageMinDate, this._validationMessageMinDateSummary);\r\n        }\r\n        if (error === null && c.value !== null && c.value !== undefined && c.value !== '' && this._maxdate !== undefined && this._maxdate !== null) {\r\n            error = Validation.maxDate(this, this._maxdate, this._label, this._validationMessageMaxDate, this._validationMessageMaxDateSummary);\r\n        }\r\n        return error;\r\n    }\r\n}\r\n__decorate([\r\n    Input('mindate'),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], NgDateTimeCommon.prototype, \"mindate\", null);\r\n__decorate([\r\n    Input('maxdate'),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], NgDateTimeCommon.prototype, \"maxdate\", null);\r\n__decorate([\r\n    Input('validationmessagemindate'),\r\n    __metadata(\"design:type\", String)\r\n], NgDateTimeCommon.prototype, \"_validationMessageMinDate\", void 0);\r\n__decorate([\r\n    Input('validationmessagesummarymindate'),\r\n    __metadata(\"design:type\", String)\r\n], NgDateTimeCommon.prototype, \"_validationMessageMinDateSummary\", void 0);\r\n__decorate([\r\n    Input('validationmessagemaxdate'),\r\n    __metadata(\"design:type\", String)\r\n], NgDateTimeCommon.prototype, \"_validationMessageMaxDate\", void 0);\r\n__decorate([\r\n    Input('validationmessagesummarymaxdate'),\r\n    __metadata(\"design:type\", String)\r\n], NgDateTimeCommon.prototype, \"_validationMessageMaxDateSummary\", void 0);\r\n__decorate([\r\n    HostListener('document:click', ['$event.target']),\r\n    __metadata(\"design:type\", Function),\r\n    __metadata(\"design:paramtypes\", [Object]),\r\n    __metadata(\"design:returntype\", void 0)\r\n], NgDateTimeCommon.prototype, \"onClick\", null);\n\n/**\r\n * Moment\r\n */\r\nconst moment$5 = moment_;\r\n/**\r\n * Komponente für NgTimeCommon. Extends NgBaseDateTimeControl\r\n */\r\nclass NgTimeCommon extends NgBaseDateTimeControl {\r\n    // #endregion\r\n    /**\r\n     * Konstruktor\r\n     * @param parent typ NgFormularCommon\r\n     * @param injector typ Injector\r\n     * @param _elementRef typ ElementRef\r\n     */\r\n    constructor(parent, injector, _elementRef) {\r\n        super(parent, injector, _elementRef);\r\n        this._elementRef = _elementRef;\r\n        // #region Constants\r\n        /**\r\n         * Format des Datums\r\n         */\r\n        this.TIMEFORMAT = 'HH:mm';\r\n        /**\r\n         * Maske\r\n         */\r\n        this._mask = { mask: [/[0-2]/, /\\d/, ':', /[0-5]/, /\\d/], guide: true, placeholderChar: '_', keepCharPositions: true };\r\n        /**\r\n         * Min Time\r\n         */\r\n        this._mintime = null;\r\n        /**\r\n         * Max Time\r\n         */\r\n        this._maxtime = null;\r\n        /**\r\n         * Definiert ob der Date Selector angezeigt wird\r\n         */\r\n        this._showselector = false;\r\n        /**\r\n         * Resource Key für Validation Message MinTime bei Control\r\n         */\r\n        this._validationMessageMinTime = 'VALIDATION_ERROR_MINTIME';\r\n        /**\r\n         * Resource Key für Validation Message MinTime in Validation Summary\r\n         */\r\n        this._validationMessageMinTimeSummary = 'VALIDATION_ERROR_SUMMARY_MINTIME';\r\n        /**\r\n         * Resource Key für Validation Message MinTime bei Control\r\n         */\r\n        this._validationMessageMaxTime = 'VALIDATION_ERROR_MAXTIME';\r\n        /**\r\n         * Resource Key für Validation Message MinTime in Validation Summary\r\n         */\r\n        this._validationMessageMaxTimeSummary = 'VALIDATION_ERROR_SUMMARY_MAXTIME';\r\n    }\r\n    // #endregion\r\n    // #region Properties\r\n    /**\r\n     * Min Time\r\n     */\r\n    set mintime(v) {\r\n        let time = moment$5(v, [this.TIMEFORMAT], true);\r\n        time = this.ModifyParsedDateTimeValue(time);\r\n        if (time.isValid()) {\r\n            this._mintime = super.getDate(time).toDate();\r\n        }\r\n        else {\r\n            this._mintime = null;\r\n        }\r\n    }\r\n    /**\r\n     * Max Time\r\n     */\r\n    set maxtime(v) {\r\n        let time = moment$5(v, [this.TIMEFORMAT], true);\r\n        time = this.ModifyParsedDateTimeValue(time);\r\n        if (time.isValid()) {\r\n            this._maxtime = super.getDate(time).toDate();\r\n        }\r\n        else {\r\n            this._maxtime = null;\r\n        }\r\n    }\r\n    // #region Abstract Methods\r\n    /**\r\n     * Methode ergibt Datum-Format vom String\r\n     */\r\n    GetDateTimeFormatString() {\r\n        return this.TIMEFORMAT;\r\n    }\r\n    /**\r\n     * Methode ergibt Datum - Moment\r\n     */\r\n    ModifyParsedDateTimeValue(v) {\r\n        v.date(1);\r\n        v.month(0);\r\n        v.year(1900);\r\n        return v;\r\n    }\r\n    // #endregion\r\n    // #region Time Selector\r\n    /**\r\n     * Zeigt Date Selector an\r\n     */\r\n    showTimeSelector() {\r\n        // Touch Event auslösen\r\n        this.onTouch();\r\n        if (this._showselector) {\r\n            this._showselector = false;\r\n        }\r\n        else {\r\n            this._showselector = true;\r\n        }\r\n    }\r\n    /**\r\n     * HostListener\r\n     */\r\n    onClick(targetElement) {\r\n        const clickedInside = this._elementRef.nativeElement.contains(targetElement);\r\n        if (!clickedInside) {\r\n            this._showselector = false;\r\n        }\r\n    }\r\n    /**\r\n     * Time Selector\r\n     */\r\n    timeselect(v) {\r\n        if (v.date === null) {\r\n            this.setValueString('');\r\n        }\r\n        else {\r\n            this.value = moment$5(v.date).utc().toDate();\r\n        }\r\n        this._showselector = false;\r\n    }\r\n    // #endregion\r\n    /**\r\n     * Validator\r\n     */\r\n    validateData(c) {\r\n        let error = null;\r\n        error = super.validateData(c);\r\n        if (error === null && c.value !== null && c.value !== undefined && c.value !== '' && this._mintime !== undefined && this._mintime !== null) {\r\n            error = Validation.minTime(this, this._mintime, this._label, this._validationMessageMinTime, this._validationMessageMinTimeSummary);\r\n        }\r\n        if (error === null && c.value !== null && c.value !== undefined && c.value !== '' && this._maxtime !== undefined && this._maxtime !== null) {\r\n            error = Validation.maxTime(this, this._maxtime, this._label, this._validationMessageMaxTime, this._validationMessageMaxTimeSummary);\r\n        }\r\n        return error;\r\n    }\r\n}\r\n__decorate([\r\n    Input('mintime'),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], NgTimeCommon.prototype, \"mintime\", null);\r\n__decorate([\r\n    Input('maxtime'),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], NgTimeCommon.prototype, \"maxtime\", null);\r\n__decorate([\r\n    Input('validationmessagemintime'),\r\n    __metadata(\"design:type\", String)\r\n], NgTimeCommon.prototype, \"_validationMessageMinTime\", void 0);\r\n__decorate([\r\n    Input('validationmessagesummarymintime'),\r\n    __metadata(\"design:type\", String)\r\n], NgTimeCommon.prototype, \"_validationMessageMinTimeSummary\", void 0);\r\n__decorate([\r\n    Input('validationmessagemaxtime'),\r\n    __metadata(\"design:type\", String)\r\n], NgTimeCommon.prototype, \"_validationMessageMaxTime\", void 0);\r\n__decorate([\r\n    Input('validationmessagesummarymaxtime'),\r\n    __metadata(\"design:type\", String)\r\n], NgTimeCommon.prototype, \"_validationMessageMaxTimeSummary\", void 0);\r\n__decorate([\r\n    HostListener('document:click', ['$event.target']),\r\n    __metadata(\"design:type\", Function),\r\n    __metadata(\"design:paramtypes\", [Object]),\r\n    __metadata(\"design:returntype\", void 0)\r\n], NgTimeCommon.prototype, \"onClick\", null);\n\n/**\r\n * Common Klasse für Static Label Control\r\n **/\r\nclass NgStaticLabelCommon extends NgInputBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * Erlaubt HTML Content in der Anzeige des Wertes\r\n         */\r\n        this._allowhtml = false;\r\n    }\r\n    /**\r\n     * Validierung des Controls\r\n     *\r\n     * @param c Control das Validiert werden soll\r\n     * @returns Fehlermeldung aus Validation oder NULL\r\n     */\r\n    validateData(c) {\r\n        // Keine Validierung, daher immer NULL\r\n        return null;\r\n    }\r\n}\r\n__decorate([\r\n    Input('allowhtml'),\r\n    __metadata(\"design:type\", Boolean)\r\n], NgStaticLabelCommon.prototype, \"_allowhtml\", void 0);\n\n/**\r\n * Common Control für Form Item Container.\r\n **/\r\nclass NgStaticFormContainerCommon extends NgBaseModelControl {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * Definiert den Container als Required Form Item\r\n         */\r\n        this._isrequired = false;\r\n        /**\r\n         * Text welcher als Tooltip angezeigt wird.\r\n         */\r\n        this._tooltiptext = '';\r\n    }\r\n    /**\r\n     * Definiert den Container als Required Form Item\r\n     */\r\n    get isrequired() {\r\n        return this._isrequired;\r\n    }\r\n    /**\r\n     * Definiert den Container als Required Form Item\r\n     */\r\n    set isrequired(v) {\r\n        this._isrequired = convertToBoolean$1(v);\r\n    }\r\n    /**\r\n     * Validierung des Controls\r\n     *\r\n     * @description Validierung wird auf dem Form Container nicht gemacht, da kein Model Binding vorhanden.\r\n     * @param c Control das Validiert werden soll\r\n     * @returns Fehlermeldung aus Validation oder NULL\r\n     */\r\n    validateData(c) {\r\n        // Keine Validierung, daher immer NULL\r\n        return null;\r\n    }\r\n}\r\n__decorate([\r\n    Input('tooltiptext'),\r\n    __metadata(\"design:type\", String)\r\n], NgStaticFormContainerCommon.prototype, \"_tooltiptext\", void 0);\r\n__decorate([\r\n    Input('isrequired'),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], NgStaticFormContainerCommon.prototype, \"isrequired\", null);\n\n/**\r\n * Base Komponente für NgWizardCommon\r\n */\r\nclass NgWizardCommon {\r\n    constructor() {\r\n        /**\r\n         * Name des Controls\r\n         */\r\n        this._name = '';\r\n        /**\r\n         * Boolean Property prüft ob Navigation im Wizard disabled ist; default Wert - false\r\n         */\r\n        this._disableNavigation = false;\r\n        /**\r\n         * EventEmitter wenn der Schritt geändert wird\r\n         */\r\n        this._onStepChanged = new EventEmitter();\r\n        /**\r\n         * Leere Implementation von 'propagateChange'. Muss gemacht werden, damit kein Fehler entsteht\r\n         */\r\n        this.propagateChange = () => { };\r\n        /**\r\n         * Leere Implementation von 'propagateTouch'. Muss gemacht werden, damit kein Fehler entsteht\r\n         */\r\n        this.propagateTouch = () => { };\r\n    }\r\n    /**\r\n     * Setter und Getter für aktueller Schritt\r\n     */\r\n    set currentstep(v) {\r\n        this.changeStep(v);\r\n        this.propagateChange(this._currentstep);\r\n    }\r\n    get currentstep() {\r\n        return this._currentstep;\r\n    }\r\n    setStepInternal(step) {\r\n        this._currentstep = step;\r\n        this.propagateChange(this._currentstep);\r\n    }\r\n    // #region Control initialisieren\r\n    /**\r\n     * AfterContentInit Event\r\n     */\r\n    ngAfterContentInit() {\r\n        this.initSteps();\r\n    }\r\n    /**\r\n     * Ursprünglicher Schritt wird selektiert\r\n     */\r\n    initSteps() {\r\n        const activeStep = this.wizardItems().filter((step) => step._active);\r\n        if (activeStep.length === 0) {\r\n            const initStep = this.wizardItems().toArray()[0];\r\n            this.selectStep(initStep);\r\n            initStep._disabled = false;\r\n            this.setStepInternal(initStep._id);\r\n        }\r\n    }\r\n    // #endregion\r\n    /**\r\n     * Schritt selektieren\r\n     * @param step Step welcher selektiert werden soll\r\n     */\r\n    selectStep(step) {\r\n        // Cancel if Navigation disabled\r\n        if (this._disableNavigation) {\r\n            return;\r\n        }\r\n        this.changeStep(step._id);\r\n    }\r\n    /**\r\n     * Auf nächsten/vorherigen Schritt gehen\r\n     * @param step Step auf welchen gewechselt werden soll\r\n     */\r\n    changeStep(step) {\r\n        if (this.wizardItems() === undefined || this.wizardItems() === null) {\r\n            return;\r\n        }\r\n        const wizardItemsArray = this.wizardItems().toArray();\r\n        const itemsCount = wizardItemsArray.length;\r\n        const currentItemIndex = wizardItemsArray.findIndex(itm => itm._id === step);\r\n        for (let i = 0; i < itemsCount; i++) {\r\n            const item = wizardItemsArray[i];\r\n            if (i < currentItemIndex) {\r\n                item._iscomplete = true;\r\n            }\r\n            else {\r\n                item._iscomplete = false;\r\n            }\r\n            if (i > currentItemIndex + 1) {\r\n                item._disabled = true;\r\n            }\r\n            else {\r\n                item._disabled = false;\r\n            }\r\n            if (i === currentItemIndex) {\r\n                item._active = true;\r\n            }\r\n            else {\r\n                item._active = false;\r\n            }\r\n        }\r\n        this.setStepInternal(step);\r\n        this._onStepChanged.emit(step);\r\n    }\r\n    /**\r\n     * Methode, damit andere Controls änderungen im Control mitbekommen können\r\n     * Zur Änderungsinfo die Methode propagateChange aufrufen.\r\n     */\r\n    registerOnChange(fn) {\r\n        this.propagateChange = (obj) => fn(obj);\r\n    }\r\n    /**\r\n     * Methode, damit andere Controls änderungen mitbekommen, wenn das Control aktiviert (Focus) wird.\r\n     */\r\n    registerOnTouched(fn) {\r\n        this.propagateTouch = (obj) => fn(obj);\r\n    }\r\n    /**\r\n     * Methode zum schreiben von Werten aus dem Model in das Control\r\n     */\r\n    writeValue(value) {\r\n        if (value) {\r\n            this.changeStep(value);\r\n        }\r\n    }\r\n}\r\n__decorate([\r\n    Input('name'),\r\n    __metadata(\"design:type\", String)\r\n], NgWizardCommon.prototype, \"_name\", void 0);\r\n__decorate([\r\n    Input('disablenavigation'),\r\n    __metadata(\"design:type\", Boolean)\r\n], NgWizardCommon.prototype, \"_disableNavigation\", void 0);\r\n__decorate([\r\n    Input('currentstep'),\r\n    __metadata(\"design:type\", String),\r\n    __metadata(\"design:paramtypes\", [String])\r\n], NgWizardCommon.prototype, \"currentstep\", null);\r\n__decorate([\r\n    Output('stepchanged'),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], NgWizardCommon.prototype, \"_onStepChanged\", void 0);\n\n/**\r\n * Basis Komponente für NgWizardItem\r\n */\r\nclass NgWizardItemCommon {\r\n    constructor() {\r\n        /**\r\n         * Prüft ob der Schritt abgeschlossen wurde.\r\n         */\r\n        this._iscomplete = false;\r\n        /**\r\n         * Prüft ob der Schritt disabled ist.\r\n         */\r\n        this._disabled = true;\r\n    }\r\n}\r\n__decorate([\r\n    Input('active'),\r\n    __metadata(\"design:type\", Boolean)\r\n], NgWizardItemCommon.prototype, \"_active\", void 0);\r\n__decorate([\r\n    Input('iscomplete'),\r\n    __metadata(\"design:type\", Boolean)\r\n], NgWizardItemCommon.prototype, \"_iscomplete\", void 0);\r\n__decorate([\r\n    Input('disabled'),\r\n    __metadata(\"design:type\", Boolean)\r\n], NgWizardItemCommon.prototype, \"_disabled\", void 0);\r\n__decorate([\r\n    Input('id'),\r\n    __metadata(\"design:type\", String)\r\n], NgWizardItemCommon.prototype, \"_id\", void 0);\r\n__decorate([\r\n    Input('label'),\r\n    __metadata(\"design:type\", String)\r\n], NgWizardItemCommon.prototype, \"_label\", void 0);\n\n/**\r\n * Komponente für NgTinyMceCommon. Extends NgInputBase\r\n */\r\nclass NgTinyMceCommon extends NgInputBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * TextBox Placeholder\r\n         */\r\n        this._maxlength = null;\r\n        /**\r\n         * Resource Key für Validation Message Required bei Control\r\n         */\r\n        this._validationMessageRequired = 'VALIDATION_ERROR_REQUIRED';\r\n        /**\r\n         * Resource Key für Validation Message Required in Validation Summary\r\n         */\r\n        this._validationMessageRequiredSummary = 'VALIDATION_ERROR_SUMMARY_REQUIRED';\r\n    }\r\n    /**\r\n     * Validator\r\n     */\r\n    validateData(c) {\r\n        let error = null;\r\n        if (this._isrequired) {\r\n            error = Validation.required(c, this._label, this._validationMessageRequired, this._validationMessageRequiredSummary);\r\n        }\r\n        return error;\r\n    }\r\n}\r\n__decorate([\r\n    Input(\"maxlength\"),\r\n    __metadata(\"design:type\", Number)\r\n], NgTinyMceCommon.prototype, \"_maxlength\", void 0);\r\n__decorate([\r\n    Input(\"validationmessagerequired\"),\r\n    __metadata(\"design:type\", String)\r\n], NgTinyMceCommon.prototype, \"_validationMessageRequired\", void 0);\r\n__decorate([\r\n    Input(\"validationmessagesummaryrequired\"),\r\n    __metadata(\"design:type\", String)\r\n], NgTinyMceCommon.prototype, \"_validationMessageRequiredSummary\", void 0);\n\n/**\r\n * Klasse EVents. Еnthalt verchiedene Outputs\r\n */\r\nlet Events = class Events {\r\n    constructor() {\r\n        this.onBeforePaste = new EventEmitter();\r\n        this.onBlur = new EventEmitter();\r\n        this.onClick = new EventEmitter();\r\n        this.onContextMenu = new EventEmitter();\r\n        this.onCopy = new EventEmitter();\r\n        this.onCut = new EventEmitter();\r\n        this.onDblclick = new EventEmitter();\r\n        this.onDrag = new EventEmitter();\r\n        this.onDragDrop = new EventEmitter();\r\n        this.onDragEnd = new EventEmitter();\r\n        this.onDragGesture = new EventEmitter();\r\n        this.onDragOver = new EventEmitter();\r\n        this.onDrop = new EventEmitter();\r\n        this.onEditorContentChange = new EventEmitter();\r\n        this.onFocus = new EventEmitter();\r\n        this.onFocusIn = new EventEmitter();\r\n        this.onFocusOut = new EventEmitter();\r\n        this.onKeyDown = new EventEmitter();\r\n        this.onKeyPress = new EventEmitter();\r\n        this.onKeyUp = new EventEmitter();\r\n        this.onMouseDown = new EventEmitter();\r\n        this.onMouseEnter = new EventEmitter();\r\n        this.onMouseLeave = new EventEmitter();\r\n        this.onMouseMove = new EventEmitter();\r\n        this.onMouseOut = new EventEmitter();\r\n        this.onMouseOver = new EventEmitter();\r\n        this.onMouseUp = new EventEmitter();\r\n        this.onPaste = new EventEmitter();\r\n        this.onSelectionChange = new EventEmitter();\r\n        this.onActivate = new EventEmitter();\r\n        this.onAddUndo = new EventEmitter();\r\n        this.onBeforeAddUndo = new EventEmitter();\r\n        this.onBeforeExecCommand = new EventEmitter();\r\n        this.onBeforeGetContent = new EventEmitter();\r\n        this.onBeforeRenderUI = new EventEmitter();\r\n        this.onBeforeSetContent = new EventEmitter();\r\n        this.onChange = new EventEmitter();\r\n        this.onClearUndos = new EventEmitter();\r\n        this.onDeactivate = new EventEmitter();\r\n        this.onDirty = new EventEmitter();\r\n        this.onExecCommand = new EventEmitter();\r\n        this.onGetContent = new EventEmitter();\r\n        this.onHide = new EventEmitter();\r\n        this.onInit = new EventEmitter();\r\n        this.onLoadContent = new EventEmitter();\r\n        this.onNodeChange = new EventEmitter();\r\n        this.onPostProcess = new EventEmitter();\r\n        this.onPostRender = new EventEmitter();\r\n        this.onPreInit = new EventEmitter();\r\n        this.onPreProcess = new EventEmitter();\r\n        this.onProgressState = new EventEmitter();\r\n        this.onRedo = new EventEmitter();\r\n        this.onRemove = new EventEmitter();\r\n        this.onReset = new EventEmitter();\r\n        this.onSaveContent = new EventEmitter();\r\n        this.onSetAttrib = new EventEmitter();\r\n        this.onObjectResizeStart = new EventEmitter();\r\n        this.onObjectResized = new EventEmitter();\r\n        this.onObjectSelected = new EventEmitter();\r\n        this.onSetContent = new EventEmitter();\r\n        this.onShow = new EventEmitter();\r\n        this.onSubmit = new EventEmitter();\r\n        this.onUndo = new EventEmitter();\r\n        this.onVisualAid = new EventEmitter();\r\n    }\r\n};\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], Events.prototype, \"onBeforePaste\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], Events.prototype, \"onBlur\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], Events.prototype, \"onClick\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], Events.prototype, \"onContextMenu\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], Events.prototype, \"onCopy\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], Events.prototype, \"onCut\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], Events.prototype, \"onDblclick\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], Events.prototype, \"onDrag\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], Events.prototype, \"onDragDrop\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], Events.prototype, \"onDragEnd\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], Events.prototype, \"onDragGesture\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], Events.prototype, \"onDragOver\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], Events.prototype, \"onDrop\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], Events.prototype, \"onEditorContentChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], Events.prototype, \"onFocus\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], Events.prototype, \"onFocusIn\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], Events.prototype, \"onFocusOut\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], Events.prototype, \"onKeyDown\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], Events.prototype, \"onKeyPress\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], Events.prototype, \"onKeyUp\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], Events.prototype, \"onMouseDown\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], Events.prototype, \"onMouseEnter\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], Events.prototype, \"onMouseLeave\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], Events.prototype, \"onMouseMove\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], Events.prototype, \"onMouseOut\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], Events.prototype, \"onMouseOver\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], Events.prototype, \"onMouseUp\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], Events.prototype, \"onPaste\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], Events.prototype, \"onSelectionChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], Events.prototype, \"onActivate\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], Events.prototype, \"onAddUndo\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], Events.prototype, \"onBeforeAddUndo\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], Events.prototype, \"onBeforeExecCommand\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], Events.prototype, \"onBeforeGetContent\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], Events.prototype, \"onBeforeRenderUI\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], Events.prototype, \"onBeforeSetContent\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], Events.prototype, \"onChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], Events.prototype, \"onClearUndos\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], Events.prototype, \"onDeactivate\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], Events.prototype, \"onDirty\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], Events.prototype, \"onExecCommand\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], Events.prototype, \"onGetContent\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], Events.prototype, \"onHide\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], Events.prototype, \"onInit\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], Events.prototype, \"onLoadContent\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], Events.prototype, \"onNodeChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], Events.prototype, \"onPostProcess\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], Events.prototype, \"onPostRender\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], Events.prototype, \"onPreInit\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], Events.prototype, \"onPreProcess\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], Events.prototype, \"onProgressState\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], Events.prototype, \"onRedo\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], Events.prototype, \"onRemove\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], Events.prototype, \"onReset\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], Events.prototype, \"onSaveContent\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], Events.prototype, \"onSetAttrib\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], Events.prototype, \"onObjectResizeStart\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], Events.prototype, \"onObjectResized\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], Events.prototype, \"onObjectSelected\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], Events.prototype, \"onSetContent\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], Events.prototype, \"onShow\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], Events.prototype, \"onSubmit\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], Events.prototype, \"onUndo\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], Events.prototype, \"onVisualAid\", void 0);\r\nEvents = __decorate([\r\n    Directive()\r\n], Events);\r\n/**\r\n * Enthielt key words von alle Events für Tiny MCE\r\n */\r\nconst validEvents = [\r\n    'onActivate',\r\n    'onAddUndo',\r\n    'onBeforeAddUndo',\r\n    'onBeforeExecCommand',\r\n    'onBeforeGetContent',\r\n    'onBeforeRenderUI',\r\n    'onBeforeSetContent',\r\n    'onBeforePaste',\r\n    'onBlur',\r\n    'onChange',\r\n    'onClearUndos',\r\n    'onClick',\r\n    'onContextMenu',\r\n    'onCopy',\r\n    'onCut',\r\n    'onDblclick',\r\n    'onDeactivate',\r\n    'onDirty',\r\n    'onDrag',\r\n    'onDragDrop',\r\n    'onDragEnd',\r\n    'onDragGesture',\r\n    'onDragOver',\r\n    'onDrop',\r\n    'onExecCommand',\r\n    'onFocus',\r\n    'onFocusIn',\r\n    'onFocusOut',\r\n    'onGetContent',\r\n    'onHide',\r\n    'onInit',\r\n    'onKeyDown',\r\n    'onKeyPress',\r\n    'onKeyUp',\r\n    'onLoadContent',\r\n    'onMouseDown',\r\n    'onMouseEnter',\r\n    'onMouseLeave',\r\n    'onMouseMove',\r\n    'onMouseOut',\r\n    'onMouseOver',\r\n    'onMouseUp',\r\n    'onNodeChange',\r\n    'onObjectResizeStart',\r\n    'onObjectResized',\r\n    'onObjectSelected',\r\n    'onPaste',\r\n    'onPostProcess',\r\n    'onPostRender',\r\n    'onPreProcess',\r\n    'onProgressState',\r\n    'onRedo',\r\n    'onRemove',\r\n    'onReset',\r\n    'onSaveContent',\r\n    'onSelectionChange',\r\n    'onSetAttrib',\r\n    'onSetContent',\r\n    'onShow',\r\n    'onSubmit',\r\n    'onUndo',\r\n    'onVisualAid'\r\n];\n\n/**\r\n * Copyright (c) 2017-present, Ephox, Inc.\r\n *\r\n * This source code is licensed under the Apache 2 license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\r\nconst getTinymce = () => {\r\n    const w = window;\r\n    return w && w.tinymce ? w.tinymce : null;\r\n};\r\nconst ɵ0 = getTinymce;\n\n/**\r\n * Copyright (c) 2017-present, Ephox, Inc.\r\n *\r\n * This source code is licensed under the Apache 2 license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\r\n/**\r\n * Bind Handler Event\r\n */\r\nconst bindHandlers = (ctx, editor, initEvent) => {\r\n    validEvents.forEach((eventName) => {\r\n        const eventEmitter = ctx[eventName];\r\n        if (eventEmitter.observers.length > 0) {\r\n            if (eventName === 'onInit') {\r\n                ctx.ngZone.run(() => eventEmitter.emit({ event: initEvent, editor }));\r\n            }\r\n            else {\r\n                editor.on(eventName.substring(2), ctx.ngZone.run(() => (event) => eventEmitter.emit({ event, editor })));\r\n            }\r\n        }\r\n    });\r\n};\r\n/**\r\n * Unique Wert\r\n */\r\nlet unique = 0;\r\n/**\r\n * UUID\r\n */\r\nconst uuid = (prefix) => {\r\n    const date = new Date();\r\n    const time = date.getTime();\r\n    const random = Math.floor(Math.random() * 1000000000);\r\n    unique++;\r\n    return prefix + '_' + random + unique + String(time);\r\n};\r\n/**\r\n * Prüft ob das Element ein HTMLTextAreaElement ist\r\n */\r\nconst isTextarea = (element) => {\r\n    return typeof element !== 'undefined' && element.tagName.toLowerCase() === 'textarea';\r\n};\r\n/**\r\n * Plugins-Array Normalisierung\r\n */\r\nconst normalizePluginArray = (plugins) => {\r\n    if (typeof plugins === 'undefined' || plugins === '') {\r\n        return [];\r\n    }\r\n    return Array.isArray(plugins) ? plugins : plugins.split(' ');\r\n};\r\nconst ɵ0$1 = normalizePluginArray;\r\n/**\r\n * Merge von Plugins\r\n */\r\nconst mergePlugins = (initPlugins, inputPlugins) => normalizePluginArray(initPlugins).concat(normalizePluginArray(inputPlugins));\n\n/**\r\n * Copyright (c) 2017-present, Ephox, Inc.\r\n *\r\n * This source code is licensed under the Apache 2 license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\r\n/**\r\n*Funktion.  Fügt ein scripttag hinzu. Verlangt:\r\n* scriptId: string,\r\n* doc: Document,\r\n* url: string,\r\n *callback: callbackFn\r\n */\r\nconst injectScriptTag = (scriptId, doc, url, callback) => {\r\n    const scriptTag = doc.createElement('script');\r\n    scriptTag.type = 'application/javascript';\r\n    scriptTag.id = scriptId;\r\n    scriptTag.addEventListener('load', callback);\r\n    scriptTag.src = url;\r\n    doc.head.appendChild(scriptTag);\r\n};\r\nconst ɵ0$2 = injectScriptTag;\r\n/**\r\n * Funktion create. Returns IStateObj\r\n */\r\nconst create = () => {\r\n    return {\r\n        listeners: [],\r\n        scriptId: uuid('tiny-script'),\r\n        scriptLoaded: false\r\n    };\r\n};\r\n/**\r\n * Funktion load. Verlangt:\r\n * state: IStateObj\r\n * doc: Document\r\n * url: string\r\n * callback: callbackFn\r\n */\r\nconst load = (state, doc, url, callback) => {\r\n    if (state.scriptLoaded) {\r\n        callback();\r\n    }\r\n    else {\r\n        state.listeners.push(callback);\r\n        if (!doc.getElementById(state.scriptId)) {\r\n            injectScriptTag(state.scriptId, doc, url, () => {\r\n                state.listeners.forEach((fn) => fn());\r\n                state.scriptLoaded = true;\r\n            });\r\n        }\r\n    }\r\n};\n\n// Source: https://github.com/cnblogs/tinymce-angular\r\nconst scriptState = create();\r\nconst EDITOR_COMPONENT_VALUE_ACCESSOR = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => NgTinyMceEditorComponent),\r\n    multi: true\r\n};\r\nlet NgTinyMceEditorComponent = class NgTinyMceEditorComponent extends Events {\r\n    constructor(elementRef, ngZone) {\r\n        super();\r\n        this.element = undefined;\r\n        this.id = '';\r\n        this.toolbar = null;\r\n        this.onTouchedCallback = () => { };\r\n        this.onChangeCallback = (x) => { };\r\n        this.changeInEditor = false;\r\n        this.elementRef = elementRef;\r\n        this.ngZone = ngZone;\r\n        this.initialise = this.initialise.bind(this);\r\n    }\r\n    writeValue(value) {\r\n        this.initialValue = value || this.initialValue;\r\n        if (this.editor && this.editor.initialized && typeof value === 'string') {\r\n            console.log(\"Set Value to TinyMCE with WriteValue\");\r\n            this.editor.setContent(value);\r\n        }\r\n    }\r\n    set value(v) {\r\n        if (this.editor && this.changeInEditor == false) {\r\n            console.log(\"Set Value to TinyMCE with Value\");\r\n            this.editor.setContent(v);\r\n        }\r\n        else\r\n            this.initialValue = v;\r\n    }\r\n    get value() {\r\n        console.log(\"Read Value\");\r\n        return this.editor.getContent();\r\n    }\r\n    registerOnChange(fn) {\r\n        this.onChangeCallback = fn;\r\n    }\r\n    registerOnTouched(fn) {\r\n        this.onTouchedCallback = fn;\r\n    }\r\n    setDisabledState(isDisabled) {\r\n        if (this.editor) {\r\n            this.editor.setMode(isDisabled ? 'readonly' : 'design');\r\n        }\r\n        else if (isDisabled) {\r\n            this.init = Object.assign(Object.assign({}, this.init), { readonly: true });\r\n        }\r\n    }\r\n    ngAfterViewInit() {\r\n        this.id = this.id || uuid('tiny-react');\r\n        this.inline = typeof this.inline !== 'undefined' ? this.inline : this.init && this.init.inline;\r\n        this.createElement();\r\n        if (getTinymce() !== null) {\r\n            this.initialise();\r\n        }\r\n        else if (this.element) {\r\n            const doc = this.element.ownerDocument;\r\n            let url = '';\r\n            if (this.hostUrl) {\r\n                url = this.hostUrl;\r\n            }\r\n            else {\r\n                const channel = this.cloudChannel || 'stable';\r\n                const apiKey = this.apiKey || '';\r\n                url = `https://cloud.tinymce.com/${channel}/tinymce.min.js?apiKey=${apiKey}`;\r\n            }\r\n            load(scriptState, doc, url, this.initialise);\r\n        }\r\n    }\r\n    ngOnDestroy() {\r\n        if (getTinymce() !== null) {\r\n            getTinymce().remove(this.editor);\r\n        }\r\n    }\r\n    createElement() {\r\n        const tagName = typeof this.tagName === 'string' ? this.tagName : 'div';\r\n        this.element = document.createElement(this.inline ? tagName : 'textarea');\r\n        if (this.element) {\r\n            this.element.id = this.id;\r\n            if (isTextarea(this.element)) {\r\n                this.element.style.visibility = 'hidden';\r\n            }\r\n            this.elementRef.nativeElement.appendChild(this.element);\r\n        }\r\n    }\r\n    initialise() {\r\n        const finalInit = Object.assign(Object.assign({}, this.init), { selector: `#${this.id}`, inline: this.inline, plugins: mergePlugins(this.init && this.init.plugins, this.plugins), toolbar: this.toolbar || (this.init && this.init.toolbar), branding: false, setup: (editor) => {\r\n                this.editor = editor;\r\n                editor.on('init', (e) => {\r\n                    this.initEditor(e, editor);\r\n                });\r\n                if (this.init && typeof this.init.setup === 'function') {\r\n                    this.init.setup(editor);\r\n                }\r\n            } });\r\n        if (isTextarea(this.element)) {\r\n            this.element.style.visibility = '';\r\n        }\r\n        this.ngZone.runOutsideAngular(() => {\r\n            getTinymce().init(finalInit);\r\n        });\r\n    }\r\n    initEditor(initEvent, editor) {\r\n        if (typeof this.initialValue === 'string') {\r\n            this.ngZone.run(() => editor.setContent(this.initialValue));\r\n        }\r\n        editor.once('blur', () => this.ngZone.run(() => this.onTouchedCallback()));\r\n        editor.on('focus', () => this.ngZone.run(() => {\r\n            console.log(\"Has Focus\");\r\n            this.changeInEditor = true;\r\n        }));\r\n        editor.on('blur', () => this.ngZone.run(() => {\r\n            console.log(\"Lost Focus\");\r\n            this.changeInEditor = false;\r\n        }));\r\n        editor.on('setcontent', ({ content, format }) => format === 'html' && content && this.ngZone.run(() => this.onChangeCallback(content)));\r\n        editor.on('change keyup undo redo', () => this.ngZone.run(() => {\r\n            console.log(\"Change Event\");\r\n            this.onChangeCallback(editor.getContent());\r\n            this.onEditorContentChange.emit(editor);\r\n        }));\r\n        bindHandlers(this, editor, initEvent);\r\n    }\r\n};\r\nNgTinyMceEditorComponent.ctorParameters = () => [\r\n    { type: ElementRef },\r\n    { type: NgZone }\r\n];\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String)\r\n], NgTinyMceEditorComponent.prototype, \"cloudChannel\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String)\r\n], NgTinyMceEditorComponent.prototype, \"apiKey\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String)\r\n], NgTinyMceEditorComponent.prototype, \"hostUrl\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], NgTinyMceEditorComponent.prototype, \"init\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], NgTinyMceEditorComponent.prototype, \"id\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String)\r\n], NgTinyMceEditorComponent.prototype, \"initialValue\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean)\r\n], NgTinyMceEditorComponent.prototype, \"inline\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String)\r\n], NgTinyMceEditorComponent.prototype, \"tagName\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String)\r\n], NgTinyMceEditorComponent.prototype, \"plugins\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], NgTinyMceEditorComponent.prototype, \"toolbar\", void 0);\r\n__decorate([\r\n    Input(\"value\"),\r\n    __metadata(\"design:type\", String),\r\n    __metadata(\"design:paramtypes\", [String])\r\n], NgTinyMceEditorComponent.prototype, \"value\", null);\r\nNgTinyMceEditorComponent = __decorate([\r\n    Component({\r\n        selector: 'ngTinyMceEditor',\r\n        template: '<ng-template></ng-template>',\r\n        providers: [EDITOR_COMPONENT_VALUE_ACCESSOR],\r\n        styles: [':host { display: block; }']\r\n    }),\r\n    __metadata(\"design:paramtypes\", [ElementRef, NgZone])\r\n], NgTinyMceEditorComponent);\n\nlet jNetworkTinyMceEditorModule = class jNetworkTinyMceEditorModule {\r\n};\r\njNetworkTinyMceEditorModule = __decorate([\r\n    NgModule({\r\n        declarations: [NgTinyMceEditorComponent],\r\n        imports: [],\r\n        exports: [NgTinyMceEditorComponent]\r\n    })\r\n], jNetworkTinyMceEditorModule);\n\n/**\r\n * Basis Komponente für NgTreeView\r\n */\r\nclass NgTreeViewCommon {\r\n    constructor() {\r\n        /**\r\n         * Das Property enthielt array of nodes. Default value: empty array [].\r\n         */\r\n        this.nodes = [];\r\n        /**\r\n         * Das Property enthielt node attribute: 'isCollapsed'. Es wird benutzt beim rendering. Für Expand/Collapsed Sicht des Node(Wert)\r\n         */\r\n        this.collapseAttr = 'isCollapsed';\r\n        /**\r\n         * Das Property enthielt node attribute: 'isSelected'. Es wird benutzt beim Vorbereitung des Data des TreeView\r\n         */\r\n        this.selectAttr = 'isSelected';\r\n        /**\r\n        * Das Property enthielt node attribute: 'isIndeterminate'. Es wird benutzt beim Vorbereitung des Data des TreeView\r\n        */\r\n        this.inDeterminateAttr = 'isIndeterminate';\r\n        /**\r\n         * Providen data for tree.\r\n         */\r\n        this._data = [];\r\n        /**\r\n         * Input property für den Namen des TreeView. Type string. Default value: \"\"\r\n         */\r\n        this._name = \"\";\r\n        /**\r\n         * A flag indicating data is flatten in array and prepare is required.(Default\r\n         * is false).\r\n         */\r\n        this.prepareData = false;\r\n        /**\r\n         * Attribute for Text in Tree\r\n         */\r\n        this.textAttr = 'data';\r\n        /**\r\n         * Name of ID property in input data.\r\n         */\r\n        this.idAttr = 'id';\r\n        /**\r\n         * Name of parent property in input data.\r\n         */\r\n        this.parentAttr = 'PARENT_ID';\r\n        /**\r\n         * Name of children list property in input data.\r\n         */\r\n        this.childrenAttr = 'children';\r\n        /**\r\n         * Output Emitter. Emit das ID des selected Node.\r\n         */\r\n        this.selectedIdEmitter = new EventEmitter();\r\n        /**\r\n         * Output Emitter. Emit das TextAttr des selected Node.\r\n         */\r\n        this.selectedTextEmitter = new EventEmitter();\r\n        /**\r\n         * Output Emitter. Emit wenn ein Node selektiert wird.\r\n         */\r\n        this.selectedItemEmitter = new EventEmitter();\r\n    }\r\n    /**\r\n     * Getter für Data des TreeView\r\n     */\r\n    get data() {\r\n        return this._data;\r\n    }\r\n    /**\r\n     * Input Property für Data des TreeView\r\n     */\r\n    set data(value) {\r\n        this._data = value;\r\n        this.nodes = value;\r\n        // this.nodes.forEach(node => node[\"typeId\"] = \"13\")    \r\n        this.LoadTree();\r\n        if (this._collapseAll !== undefined) {\r\n            this.collapseAllNode(this._collapseAll);\r\n        }\r\n    }\r\n    /**\r\n     * Die Directive erhält die actions für das TreeView\r\n     */\r\n    set treeviewTemplate(v) {\r\n        this.templateTree = v;\r\n    }\r\n    /**\r\n     * Getter für das TreeView Template\r\n     */\r\n    get treeviewTemplate() {\r\n        return this.templateTree;\r\n    }\r\n    /**\r\n     * Setter property. Deffiniert das FileIcon für das TreeView\r\n     */\r\n    set treefileicon(v) {\r\n        this.fileicontemplate = v;\r\n    }\r\n    /**\r\n     * Getter property. Ergibt das FileIcon für das TreeView\r\n     */\r\n    get treefileicon() {\r\n        return this.fileicontemplate;\r\n    }\r\n    // @Input(\"titleAction\") _titleAction: string\r\n    /**\r\n     * Collapse or expand all parent nodes.\r\n     */\r\n    set collapseAll(value) {\r\n        this._collapseAll = value;\r\n        if (this.nodes && this.nodes.length && this.nodes.length > 0) {\r\n            this.collapseAllNode(this._collapseAll);\r\n        }\r\n        // this._recursiveEdit(\r\n        //   this.nodes, this.childrenAttr, this.collapseAttr, this._collapseAll);\r\n        // this.cd.detectChanges();\r\n    }\r\n    /**\r\n     * Getter für das collapse property. Ergibt boolean Wert, ob die Items collapsed/expand sind.\r\n     */\r\n    get collapseAll() {\r\n        return this._collapseAll;\r\n    }\r\n    /**\r\n     * Select or deselect all nodes.\r\n     */\r\n    set selectAll(value) {\r\n        this._selectAll = value;\r\n        this._recursiveEdit(this.nodes, this.childrenAttr, this.selectAttr, value);\r\n        this._recursiveEdit(this.nodes, this.childrenAttr, this.inDeterminateAttr, false);\r\n    }\r\n    /**\r\n     * Input property - setter. Deffiniert das ID des selektierten Item(node)\r\n     */\r\n    set selectedId(v) {\r\n        this.selectedNode = this.findNode(this.nodes, v, this.idAttr);\r\n        // if (this.selectedNode) {\r\n        //   this.selectedIdEmitter.emit(this.selectedNode[this.idAttr]);\r\n        //   this.selectedTextEmitter.emit(this.selectedNode[this.textAttr]);\r\n        // }\r\n    }\r\n    /**\r\n     * Getter. Ergibt das ID des selektierten Item(node)\r\n     */\r\n    get selectedId() {\r\n        return this.selectedNode ? this.selectedNode[this.idAttr] : null;\r\n    }\r\n    /**\r\n     * Setter für das selektierte Wert(node). Wenn aufgerufen das ID und TextAttr des selected Node wird emitted\r\n     */\r\n    set selectedNode(v) {\r\n        this._selectedNode = v;\r\n        if (this._selectedNode) {\r\n            this.selectedIdEmitter.emit(this.selectedId);\r\n            this.selectedTextEmitter.emit(v[this.textAttr]);\r\n        }\r\n    }\r\n    /**\r\n     * Getter für das selektierte Wert(node). Ergibt das selektierte Wert(node).\r\n     */\r\n    get selectedNode() {\r\n        return this._selectedNode;\r\n    }\r\n    /**\r\n     * A lifecycle hook that is called after Angular has initialized all data-bound properties of a directive.\r\n     * Define an ngOnInit() method to handle any additional initialization tasks.\r\n     */\r\n    ngOnInit() {\r\n        this.collapseAllNode(this._collapseAll);\r\n        if (this.selectedId)\r\n            this.openSelectedNode(this.nodes);\r\n    }\r\n    /**\r\n     * Funktion setzt alle parent items recusiv zum selected node\r\n     * auf collapsed = false\r\n     */\r\n    openSelectedNode(data) {\r\n        let result = false;\r\n        for (let i = 0; i < data.length; i++) {\r\n            if (data[i][this.childrenAttr].length && data[i][this.idAttr] != this.selectedId)\r\n                result = this.openSelectedNode(data[i][this.childrenAttr]);\r\n            if (result || data[i][this.idAttr] == this.selectedId) {\r\n                data[i][this.collapseAttr] = false;\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * Die Methode vorbereitet die Daten für das TreeView. Die Funktion sollte geändert werden abhängig von dem kommenden Daten (wenn array)\r\n     */\r\n    LoadTree() {\r\n        //if the tree structure require array the function below should be changed\r\n        const cloned = this._data.map(x => Object.assign({}, x));\r\n        // If data is flat, prepare data with recursive function.\r\n        this.nodes = this.prepareData ? this._getPreparedData(cloned) : this._data;\r\n    }\r\n    /**\r\n     * Die Methode collapse/expand den selectierten Node\r\n     */\r\n    onCollapseClick(node) {\r\n        if (node[this.childrenAttr].length) {\r\n            node[this.collapseAttr] = !node[this.collapseAttr];\r\n        }\r\n    }\r\n    /**\r\n     * Die Methode set den selektierten Node und emit es.\r\n     */\r\n    onClick(node) {\r\n        this.selectedNode = node;\r\n        this.selectedItemEmitter.emit(this.selectedNode);\r\n        // this.cd.detectChanges();\r\n    }\r\n    /**\r\n     * Die Methode wird ein event mit Meldung zu Parent emit-en.\r\n     */\r\n    sendMsgToParent(msg) {\r\n        this.selectedItemEmitter.emit(msg);\r\n    }\r\n    /**\r\n     * Die Methode wird alle Nodes collapse\r\n     */\r\n    collapseAllNode(command) {\r\n        this.nodes.forEach(node => {\r\n            if (node[this.childrenAttr].length) {\r\n                collapseAllHIdden(node, this.collapseAttr, command, this.childrenAttr);\r\n            }\r\n        });\r\n        function collapseAllHIdden(node, collapseAttr, command, childrenAttr) {\r\n            node[collapseAttr] = command;\r\n            node.children.forEach((child) => {\r\n                if (child[childrenAttr].length) {\r\n                    collapseAllHIdden(child, collapseAttr, command, childrenAttr);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Funktion gibt node aus der liste zurück, welches das Value auf dem gewünschten Attribut hat\r\n     * Wenn node nicht gefunden wird, wird null zurück gegeben\r\n     * @param data Liste der nodes\r\n     * @param searchValue Das gesuchte value\r\n     * @param attr Der namen des Attributs auf dem das value gesucht wird\r\n     */\r\n    findNode(data, searchValue, attr) {\r\n        let result = null;\r\n        for (let i = 0; i < data.length; i++) {\r\n            if (data[i][attr] == searchValue)\r\n                result = data[i];\r\n            else {\r\n                if (data[i][this.childrenAttr].length) {\r\n                    let recursiveResult = this.findNode(data[i][this.childrenAttr], searchValue, attr);\r\n                    if (recursiveResult)\r\n                        result = recursiveResult;\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    /**\r\n     * Die Methode editiert (recursive) alle eingegebene Nodes abhängig von gegebenen Attibute und Value Kriterien.\r\n     */\r\n    _recursiveEdit(list, childrenAttr, attr, value) {\r\n        if (Array.isArray(list)) {\r\n            for (let i = 0, len = list.length; i < len; i++) {\r\n                list[i][attr] = value;\r\n                if (list[i][childrenAttr].length) {\r\n                    this._recursiveEdit(list[i][childrenAttr], childrenAttr, attr, value);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Die Methode erstellt eine standarte Sicht-Liste von Nodes\r\n     */\r\n    _getPreparedData(list) {\r\n        const tree = [], lookup = {};\r\n        for (let i = 0, len = list.length; i < len; i++) {\r\n            lookup[list[i][this.idAttr]] = list[i];\r\n            list[i][this.childrenAttr] = [];\r\n            list[i][this.collapseAttr] = true;\r\n            list[i][this.selectAttr] = false;\r\n            list[i][this.inDeterminateAttr] = false;\r\n        }\r\n        for (let i = 0, len = list.length; i < len; i++) {\r\n            if (list[i][this.parentAttr]) {\r\n                lookup[list[i][this.parentAttr]][this.childrenAttr].push(list[i]);\r\n            }\r\n            else {\r\n                tree.push(list[i]);\r\n            }\r\n        }\r\n        return tree;\r\n    }\r\n}\r\n__decorate([\r\n    Input('data'),\r\n    __metadata(\"design:type\", Array),\r\n    __metadata(\"design:paramtypes\", [Array])\r\n], NgTreeViewCommon.prototype, \"data\", null);\r\n__decorate([\r\n    Input(\"template\"),\r\n    __metadata(\"design:type\", TemplateRef)\r\n], NgTreeViewCommon.prototype, \"templateTree\", void 0);\r\n__decorate([\r\n    ContentChild(\"actions\", { static: true }),\r\n    __metadata(\"design:type\", TemplateRef),\r\n    __metadata(\"design:paramtypes\", [TemplateRef])\r\n], NgTreeViewCommon.prototype, \"treeviewTemplate\", null);\r\n__decorate([\r\n    Input('fileicontemplate'),\r\n    __metadata(\"design:type\", TemplateRef)\r\n], NgTreeViewCommon.prototype, \"fileicontemplate\", void 0);\r\n__decorate([\r\n    ContentChild(\"treefileicon\", { static: true }),\r\n    __metadata(\"design:type\", TemplateRef),\r\n    __metadata(\"design:paramtypes\", [TemplateRef])\r\n], NgTreeViewCommon.prototype, \"treefileicon\", null);\r\n__decorate([\r\n    Input(\"name\"),\r\n    __metadata(\"design:type\", String)\r\n], NgTreeViewCommon.prototype, \"_name\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], NgTreeViewCommon.prototype, \"prepareData\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], NgTreeViewCommon.prototype, \"textAttr\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], NgTreeViewCommon.prototype, \"idAttr\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], NgTreeViewCommon.prototype, \"parentAttr\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], NgTreeViewCommon.prototype, \"childrenAttr\", void 0);\r\n__decorate([\r\n    Input(\"title\"),\r\n    __metadata(\"design:type\", Object)\r\n], NgTreeViewCommon.prototype, \"_title\", void 0);\r\n__decorate([\r\n    Input('collapseAll'),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], NgTreeViewCommon.prototype, \"collapseAll\", null);\r\n__decorate([\r\n    Input('selectAll'),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], NgTreeViewCommon.prototype, \"selectAll\", null);\r\n__decorate([\r\n    Input(\"selectedId\"),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], NgTreeViewCommon.prototype, \"selectedId\", null);\r\n__decorate([\r\n    Output(\"selectedIdChange\"),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], NgTreeViewCommon.prototype, \"selectedIdEmitter\", void 0);\r\n__decorate([\r\n    Output(\"selectedTextChanged\"),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], NgTreeViewCommon.prototype, \"selectedTextEmitter\", void 0);\r\n__decorate([\r\n    Output(\"onselecteditem\"),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], NgTreeViewCommon.prototype, \"selectedItemEmitter\", void 0);\n\n/**\r\n * Komponente für NgTreeViewChildCommon. Extends NgTreeViewCommon\r\n */\r\nclass NgTreeViewChildCommon extends NgTreeViewCommon {\r\n    /**\r\n     * A lifecycle hook that is called after Angular has initialized all data-bound properties of a directive.\r\n     * Define an ngOnInit() method to handle any additional initialization tasks.\r\n     */\r\n    ngOnInit() {\r\n        this.collapseAllNode(this.collapseAll);\r\n    }\r\n}\n\n/**\r\n *Basis Komponente für NgTreeItemAction\r\n */\r\nclass NgTreeItemActionCommon {\r\n    /**\r\n     * Konstruktor\r\n     * @param el Element Referenz\r\n     */\r\n    constructor(el) {\r\n        this.el = el;\r\n        /**\r\n        * Event wenn auf das Icon geclickt wird\r\n        */\r\n        this.clickaction = new EventEmitter();\r\n    }\r\n    /**\r\n     * lifecycle OnInit hook. Wird aufgeruren sobald das Komponent initialisiert ist.\r\n     */\r\n    ngOnInit() {\r\n        let rootElement = this.el.nativeElement;\r\n        let parentElement = rootElement.parentElement;\r\n        while (rootElement.firstChild) {\r\n            parentElement.insertBefore(rootElement.firstChild, rootElement);\r\n        }\r\n        parentElement.removeChild(rootElement);\r\n    }\r\n    /**\r\n     * Die Methode erstellt die CSS Klasse des Icon. Akzeptiert ein Key-word und baut ein vollständige CSS Klasse.\r\n     */\r\n    transformClass(initialClass) {\r\n        switch (initialClass) {\r\n            case \"add\":\r\n                return \"jstree-icon icon icon-base-add jstree-add\";\r\n            case \"delete\":\r\n                return \"jstree-icon icon icon-base-delete jstree-delete\";\r\n            default:\r\n                return initialClass;\r\n        }\r\n    }\r\n    /**\r\n    * Die Methode wird das cklickaction Emitter aktivieren.\r\n    */\r\n    iconaction() {\r\n        this.clickaction.emit();\r\n    }\r\n}\r\n__decorate([\r\n    Input(\"item\"),\r\n    __metadata(\"design:type\", Object)\r\n], NgTreeItemActionCommon.prototype, \"node\", void 0);\r\n__decorate([\r\n    Input(\"title\"),\r\n    __metadata(\"design:type\", String)\r\n], NgTreeItemActionCommon.prototype, \"_title\", void 0);\r\n__decorate([\r\n    Input(\"iconstyle\"),\r\n    __metadata(\"design:type\", String)\r\n], NgTreeItemActionCommon.prototype, \"iconstyle\", void 0);\r\n__decorate([\r\n    Output(\"onclick\"),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], NgTreeItemActionCommon.prototype, \"clickaction\", void 0);\n\n/**\r\n * Enum für Tooltip Positionen\r\n */\r\nvar TooltipPosition;\r\n(function (TooltipPosition) {\r\n    TooltipPosition[TooltipPosition[\"none\"] = 0] = \"none\";\r\n    // tslint:disable-next-line:no-bitwise\r\n    TooltipPosition[TooltipPosition[\"top\"] = 1] = \"top\";\r\n    // tslint:disable-next-line:no-bitwise\r\n    TooltipPosition[TooltipPosition[\"right\"] = 2] = \"right\";\r\n    // tslint:disable-next-line:no-bitwise\r\n    TooltipPosition[TooltipPosition[\"bottom\"] = 4] = \"bottom\";\r\n    // tslint:disable-next-line:no-bitwise\r\n    TooltipPosition[TooltipPosition[\"left\"] = 8] = \"left\";\r\n})(TooltipPosition || (TooltipPosition = {}));\n\n/**\r\n * Tooltip Component\r\n *\r\n * Benötigt im HTML Markup folgende Identifier\r\n * - container: Container für ng-content in welchem das Element angezeigt wird, wo der Tooltip angehängt wird.\r\n * - tooltip: Container für Tooltip\r\n *\r\n * Tooltip muss in 2 Schritten angezeigt werden. In einem ersten Schritt wird der Tooltip Markup erzeugt mit (ngIf). In einem 2. Schritt\r\n * kann der Tooltip dann über die CSS visibility angezeigt werden. Wird dies nicht so gemacht, kann es bei gewissen Browsern zu einem Flacker Effekt führen.\r\n *\r\n */\r\nclass NgTooltipCommon {\r\n    /**\r\n     * Konstruktor\r\n     * @param ref Element Referenz\r\n     */\r\n    constructor(cdRef, ref) {\r\n        this.cdRef = cdRef;\r\n        this.ref = ref;\r\n        /**\r\n         * Property für Enum in Angular HTML Template\r\n         */\r\n        this.TooltipPosition = TooltipPosition;\r\n        /**\r\n         * Definiert ob der Tooltip sichtbar ist\r\n         */\r\n        this._isTooltipVisible = false;\r\n        /**\r\n         * Position des Tooltips oben\r\n         */\r\n        this.TopPos = 0;\r\n        /**\r\n         * Position des Tooltips links\r\n         */\r\n        this.LeftPos = 0;\r\n        /**\r\n         * Position des Tooltips. Werte: left|top|right|bottom|auto\r\n         *\r\n         * Wert 'auto' kann mit einem anderen Wert kombiniert werden.\r\n         */\r\n        this._position = 'right|auto';\r\n        /**\r\n         * Definiert ob der Tooltip sichtbar sein soll\r\n         */\r\n        this.IsTooltipContentVisible = false;\r\n        /**\r\n         * Methode wenn Content geändert hat und Proporties im UI neu gesetzt werden müssen.\r\n         */\r\n        this.onContentChange = () => {\r\n            setTimeout(() => {\r\n                this.getLeftPosition();\r\n                this.getTopPosition();\r\n            });\r\n        };\r\n    }\r\n    /**\r\n     * Setter für Inline Mode für Tooltip\r\n     */\r\n    set inlinemode(value) {\r\n        this._inlinemode = convertToBoolean$1(value);\r\n    }\r\n    /**\r\n     * Getter für Inline Mode für Tooltip\r\n     */\r\n    get inlinemode() {\r\n        return this._inlinemode;\r\n    }\r\n    /**\r\n     * Setter für Name des Containers für den Tooltip. Wird benötigt, da Tooltip via NGIF ausgeblendet werden kann.\r\n     */\r\n    set tooltip(content) {\r\n        if (content !== undefined) {\r\n            document.body.appendChild(content.nativeElement);\r\n        }\r\n        this.tooltipcontainer = content;\r\n        this.onContentChange();\r\n        this.cdRef.detectChanges();\r\n    }\r\n    /**\r\n     * Ervent wenn das Control initialisert wird\r\n     */\r\n    ngOnInit() {\r\n        // Register Event Listener\r\n        window.addEventListener('scroll', this.onContentChange, true);\r\n        window.addEventListener('resize', this.onContentChange, true);\r\n        if (this.tooltipcontainer !== undefined) {\r\n            document.body.appendChild(this.tooltipcontainer.nativeElement);\r\n        }\r\n    }\r\n    /**\r\n     * Event wenn das Control zerstört wird.\r\n     */\r\n    ngOnDestroy() {\r\n        // Unregister Event Listener\r\n        window.removeEventListener('scroll', this.onContentChange, true);\r\n        window.removeEventListener('resize', this.onContentChange, true);\r\n        if (this.tooltipcontainer !== undefined) {\r\n            document.body.removeChild(this.tooltipcontainer.nativeElement);\r\n        }\r\n    }\r\n    /**\r\n     * Berechnet die Position des Tooltips von Oben\r\n     */\r\n    getTopPosition() {\r\n        if (this.content !== null && this.content !== undefined) {\r\n            const item = this.content.nativeElement;\r\n            if (item.children.length >= 1) {\r\n                const childItem = item.firstElementChild;\r\n                const contentPosition = childItem.getBoundingClientRect();\r\n                switch (this.GetTooltipPosition()) {\r\n                    case TooltipPosition.top:\r\n                        this.TopPos = contentPosition.top - this.getToolTipHeight();\r\n                        return contentPosition.top - this.getToolTipHeight();\r\n                    case TooltipPosition.right:\r\n                        this.TopPos = contentPosition.top + (contentPosition.height / 2) - (this.getToolTipHeight() / 2);\r\n                        return contentPosition.top + (contentPosition.height / 2) - (this.getToolTipHeight() / 2);\r\n                    case TooltipPosition.bottom:\r\n                        this.TopPos = contentPosition.top + contentPosition.height;\r\n                        return contentPosition.top + contentPosition.height;\r\n                    case TooltipPosition.left:\r\n                        this.TopPos = contentPosition.top + (contentPosition.height / 2) - (this.getToolTipHeight() / 2);\r\n                        return contentPosition.top + (contentPosition.height / 2) - (this.getToolTipHeight() / 2);\r\n                }\r\n                return childItem.clientTop + childItem.offsetTop - ((this.getToolTipHeight() / 2) - (childItem.clientHeight / 2));\r\n            }\r\n            else {\r\n                return this.content.nativeElement.offsetTop;\r\n            }\r\n        }\r\n        else {\r\n            return this.ref.nativeElement.offsetTop;\r\n        }\r\n    }\r\n    /**\r\n     * Berechnet die Position des Tooltips von Links\r\n     */\r\n    getLeftPosition() {\r\n        if (this.content !== null && this.content !== undefined) {\r\n            const item = this.content.nativeElement;\r\n            if (item.children.length >= 1) {\r\n                const childItem = item.firstElementChild;\r\n                const contentPosition = childItem.getBoundingClientRect();\r\n                switch (this.GetTooltipPosition()) {\r\n                    case TooltipPosition.top:\r\n                        this.LeftPos = contentPosition.left + (contentPosition.width / 2) - (this.getToolTipWidth() / 2);\r\n                        return contentPosition.left + (contentPosition.width / 2) - (this.getToolTipWidth() / 2);\r\n                    case TooltipPosition.right:\r\n                        this.LeftPos = contentPosition.left + contentPosition.width;\r\n                        return contentPosition.left + contentPosition.width;\r\n                    case TooltipPosition.bottom:\r\n                        this.LeftPos = contentPosition.left + (childItem.clientWidth / 2) - (this.getToolTipWidth() / 2);\r\n                        return contentPosition.left + (childItem.clientWidth / 2) - (this.getToolTipWidth() / 2);\r\n                    case TooltipPosition.left:\r\n                        this.LeftPos = contentPosition.left - this.getToolTipWidth();\r\n                        return contentPosition.left - this.getToolTipWidth();\r\n                }\r\n                return this.content.nativeElement.offsetTop;\r\n            }\r\n            else {\r\n                return this.content.nativeElement.offsetTop;\r\n            }\r\n        }\r\n        else {\r\n            return this.ref.nativeElement.offsetLeft;\r\n        }\r\n    }\r\n    /**\r\n     * Berechnet die Höhe des Tooltips\r\n     */\r\n    getToolTipHeight() {\r\n        if (this.tooltipcontainer) {\r\n            return this.tooltipcontainer.nativeElement.clientHeight;\r\n        }\r\n        else {\r\n            return 0;\r\n        }\r\n    }\r\n    /**\r\n     * Berechnet die Breite die Tooltips\r\n     */\r\n    getToolTipWidth() {\r\n        if (this.tooltipcontainer) {\r\n            return this.tooltipcontainer.nativeElement.clientWidth;\r\n        }\r\n        else {\r\n            return 0;\r\n        }\r\n    }\r\n    /**\r\n     * Definiert ob der Tooltip im Markup vorhanden ist\r\n     */\r\n    IsTooltipVisible() {\r\n        return this._isTooltipVisible;\r\n    }\r\n    /**\r\n     * Tooltip anzeigen\r\n     */\r\n    ShowTooltip() {\r\n        this._isTooltipVisible = true;\r\n        setTimeout(() => {\r\n            this.getLeftPosition();\r\n            this.getTopPosition();\r\n            this.IsTooltipContentVisible = true;\r\n        });\r\n    }\r\n    /**\r\n     * Tooltip ausblenden\r\n     */\r\n    HideTooltip() {\r\n        this._isTooltipVisible = false;\r\n        this.IsTooltipContentVisible = false;\r\n    }\r\n    /**\r\n     * Gibt die Position des Tooltips zurück\r\n     */\r\n    GetTooltipPosition() {\r\n        const validPositions = this.ValidatePositions();\r\n        // tslint:disable-next-line:no-bitwise\r\n        if (this.HasPosition(TooltipPosition.right) && (validPositions & TooltipPosition.right)) {\r\n            return TooltipPosition.right;\r\n        }\r\n        // tslint:disable-next-line:no-bitwise\r\n        if (this.HasPosition(TooltipPosition.top) && (validPositions & TooltipPosition.top)) {\r\n            return TooltipPosition.top;\r\n        }\r\n        // tslint:disable-next-line:no-bitwise\r\n        if (this.HasPosition(TooltipPosition.left) && (validPositions & TooltipPosition.left)) {\r\n            return TooltipPosition.left;\r\n        }\r\n        // tslint:disable-next-line:no-bitwise\r\n        if (this.HasPosition(TooltipPosition.bottom) && (validPositions & TooltipPosition.bottom)) {\r\n            return TooltipPosition.bottom;\r\n        }\r\n        // Get Auto Position or Default\r\n        if (this.IsAutoPosition()) {\r\n            // tslint:disable-next-line:no-bitwise\r\n            if (validPositions & TooltipPosition.right) {\r\n                return TooltipPosition.right;\r\n            }\r\n            // tslint:disable-next-line:no-bitwise\r\n            if (validPositions & TooltipPosition.top) {\r\n                return TooltipPosition.top;\r\n            }\r\n            // tslint:disable-next-line:no-bitwise\r\n            if (validPositions & TooltipPosition.left) {\r\n                return TooltipPosition.left;\r\n            }\r\n            // tslint:disable-next-line:no-bitwise\r\n            if (validPositions & TooltipPosition.bottom) {\r\n                return TooltipPosition.bottom;\r\n            }\r\n            return TooltipPosition.right;\r\n        }\r\n        else {\r\n            return this.GetPosition();\r\n        }\r\n    }\r\n    /**\r\n     * Definiert ob AutoPosition aktiv ist\r\n     */\r\n    IsAutoPosition() {\r\n        const positions = this._position.split('|');\r\n        return positions.indexOf('auto') >= 0;\r\n    }\r\n    /**\r\n     * Gibt die definierte Position für den Tooltip zurück\r\n     */\r\n    GetPosition() {\r\n        const positions = this._position.split('|');\r\n        if (this.HasPosition(TooltipPosition.left)) {\r\n            return TooltipPosition.left;\r\n        }\r\n        if (this.HasPosition(TooltipPosition.top)) {\r\n            return TooltipPosition.top;\r\n        }\r\n        if (this.HasPosition(TooltipPosition.right)) {\r\n            return TooltipPosition.right;\r\n        }\r\n        if (this.HasPosition(TooltipPosition.bottom)) {\r\n            return TooltipPosition.bottom;\r\n        }\r\n        // Default Position if empty\r\n        return TooltipPosition.right;\r\n    }\r\n    /**\r\n     * Gibt zurück, ob die Position konfiguriert wurde\r\n     *\r\n     * @param position Position auf welche geprüft wird\r\n     */\r\n    HasPosition(position) {\r\n        const positions = this._position.split('|');\r\n        if (position === TooltipPosition.right && positions.indexOf('right') >= 0) {\r\n            return true;\r\n        }\r\n        if (position === TooltipPosition.top && positions.indexOf('top') >= 0) {\r\n            return true;\r\n        }\r\n        if (position === TooltipPosition.left && positions.indexOf('left') >= 0) {\r\n            return true;\r\n        }\r\n        if (position === TooltipPosition.bottom && positions.indexOf('bottom') >= 0) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * Prüft ob die Position gültig ist, resp. der Tooltip auf die Position platz hat\r\n     */\r\n    ValidatePositions() {\r\n        // Check if Container is false\r\n        if (this.tooltipcontainer === undefined) {\r\n            return TooltipPosition.right;\r\n        }\r\n        let allowedPositions = TooltipPosition.none;\r\n        const basePosition = this.content.nativeElement.firstElementChild.getBoundingClientRect();\r\n        const tooltipRect = this.tooltipcontainer.nativeElement.getBoundingClientRect();\r\n        const leftPosOk = basePosition.left - tooltipRect.width > 0;\r\n        const rightPosOk = basePosition.right + tooltipRect.width < window.innerWidth;\r\n        const topPosOk = basePosition.top - tooltipRect.height > 0;\r\n        const bottomPosOk = basePosition.bottom + tooltipRect.height < window.innerHeight;\r\n        const leftHalfPosOk = basePosition.left - (tooltipRect.width / 2) > 0;\r\n        const rightHalfPosOk = basePosition.right + (tooltipRect.width / 2) < window.innerWidth;\r\n        const topHalfPosOk = basePosition.top - (tooltipRect.height / 2) > 0;\r\n        const bottomHalfPosOk = basePosition.bottom + (tooltipRect.height / 2) < window.innerHeight;\r\n        if (leftPosOk && topHalfPosOk && bottomHalfPosOk) {\r\n            // tslint:disable-next-line:no-bitwise\r\n            allowedPositions = allowedPositions | TooltipPosition.left;\r\n        }\r\n        if (rightPosOk && topHalfPosOk && bottomHalfPosOk) {\r\n            // tslint:disable-next-line:no-bitwise\r\n            allowedPositions = allowedPositions | TooltipPosition.right;\r\n        }\r\n        if (topPosOk && leftHalfPosOk && rightHalfPosOk) {\r\n            // tslint:disable-next-line:no-bitwise\r\n            allowedPositions = allowedPositions | TooltipPosition.top;\r\n        }\r\n        if (bottomPosOk && leftHalfPosOk && rightHalfPosOk) {\r\n            // tslint:disable-next-line:no-bitwise\r\n            allowedPositions = allowedPositions | TooltipPosition.bottom;\r\n        }\r\n        return allowedPositions;\r\n    }\r\n}\r\n__decorate([\r\n    Input('position'),\r\n    __metadata(\"design:type\", String)\r\n], NgTooltipCommon.prototype, \"_position\", void 0);\r\n__decorate([\r\n    Input('tooltiptext'),\r\n    __metadata(\"design:type\", String)\r\n], NgTooltipCommon.prototype, \"_tooltiptext\", void 0);\r\n__decorate([\r\n    Input('inlinemode'),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], NgTooltipCommon.prototype, \"inlinemode\", null);\r\n__decorate([\r\n    ViewChild('container', { static: true }),\r\n    __metadata(\"design:type\", ElementRef)\r\n], NgTooltipCommon.prototype, \"content\", void 0);\r\n__decorate([\r\n    ViewChild('tooltip', { static: true }),\r\n    __metadata(\"design:type\", ElementRef),\r\n    __metadata(\"design:paramtypes\", [ElementRef])\r\n], NgTooltipCommon.prototype, \"tooltip\", null);\n\nclass NgUploadFile {\r\n    constructor(ufile) {\r\n        this.uploadId = ufile.uploadId;\r\n        this.name = ufile.name;\r\n        this.progress = ufile.progress;\r\n        this.status = ufile.status;\r\n        this.documentid = null;\r\n    }\r\n}\r\n/**\r\n * Base Klasse für Uploader Control\r\n */\r\nclass NgUploadBase extends NgBaseModelControl {\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor(parent, injector, renderer, ngZone) {\r\n        super(parent, injector);\r\n        this.renderer = renderer;\r\n        this.ngZone = ngZone;\r\n        this.options = {};\r\n        this._allowedtypes = '*';\r\n        this._autoupload = false;\r\n        this._enablepause = true;\r\n        this._endpoint = null;\r\n        //#region Properties\r\n        /**\r\n         * Resource Key für Validation Message Required bei Control\r\n         */\r\n        this._validationMessageRequired = 'VALIDATION_ERROR_REQUIRED';\r\n        /**\r\n         * Resource Key für Validation Message Required in Validation Summary\r\n         */\r\n        this._validationMessageRequiredSummary = 'VALIDATION_ERROR_SUMMARY_REQUIRED';\r\n        this.maxfilesize = 0;\r\n        // Definiert das Control als Required\r\n        this._isrequired = false;\r\n        this.onfileerror = new EventEmitter();\r\n        /**\r\n         * Handling von neuen Files im Input Control\r\n         */\r\n        this.fileListener = () => {\r\n            if (this.uploadInput.nativeElement.files) {\r\n                this.uploadService.handleFileList(this.uploadInput.nativeElement.files);\r\n            }\r\n        };\r\n        this.uploads = [];\r\n        this.options.allowedTypes = '*';\r\n        this.options.concurrency = 1;\r\n        this.options.token = 'sometoken';\r\n        this.options.autoUpload = this._autoupload;\r\n        this.options.withCredentials = true;\r\n        this.options.chunkSize = 1024 * 16 * 8;\r\n        this.options.headers = (f) => ({\r\n            'Content-Disposition': `filename=${encodeURI(f.name)}`\r\n        });\r\n        // Init new Service Instance\r\n        this.uploadService = new UploadxService(this.ngZone);\r\n        this.uploadService.init(this.options);\r\n        // Subscripe Event for State changes\r\n        this.uploadService.events.subscribe((ufile) => this.onUpload(ufile));\r\n    }\r\n    set allowedtypes(types) {\r\n        this._allowedtypes = types;\r\n        this.setAllowedTypes(types);\r\n    }\r\n    get allowedtypes() {\r\n        return this._allowedtypes;\r\n    }\r\n    set autoupload(v) {\r\n        this._autoupload = v;\r\n        this.options.autoUpload = v;\r\n        this.uploadService.connect(this.options);\r\n    }\r\n    get autoupload() {\r\n        return this._autoupload;\r\n    }\r\n    set enablepause(v) {\r\n        this._enablepause = v;\r\n    }\r\n    get enablepause() {\r\n        return this._enablepause;\r\n    }\r\n    //#endregion\r\n    /**\r\n     * Definiert den Registration Endpoint für Uploads.\r\n     */\r\n    set endpoint(v) {\r\n        this._endpoint = v;\r\n        this.setEndpoint(v);\r\n    }\r\n    get endpoint() {\r\n        return this._endpoint;\r\n    }\r\n    /**\r\n     * Initialisiert das Control\r\n     */\r\n    ngOnInit() {\r\n        super.ngOnInit();\r\n        // Init Event Listener for Input File Control and Handling Files\r\n        this.listenerFn = this.renderer.listen(this.uploadInput.nativeElement, 'change', this.fileListener);\r\n        this.setAllowedTypes(this._allowedtypes);\r\n        this.setEndpoint(this._endpoint);\r\n        if (this._endpoint === null) {\r\n            throw new Error('endpoint is not defined!');\r\n        }\r\n        this.uploadService.connect(this.options);\r\n    }\r\n    /**\r\n     * Destroy des Controls\r\n     */\r\n    ngOnDestroy() {\r\n        if (this.listenerFn) {\r\n            this.listenerFn();\r\n        }\r\n    }\r\n    //#region All File Events\r\n    /**\r\n     * Cancel all Uploaded files\r\n     */\r\n    cancelAll() {\r\n        if (this.HasQueueItem() === true) {\r\n            this.uploadService.control({ action: 'cancelAll' });\r\n        }\r\n    }\r\n    /**\r\n     * Upload all queued Files\r\n     */\r\n    uploadAll() {\r\n        if (this.IsStateToUpload() === true) {\r\n            this.uploadService.control({ action: 'uploadAll' });\r\n        }\r\n    }\r\n    /**\r\n     * Pause all Uploads\r\n     */\r\n    pauseAll() {\r\n        if (this.IsUploading() === true) {\r\n            this.uploadService.control({ action: 'pauseAll' });\r\n        }\r\n    }\r\n    //#endregion\r\n    //#region Singel File Events\r\n    /**\r\n     * Cancel single upload\r\n     * @param uploadId ID of File to cancel\r\n     */\r\n    cancel(uploadId) {\r\n        this.uploadService.control({ action: 'cancel', uploadId: uploadId });\r\n    }\r\n    /**\r\n     * Cancel Single File\r\n     * @param uploadId ID of File to Cancel\r\n     */\r\n    pause(uploadId) {\r\n        this.uploadService.control({ action: 'pause', uploadId });\r\n    }\r\n    /**\r\n     * Upload Single File\r\n     *\r\n     * @param uploadId ID of File to Upload\r\n     */\r\n    upload(uploadId) {\r\n        this.uploadService.control({ action: 'upload', uploadId });\r\n    }\r\n    //#endregion\r\n    //#region UI Property Helper\r\n    HasQueueItem() {\r\n        return this.uploads.length > 0;\r\n    }\r\n    IsStateToUpload() {\r\n        return this.uploads.filter(itm => itm.status === 'added' || itm.status === 'paused').length > 0;\r\n    }\r\n    IsUploading() {\r\n        return this.uploads.filter(itm => itm.status === 'uploading').length > 0;\r\n    }\r\n    IsPaused() {\r\n        return this.uploads.filter(itm => itm.status === 'paused').length > 0;\r\n    }\r\n    Filename() {\r\n        if (this.uploads.length > 0) {\r\n            return this.uploads[0].name;\r\n        }\r\n        else {\r\n            return 'Keine Datei ausgewählt';\r\n        }\r\n    }\r\n    HasSuccessUpload() {\r\n        if (this.uploads.length > 0) {\r\n            return this.uploads.filter(itm => itm.status !== 'complete').length === 0;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    Progress() {\r\n        if (this.uploads.length > 0) {\r\n            return this.uploads[0].progress;\r\n        }\r\n        else {\r\n            return 0;\r\n        }\r\n    }\r\n    //#endregion\r\n    //#region Validation\r\n    validateData(c) {\r\n        let error = null;\r\n        if (this._isrequired) {\r\n            error = Validation.required(c, this._label, this._validationMessageRequired, this._validationMessageRequiredSummary);\r\n        }\r\n        return error;\r\n    }\r\n    //#endregion\r\n    /**\r\n     * Setzt die erlaubten Datentypen für den Upload\r\n     *\r\n     * @param types Erlaubte File Extensions\r\n     */\r\n    setAllowedTypes(types) {\r\n        this.renderer.setAttribute(this.uploadInput.nativeElement, 'accept', types);\r\n        this.options.allowedTypes = types;\r\n    }\r\n    /**\r\n     * Setzt den Upload Endpoit\r\n     * @param url Register URI\r\n     */\r\n    setEndpoint(url) {\r\n        this.options.endpoint = url;\r\n    }\r\n    /**\r\n     * Prüft ob die Dateierweiterung gültig ist\r\n     *\r\n     * @param filename Dateiname\r\n     */\r\n    isExtensionValid(filename) {\r\n        if (this._allowedtypes === '*') {\r\n            return true;\r\n        }\r\n        let isValid = false;\r\n        const extensions = this._allowedtypes.split('|');\r\n        extensions.forEach(itm => {\r\n            if (filename.endsWith(itm)) {\r\n                isValid = true;\r\n            }\r\n        });\r\n        return isValid;\r\n    }\r\n    /**\r\n     * Prüft ob das File nicht zu gross ist.\r\n     *\r\n     * @param filesize Max File Size in Bytes\r\n     */\r\n    isFileSizeValid(filesize) {\r\n        if (this.maxfilesize === 0) {\r\n            return true;\r\n        }\r\n        return this.maxfilesize >= filesize;\r\n    }\r\n    /**\r\n     * Upload Event\r\n     *\r\n     * @param uploadsOutStream Upload Item\r\n     */\r\n    onUpload(ufile) {\r\n        const index = this.uploads.findIndex(f => f.uploadId === ufile.uploadId);\r\n        if (ufile.status === 'added') {\r\n            if (this.isExtensionValid(ufile.name) && this.isFileSizeValid(ufile.size) && this.CustomAddValidation(ufile)) {\r\n                this.uploads.push(new NgUploadFile(ufile));\r\n            }\r\n            else {\r\n                this.cancel(ufile.uploadId);\r\n                if (!this.isExtensionValid(ufile.name)) {\r\n                    this.onfileerror.emit('INVALID_EXTENSION');\r\n                }\r\n                else if (!this.isFileSizeValid(ufile.size)) {\r\n                    this.onfileerror.emit('INVALID_FILESIZE');\r\n                }\r\n            }\r\n        }\r\n        else if (ufile.status === 'cancelled') {\r\n            if (index >= 0) {\r\n                this.uploads.splice(index, 1);\r\n            }\r\n            this.SetUploadValue(null);\r\n        }\r\n        else if (ufile.status === 'complete') {\r\n            this.uploads[index].progress = ufile.progress;\r\n            this.uploads[index].status = ufile.status;\r\n            this.SetUploadValue(ufile);\r\n        }\r\n        else {\r\n            if (index >= 0) {\r\n                this.uploads[index].progress = ufile.progress;\r\n                this.uploads[index].status = ufile.status;\r\n            }\r\n        }\r\n    }\r\n}\r\n__decorate([\r\n    Input('validationmessagerequired'),\r\n    __metadata(\"design:type\", String)\r\n], NgUploadBase.prototype, \"_validationMessageRequired\", void 0);\r\n__decorate([\r\n    Input('validationmessagesummaryrequired'),\r\n    __metadata(\"design:type\", String)\r\n], NgUploadBase.prototype, \"_validationMessageRequiredSummary\", void 0);\r\n__decorate([\r\n    Input('allowedtypes'),\r\n    __metadata(\"design:type\", String),\r\n    __metadata(\"design:paramtypes\", [String])\r\n], NgUploadBase.prototype, \"allowedtypes\", null);\r\n__decorate([\r\n    Input('autoupload'),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], NgUploadBase.prototype, \"autoupload\", null);\r\n__decorate([\r\n    Input('enablepause'),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], NgUploadBase.prototype, \"enablepause\", null);\r\n__decorate([\r\n    Input('maxfilesize'),\r\n    __metadata(\"design:type\", Number)\r\n], NgUploadBase.prototype, \"maxfilesize\", void 0);\r\n__decorate([\r\n    Input('isrequired'),\r\n    __metadata(\"design:type\", Boolean)\r\n], NgUploadBase.prototype, \"_isrequired\", void 0);\r\n__decorate([\r\n    Input('endpoint'),\r\n    __metadata(\"design:type\", String),\r\n    __metadata(\"design:paramtypes\", [String])\r\n], NgUploadBase.prototype, \"endpoint\", null);\r\n__decorate([\r\n    Output('onfileerror'),\r\n    __metadata(\"design:type\", Object)\r\n], NgUploadBase.prototype, \"onfileerror\", void 0);\r\n__decorate([\r\n    ViewChild('files'),\r\n    __metadata(\"design:type\", ElementRef)\r\n], NgUploadBase.prototype, \"uploadInput\", void 0);\n\n/**\r\n * Upload Komponente für ein einzelnes File\r\n */\r\nclass NgUploadSingleCommon extends NgUploadBase {\r\n    /**\r\n    * Macht keine Validierung in diesem Control\r\n    *\r\n    * @param file File das hinzugefügt wurde\r\n    */\r\n    CustomAddValidation(file) {\r\n        return true;\r\n    }\r\n    /**\r\n     * Setzt die File ID des hochgeladen Files in das Model\r\n     *\r\n     * @param file ID des Files\r\n     */\r\n    SetUploadValue(file) {\r\n        if (file === null) {\r\n            super.setValue(null);\r\n        }\r\n        else {\r\n            if (file.response !== undefined && file.response !== null && file.response.documentid !== null && file.response.documentid !== undefined) {\r\n                super.setValue(file.response.documentid);\r\n            }\r\n            else {\r\n                super.setValue(file.uploadId);\r\n            }\r\n        }\r\n    }\r\n}\n\n/**\r\n * Upload Componente für mehrere Files\r\n */\r\nclass NgUploadMultipleCommon extends NgUploadBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.maxfiles = 0;\r\n        this.minfiles = 0;\r\n        /**\r\n         * Resource Key für Validation Message Required bei Control\r\n         */\r\n        this._validationMessageMinFiles = 'VALIDATION_ERROR_FILESMIN';\r\n        /**\r\n         * Resource Key für Validation Message Required in Validation Summary\r\n         */\r\n        this._validationMessageMinFilesSummary = 'VALIDATION_ERROR_SUMMARY_FILESMIN';\r\n    }\r\n    /**\r\n     * Prüft ob die max. Files in der Queue nicht überschritten werden\r\n     *\r\n     * @param file File das hinzugefügt wurde\r\n     */\r\n    CustomAddValidation(file) {\r\n        if (this.maxfiles > 0 && this.uploads.length >= this.maxfiles) {\r\n            this.onfileerror.emit('INVALID_MAXFILES');\r\n            return false;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n    /**\r\n     * Setzt die File ID's der hochgeladen Files in das Model\r\n     *\r\n     * @param file ID des Files welches hochgeladen wurde.\r\n     */\r\n    SetUploadValue(file) {\r\n        let documentid = null;\r\n        if (file === null) {\r\n            documentid = null;\r\n        }\r\n        else {\r\n            if (file.response !== undefined && file.response !== null && file.response.documentid !== null && file.response.documentid !== undefined) {\r\n                documentid = file.response.documentid;\r\n            }\r\n            else {\r\n                documentid = file.uploadId;\r\n            }\r\n            // Document ID aktualisieren, damit Wert von Server in Model gesetzt werden kann.\r\n            this.uploads.filter(itm => itm !== null && itm.uploadId === file.uploadId).forEach(itm => {\r\n                itm.documentid = documentid;\r\n            });\r\n        }\r\n        // List of Files\r\n        const fileIds = [];\r\n        // Add all Items with Uploaded State to Model\r\n        this.uploads.filter(itm => itm.status === 'complete').forEach(itm => {\r\n            if (itm.documentid !== null && itm.documentid !== undefined) {\r\n                fileIds.push(itm.documentid);\r\n            }\r\n        });\r\n        if (fileIds.length > 0) {\r\n            super.setValue(fileIds);\r\n        }\r\n        else {\r\n            super.setValue(null);\r\n        }\r\n    }\r\n    /**\r\n     * Gibt die Anzahl der komplett hochgeladenen Files zurück\r\n     */\r\n    UploadedFileCount() {\r\n        return this.uploads.filter(itm => itm.status === 'complete').length;\r\n    }\r\n    /**\r\n     * Validiert das Control\r\n     *\r\n     * @param c Control\r\n     */\r\n    validateData(c) {\r\n        let error = super.validateData(c);\r\n        if (error === null) {\r\n            error = Validation.minFiles(this, this.minfiles, this._label, this._validationMessageMinFiles, this._validationMessageMinFilesSummary);\r\n        }\r\n        return error;\r\n    }\r\n}\r\n__decorate([\r\n    Input('maxfiles'),\r\n    __metadata(\"design:type\", Number)\r\n], NgUploadMultipleCommon.prototype, \"maxfiles\", void 0);\r\n__decorate([\r\n    Input('minfiles'),\r\n    __metadata(\"design:type\", Number)\r\n], NgUploadMultipleCommon.prototype, \"minfiles\", void 0);\r\n__decorate([\r\n    Input('validationmessageminfiles'),\r\n    __metadata(\"design:type\", String)\r\n], NgUploadMultipleCommon.prototype, \"_validationMessageMinFiles\", void 0);\r\n__decorate([\r\n    Input('validationmessagesummaryminfiles'),\r\n    __metadata(\"design:type\", String)\r\n], NgUploadMultipleCommon.prototype, \"_validationMessageMinFilesSummary\", void 0);\n\n/**\r\n * Model für Sprachen\r\n */\r\nclass LanguageModel {\r\n}\n\n/**\r\n * Injection Token für Language Service\r\n */\r\nconst LANGUAGE_SERVICE = new InjectionToken('LanguageService');\r\n/**\r\n * Base Service für Localisation von Fehlermeldungen\r\n *\r\n * @example\r\n *\r\n * // Eigene Beispielimplementierung für Application\r\n *\r\n * (at)Injectable()\r\n * export class ControlsLanguageService extends LanguageService {\r\n *\r\n *   constructor(private http: HttpClient) {\r\n *     super();\r\n *   }\r\n *\r\n *    configUrl = 'assets/languages.json';\r\n *\r\n *    public GetLanguages(): Observable<LanguageModel[]> {\r\n *      return this.http.get(this.configUrl);\r\n *    }\r\n *  }\r\n *\r\n */\r\nlet LanguageService = class LanguageService {\r\n};\r\nLanguageService.ɵprov = ɵɵdefineInjectable({ factory: function LanguageService_Factory() { return new LanguageService(); }, token: LanguageService, providedIn: \"root\" });\r\nLanguageService = __decorate([\r\n    Injectable({ providedIn: 'root' })\r\n], LanguageService);\r\n/**\r\n * Standardservice für interne Übersetzungen der Fehlermeldungen\r\n * */\r\nlet InternalLanguageService = class InternalLanguageService extends LanguageService {\r\n    GetLanguages() {\r\n        return new Observable((observer) => {\r\n            const result = [];\r\n            const de = new LanguageModel();\r\n            de.IsoCode = 'de';\r\n            de.Icon = '/icons/de.png';\r\n            de.Text = 'Deutsch';\r\n            const en = new LanguageModel();\r\n            en.IsoCode = 'en';\r\n            en.Icon = '/icons/en.png';\r\n            en.Text = 'Englisch';\r\n            result.push(de);\r\n            result.push(en);\r\n            observer.next(result);\r\n            observer.complete();\r\n        });\r\n    }\r\n};\r\nInternalLanguageService.ɵprov = ɵɵdefineInjectable({ factory: function InternalLanguageService_Factory() { return new InternalLanguageService(); }, token: InternalLanguageService, providedIn: \"root\" });\r\nInternalLanguageService = __decorate([\r\n    Injectable({ providedIn: 'root' })\r\n], InternalLanguageService);\n\n/**\r\n * Base Klasse für Multi Language Input Control\r\n */\r\nlet NgMultilanguageInputCommon = class NgMultilanguageInputCommon extends NgInputBase {\r\n    /**\r\n    * Konstruktor\r\n    * Inject des Formulars\r\n    */\r\n    constructor(parent, injector) {\r\n        super(parent, injector);\r\n        /**\r\n        * Max länge an Zeichen für Eingabefeld\r\n        */\r\n        this._maxlength = null;\r\n        /**\r\n         * Fix breite für das Control definieren.\r\n         */\r\n        this._controlwidth = null;\r\n        /**\r\n         * Aktiviert den Validator, das min. eine Sprache erfasst sein muss\r\n         */\r\n        this._anyrequired = false;\r\n        /**\r\n         * Resource Key für Validation Message Required bei Control\r\n         */\r\n        this._validationMessageRequired = 'VALIDATION_ERROR_MULTILANGUAGEREQUIRED';\r\n        /**\r\n         * Resource Key für Validation Message Required in Validation Summary\r\n         */\r\n        this._validationMessageRequiredSummary = 'VALIDATION_ERROR_SUMMARY_MULTILANGUAGEREQUIRED';\r\n        /**\r\n         * Resource Key für Validation Message Pattern bei Control\r\n         */\r\n        this._validationMessageRequiredAny = 'VALIDATION_ERROR_MULTILANGUAGEREQUIREDANY';\r\n        /**\r\n         * Resource Key für Validation Message Pattern in Validation Summary\r\n         */\r\n        this._validationMessageRequiredAnySummary = 'VALIDATION_ERROR_SUMMARY_MULTILANGUAGEREQUIREDANY';\r\n        /**\r\n         * Sprache für das Control\r\n         */\r\n        this.languages = [];\r\n        /**\r\n         * Selektierte Sprace des Controls\r\n         */\r\n        this.selectedLanguage = null;\r\n        this.lngLanguageService = injector.get(LANGUAGE_SERVICE, new InternalLanguageService());\r\n        this.lngLanguageService.GetLanguages().subscribe((result) => {\r\n            this.languages = result;\r\n            if (this.languages.length > 0) {\r\n                this.selectedLanguage = this.languages[0];\r\n                // Control Validierung ausführen, da Wert potentiell bereits gesetzt sein kann\r\n                this.UpdateValueAndValidity();\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Collection der Sprachen\r\n     */\r\n    get Languages() {\r\n        return this.languages;\r\n    }\r\n    get SelectedIcon() {\r\n        if (this.selectedLanguage) {\r\n            return this.selectedLanguage.Icon;\r\n        }\r\n        else {\r\n            return '';\r\n        }\r\n    }\r\n    get LanguageValue() {\r\n        if (this.value) {\r\n            const currentIsoCode = this.selectedLanguage ? this.selectedLanguage.IsoCode : null;\r\n            // Fallback falls keine Selektierte Sprache\r\n            if (currentIsoCode === null) {\r\n                return '';\r\n            }\r\n            return this.value[currentIsoCode];\r\n        }\r\n        else {\r\n            return '';\r\n        }\r\n    }\r\n    SetLanguageValue(value) {\r\n        if (this.value) {\r\n            const currentIsoCode = this.selectedLanguage ? this.selectedLanguage.IsoCode : null;\r\n            // Fallback falls keine Selektierte Sprache\r\n            if (currentIsoCode === null) {\r\n                return;\r\n            }\r\n            this.value[currentIsoCode] = value;\r\n            this.propagateChange(this._value);\r\n        }\r\n    }\r\n    SelectLanguage(language) {\r\n        this.selectedLanguage = language;\r\n    }\r\n    IsEmpty(sprache) {\r\n        if (this.value) {\r\n            // Fallback falls keine Selektierte Sprache\r\n            if (sprache === null) {\r\n                return true;\r\n            }\r\n            return this.value[sprache.IsoCode] === undefined || this.value[sprache.IsoCode] === '' || this.value[sprache.IsoCode] === null;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n    IsAnyEmpty() {\r\n        let found = false;\r\n        if (this.value) {\r\n            this.languages.forEach((itm) => {\r\n                if (itm === null) {\r\n                    found = true;\r\n                    return;\r\n                }\r\n                if (this.value[itm.IsoCode] === undefined || this.value[itm.IsoCode] === '' || this.value[itm.IsoCode] === null) {\r\n                    found = true;\r\n                    return;\r\n                }\r\n            });\r\n        }\r\n        return found;\r\n    }\r\n    /**\r\n     * Methode validiert, ob der Wert den gegebenen Kriterien entspricht\r\n     */\r\n    validateData(c) {\r\n        let error = null;\r\n        if (error === null && c.value !== null && c.value !== undefined && c.value !== '' && this._isrequired !== undefined && this._isrequired === true) {\r\n            error = Validation.multilanguageRequired(c, this.languages, this._label, this._validationMessageRequired, this._validationMessageRequiredSummary);\r\n        }\r\n        if (error === null && c.value !== null && c.value !== undefined && c.value !== '' && this._anyrequired !== undefined && this._anyrequired === true) {\r\n            error = Validation.multilanguageRequiredAny(c, this.languages, this._label, this._validationMessageRequiredAny, this._validationMessageRequiredAnySummary);\r\n        }\r\n        return error;\r\n    }\r\n};\r\n__decorate([\r\n    Input('maxlength'),\r\n    __metadata(\"design:type\", Number)\r\n], NgMultilanguageInputCommon.prototype, \"_maxlength\", void 0);\r\n__decorate([\r\n    Input('controlwidth'),\r\n    __metadata(\"design:type\", String)\r\n], NgMultilanguageInputCommon.prototype, \"_controlwidth\", void 0);\r\n__decorate([\r\n    Input('requiredany'),\r\n    __metadata(\"design:type\", Boolean)\r\n], NgMultilanguageInputCommon.prototype, \"_anyrequired\", void 0);\r\n__decorate([\r\n    Input('validationmessagerequired'),\r\n    __metadata(\"design:type\", String)\r\n], NgMultilanguageInputCommon.prototype, \"_validationMessageRequired\", void 0);\r\n__decorate([\r\n    Input('validationmessagesummaryrequired'),\r\n    __metadata(\"design:type\", String)\r\n], NgMultilanguageInputCommon.prototype, \"_validationMessageRequiredSummary\", void 0);\r\n__decorate([\r\n    Input('validationmessagerequiredany'),\r\n    __metadata(\"design:type\", String)\r\n], NgMultilanguageInputCommon.prototype, \"_validationMessageRequiredAny\", void 0);\r\n__decorate([\r\n    Input('validationmessagesummaryrequiredany'),\r\n    __metadata(\"design:type\", String)\r\n], NgMultilanguageInputCommon.prototype, \"_validationMessageRequiredAnySummary\", void 0);\r\nNgMultilanguageInputCommon = __decorate([\r\n    __param(0, Host()),\r\n    __metadata(\"design:paramtypes\", [NgFormularCommon, Injector])\r\n], NgMultilanguageInputCommon);\n\n/**\r\n * Base Klasse für Multi Language Textarea Control\r\n */\r\nlet NgMultilanguageInputAreaCommon = class NgMultilanguageInputAreaCommon extends NgInputBase {\r\n    /**\r\n    * Konstruktor\r\n    * Inject des Formulars\r\n    */\r\n    constructor(parent, injector) {\r\n        super(parent, injector);\r\n        /**\r\n        * Max länge an Zeichen für Eingabefeld\r\n        */\r\n        this._maxlength = null;\r\n        /**\r\n        * Anzahl Rows für TextArea\r\n        */\r\n        this._rows = 7;\r\n        /**\r\n         * Fix breite für das Control definieren.\r\n         */\r\n        this._controlwidth = null;\r\n        /**\r\n         * Aktiviert den Validator, das min. eine Sprache erfasst sein muss\r\n         */\r\n        this._anyrequired = false;\r\n        /**\r\n         * Resource Key für Validation Message Required bei Control\r\n         */\r\n        this._validationMessageRequired = 'VALIDATION_ERROR_MULTILANGUAGEREQUIRED';\r\n        /**\r\n         * Resource Key für Validation Message Required in Validation Summary\r\n         */\r\n        this._validationMessageRequiredSummary = 'VALIDATION_ERROR_SUMMARY_MULTILANGUAGEREQUIRED';\r\n        /**\r\n         * Resource Key für Validation Message Pattern bei Control\r\n         */\r\n        this._validationMessageRequiredAny = 'VALIDATION_ERROR_MULTILANGUAGEREQUIREDANY';\r\n        /**\r\n         * Resource Key für Validation Message Pattern in Validation Summary\r\n         */\r\n        this._validationMessageRequiredAnySummary = 'VALIDATION_ERROR_SUMMARY_MULTILANGUAGEREQUIREDANY';\r\n        /**\r\n         * Sprache für das Control\r\n         */\r\n        this.languages = [];\r\n        /**\r\n         * Selektierte Sprace des Controls\r\n         */\r\n        this.selectedLanguage = null;\r\n        this.lngLanguageService = injector.get(LANGUAGE_SERVICE, new InternalLanguageService());\r\n        this.lngLanguageService.GetLanguages().subscribe((result) => {\r\n            this.languages = result;\r\n            if (this.languages.length > 0) {\r\n                this.selectedLanguage = this.languages[0];\r\n            }\r\n            // Control Validierung ausführen, da Wert potentiell bereits gesetzt sein kann\r\n            this.UpdateValueAndValidity();\r\n        });\r\n    }\r\n    /**\r\n     * Collection der Sprachen\r\n     */\r\n    get Languages() {\r\n        return this.languages;\r\n    }\r\n    get SelectedIcon() {\r\n        if (this.selectedLanguage) {\r\n            return this.selectedLanguage.Icon;\r\n        }\r\n        else {\r\n            return '';\r\n        }\r\n    }\r\n    get LanguageValue() {\r\n        if (this.value) {\r\n            const currentIsoCode = this.selectedLanguage ? this.selectedLanguage.IsoCode : null;\r\n            // Fallback falls keine Selektierte Sprache\r\n            if (currentIsoCode === null) {\r\n                return '';\r\n            }\r\n            return this.value[currentIsoCode];\r\n        }\r\n        else {\r\n            return '';\r\n        }\r\n    }\r\n    SetLanguageValue(value) {\r\n        if (this.value) {\r\n            const currentIsoCode = this.selectedLanguage ? this.selectedLanguage.IsoCode : null;\r\n            // Fallback falls keine Selektierte Sprache\r\n            if (currentIsoCode === null) {\r\n                return;\r\n            }\r\n            this.value[currentIsoCode] = value;\r\n            this.propagateChange(this._value);\r\n        }\r\n    }\r\n    SelectLanguage(language) {\r\n        this.selectedLanguage = language;\r\n    }\r\n    IsEmpty(sprache) {\r\n        if (this.value) {\r\n            // Fallback falls keine Selektierte Sprache\r\n            if (sprache === null) {\r\n                return true;\r\n            }\r\n            return this.value[sprache.IsoCode] === undefined || this.value[sprache.IsoCode] === '' || this.value[sprache.IsoCode] === null;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n    IsAnyEmpty() {\r\n        let found = false;\r\n        if (this.value) {\r\n            this.languages.forEach((itm) => {\r\n                if (itm === null) {\r\n                    found = true;\r\n                    return;\r\n                }\r\n                if (this.value[itm.IsoCode] === undefined || this.value[itm.IsoCode] === '' || this.value[itm.IsoCode] === null) {\r\n                    found = true;\r\n                    return;\r\n                }\r\n            });\r\n        }\r\n        return found;\r\n    }\r\n    /**\r\n     * Methode validiert, ob der Wert den gegebenen Kriterien entspricht\r\n     */\r\n    validateData(c) {\r\n        let error = null;\r\n        if (error === null && c.value !== null && c.value !== undefined && c.value !== '' && this._isrequired !== undefined && this._isrequired === true) {\r\n            error = Validation.multilanguageRequired(c, this.languages, this._label, this._validationMessageRequired, this._validationMessageRequiredSummary);\r\n        }\r\n        if (error === null && c.value !== null && c.value !== undefined && c.value !== '' && this._anyrequired !== undefined && this._anyrequired === true) {\r\n            error = Validation.multilanguageRequiredAny(c, this.languages, this._label, this._validationMessageRequiredAny, this._validationMessageRequiredAnySummary);\r\n        }\r\n        return error;\r\n    }\r\n};\r\n__decorate([\r\n    Input('maxlength'),\r\n    __metadata(\"design:type\", Number)\r\n], NgMultilanguageInputAreaCommon.prototype, \"_maxlength\", void 0);\r\n__decorate([\r\n    Input('rows'),\r\n    __metadata(\"design:type\", Number)\r\n], NgMultilanguageInputAreaCommon.prototype, \"_rows\", void 0);\r\n__decorate([\r\n    Input('controlwidth'),\r\n    __metadata(\"design:type\", String)\r\n], NgMultilanguageInputAreaCommon.prototype, \"_controlwidth\", void 0);\r\n__decorate([\r\n    Input('requiredany'),\r\n    __metadata(\"design:type\", Boolean)\r\n], NgMultilanguageInputAreaCommon.prototype, \"_anyrequired\", void 0);\r\n__decorate([\r\n    Input('validationmessagerequired'),\r\n    __metadata(\"design:type\", String)\r\n], NgMultilanguageInputAreaCommon.prototype, \"_validationMessageRequired\", void 0);\r\n__decorate([\r\n    Input('validationmessagesummaryrequired'),\r\n    __metadata(\"design:type\", String)\r\n], NgMultilanguageInputAreaCommon.prototype, \"_validationMessageRequiredSummary\", void 0);\r\n__decorate([\r\n    Input('validationmessagerequiredany'),\r\n    __metadata(\"design:type\", String)\r\n], NgMultilanguageInputAreaCommon.prototype, \"_validationMessageRequiredAny\", void 0);\r\n__decorate([\r\n    Input('validationmessagesummaryrequiredany'),\r\n    __metadata(\"design:type\", String)\r\n], NgMultilanguageInputAreaCommon.prototype, \"_validationMessageRequiredAnySummary\", void 0);\r\nNgMultilanguageInputAreaCommon = __decorate([\r\n    __param(0, Host()),\r\n    __metadata(\"design:paramtypes\", [NgFormularCommon, Injector])\r\n], NgMultilanguageInputAreaCommon);\n\n/**\r\n * Basis Klasse für Confirm Service implementation\r\n */\r\nclass ServiceConfirmCommon {\r\n    /**\r\n     * Konstruktor\r\n     * @param appRef ApplicationRef zum Anhängen des Dialogs an den Content\r\n     * @param injector Injector um die Instanz zu erzeuge\r\n     */\r\n    constructor(appRef, injector) {\r\n        this.appRef = appRef;\r\n        this.injector = injector;\r\n        //#region Properties\r\n        /**\r\n         * Referenz auf IConfirm Instanz.\r\n         */\r\n        this.component = null;\r\n    }\r\n    //#endregion\r\n    //#region Protected Methods\r\n    /**\r\n     * Erzeugt eine Instanz für den Dialog\r\n     */\r\n    CreateInstance() {\r\n        // ComponentFactory aus Service laden\r\n        const factory = this.GetComponentFactory();\r\n        // Instanz der Komponente erzeugen und an die View anhängen\r\n        this.component = factory.create(this.injector);\r\n        this.appRef.attachView(this.component.hostView);\r\n    }\r\n    /**\r\n      * Entfernt die Instanz des Dialogs\r\n      */\r\n    DestroyInstance() {\r\n        // Dialog aus View entfernen und Komponenten löschen\r\n        this.appRef.detachView(this.component.hostView);\r\n        this.component.destroy();\r\n    }\r\n    /**\r\n     * Zeigt den Dialog an\r\n     */\r\n    OpenDialog() {\r\n        const dialog = this.component.instance;\r\n        dialog.show();\r\n        return dialog;\r\n    }\r\n    /**\r\n     * Blendet den Dialog aus\r\n     */\r\n    CloseDialog() {\r\n        const dialog = this.component.instance;\r\n        dialog.hide();\r\n    }\r\n    /**\r\n     * Interne Methode für die Implementation des Confirm Dialogs. Steuert die Feedbacks, die Erzeugung und Anzeige des Dialogs\r\n     */\r\n    Confirm() {\r\n        // Dialog erzeugen\r\n        this.CreateInstance();\r\n        const instance = this.OpenDialog();\r\n        // Konfiguration der Dialog Instanz durch Service Implementation zulassen\r\n        this.ConfigureDialog(instance);\r\n        // Event Emitter für Confirmation im Service. Event Emitter Asynchron initialiseren\r\n        const confirmTask = new EventEmitter(true);\r\n        // Callback wenn Dialog bestätigt wurde\r\n        instance.onconfirm.subscribe(value => {\r\n            // Dialog entfernen\r\n            this.CloseDialog();\r\n            this.DestroyInstance();\r\n            // Emit auf Service auslösen\r\n            confirmTask.emit(value);\r\n        });\r\n        // Confirm Emitter für Result zurückgeben\r\n        return confirmTask;\r\n    }\r\n}\n\n/**\r\n * Basis Klasse für Confirm Dialog\r\n */\r\nclass NgConfirmCommon {\r\n    constructor() {\r\n        //#region Input / Output Properties\r\n        /**\r\n         * Event wenn Dialog geschlossen wird\r\n         */\r\n        this.onconfirm = new EventEmitter();\r\n        /**\r\n       * Dialog Titel für Confirm Dialog\r\n       */\r\n        this.title = '';\r\n        /**\r\n         * Nachricht die auf dem Dialog angezeigt wird\r\n         */\r\n        this.message = '';\r\n        /**\r\n         * Icon welches auf dem Dialog angezeigt wird\r\n         */\r\n        this.image = '';\r\n        /**\r\n         * Map mit Buttons die in Dialog angezeigt werden.\r\n         */\r\n        this.buttons = [];\r\n        //#endregion\r\n        //#region Internal Properties and Methods\r\n        /**\r\n         * Definiert ob der Dialog sichtbar ist\r\n         */\r\n        this.isvisible = false;\r\n        //#endregion\r\n    }\r\n    /**\r\n     * Definiert, ob für den Dialog ein Image definiert wurde\r\n     */\r\n    hasImage() {\r\n        return this.image !== '';\r\n    }\r\n    //#endregion\r\n    //#region Public Methods\r\n    /**\r\n     * Action wenn Button auf Dialog geklickt wurde. Löst den EventEmitter aus und blendet den Dialog aus.\r\n     * @param action\r\n     */\r\n    confirm(action) {\r\n        this.onconfirm.emit(action);\r\n        this.isvisible = false;\r\n    }\r\n    /**\r\n     * Zeigt den Dialog an\r\n     */\r\n    show() {\r\n        this.isvisible = true;\r\n    }\r\n    /**\r\n     * Blendet den Dialog aus\r\n     */\r\n    hide() {\r\n        this.isvisible = false;\r\n    }\r\n}\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], NgConfirmCommon.prototype, \"onconfirm\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String)\r\n], NgConfirmCommon.prototype, \"title\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String)\r\n], NgConfirmCommon.prototype, \"message\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String)\r\n], NgConfirmCommon.prototype, \"image\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Array)\r\n], NgConfirmCommon.prototype, \"buttons\", void 0);\n\n/**\r\n * Klasse für Button Templates in Confirm Button\r\n */\r\nclass NgConfirmButton {\r\n    /**\r\n     * Konstruktor\r\n     * @param key Key für Button\r\n     * @param text Text für Button\r\n     */\r\n    constructor(key = '', text = '') {\r\n        /**\r\n         * Key des Buttons. Wird als Result beim Confirm zurückgegeben\r\n         */\r\n        this.key = '';\r\n        /**\r\n         * Anzeigetext des Buttons\r\n         */\r\n        this.text = '';\r\n        this.key = key;\r\n        this.text = text;\r\n    }\r\n}\n\n/**\r\n * Injection Token für Language Resource Service\r\n */\r\nconst LANGUAGERESOURCE_SERVICE$1 = new InjectionToken('LanguageResourceService');\r\n/**\r\n * Base Service für Localisation von Fehlermeldungen\r\n *\r\n * @example\r\n *\r\n * // Eigene Beispielimplementierung für Application mit ngx-translate\r\n * (at)Injectable()\r\n * export class ControlsLocalisation extends LanguageResourceService {\r\n *\r\n *   constructor(private translate: TranslateService) {\r\n *     super();\r\n *\r\n *     this.translate.setDefaultLang('de');\r\n *     this.translate.use('de');\r\n *   }\r\n *\r\n *     public GetString(key: string, params?: any): Observable<string> {\r\n *        return this.translate.get(key, params);\r\n *     }\r\n *  }\r\n *\r\n */\r\n/**\r\n* Service für interne Übersetzungen\r\n* */\r\nlet LanguageResourceService$1 = class LanguageResourceService {\r\n};\r\nLanguageResourceService$1.ɵprov = ɵɵdefineInjectable({ factory: function LanguageResourceService_Factory() { return new LanguageResourceService$1(); }, token: LanguageResourceService$1, providedIn: \"root\" });\r\nLanguageResourceService$1 = __decorate([\r\n    Injectable({ providedIn: 'root' })\r\n], LanguageResourceService$1);\r\n/**\r\n * Standardservice für interne Übersetzungen der Fehlermeldungen\r\n * */\r\nlet InternalLanguageResourceService$1 = class InternalLanguageResourceService extends LanguageResourceService$1 {\r\n    /**\r\n     * Konstruktor\r\n     * */\r\n    constructor() {\r\n        super();\r\n        /**\r\n         * Language Resources für Controls Library\r\n         */\r\n        this.data = new Map();\r\n        // Set Languages\r\n        this.data.set('de', new Map());\r\n        this.data.get('de').set('VALIDATION_ERROR_REQUIRED', 'Feld ist erforderlich.');\r\n        this.data.get('de').set('VALIDATION_ERROR_SUMMARY_REQUIRED', 'Feld \"{{FIELD}}\" ist erforderlich.');\r\n        this.data.get('de').set('VALIDATION_ERROR_MINVALUE', 'Wert darf nicht kleiner als {{MINVALUE}} sein.');\r\n        this.data.get('de').set('VALIDATION_ERROR_SUMMARY_MINVALUE', 'Feld \"{{FIELD}}\" darf nicht kleiner als {{MINVALUE}} sein.');\r\n        this.data.get('de').set('VALIDATION_ERROR_PATTERN', 'Wert entspricht nicht der Format Vorlage.');\r\n        this.data.get('de').set('VALIDATION_ERROR_SUMMARY_PATTERN', 'Feld \"{{FIELD}}\" entspricht nicht der Format Vorlage.');\r\n        this.data.get('de').set('VALIDATION_ERROR_MAXVALUE', 'Wert darf nicht grösser als {{MAXVALUE}} sein.');\r\n        this.data.get('de').set('VALIDATION_ERROR_SUMMARY_MAXVALUE', 'Feld \"{{FIELD}}\" darf nicht grösser als {{MAXVALUE}} sein.');\r\n        this.data.get('de').set('VALIDATION_ERROR_EMAIL', 'Feld ist keine E-Mail Adresse');\r\n        this.data.get('de').set('VALIDATION_ERROR_SUMMARY_EMAIL', 'Feld \"{{FIELD}}\" ist keine E-Mail Adresse');\r\n        this.data.get('de').set('VALIDATION_ERROR_MINLENGTH', 'Feld erfordert min. {{MINLENGTH}} Zeichen.');\r\n        this.data.get('de').set('VALIDATION_ERROR_SUMMARY_MINLENGTH', 'Feld \"{{FIELD}}\" erfordert min. {{MINLENGTH}} Zeichen.');\r\n        this.data.get('de').set('VALIDATION_ERROR_MINDATE', 'Feld muss neuer oder gleich {{MINDATE}} sein.');\r\n        this.data.get('de').set('VALIDATION_ERROR_SUMMARY_MINDATE', 'Feld \"{{FIELD}}\" muss neuer oder gleich {{MINDATE}} sein.');\r\n        this.data.get('de').set('VALIDATION_ERROR_MAXDATE', 'Feld muss älter oder gleich {{MAXDATE}} sein.');\r\n        this.data.get('de').set('VALIDATION_ERROR_SUMMARY_MAXDATE', 'Feld \"{{FIELD}}\" muss älter oder gleich {{MAXDATE}} sein.');\r\n        this.data.get('de').set('VALIDATION_ERROR_MINTIME', 'Feld muss neuer oder gleich {{MINTIME}} sein.');\r\n        this.data.get('de').set('VALIDATION_ERROR_SUMMARY_MINTIME', 'Feld \"{{FIELD}}\" muss neuer oder gleich {{MINTIME}} sein.');\r\n        this.data.get('de').set('VALIDATION_ERROR_MAXTIME', 'Feld muss älter oder gleich {{MAXTIME}} sein.');\r\n        this.data.get('de').set('VALIDATION_ERROR_SUMMARY_MAXTIME', 'Feld \"{{FIELD}}\" muss älter oder gleich {{MAXTIME}} sein.');\r\n        this.data.get('de').set('VALIDATION_ERROR_DATETIMEFORMAT', 'Feld ist kein gültiges Datum.');\r\n        this.data.get('de').set('VALIDATION_ERROR_SUMMARY_DATETIMEFORMAT', 'Feld \"{{FIELD}}\" ist kein gültiges Datum.');\r\n        this.data.get('de').set('VALIDATION_ERROR_FILESMIN', 'Es müssen min. {{MINFILES}} Dateien hochgeladen sein.');\r\n        this.data.get('de').set('VALIDATION_ERROR_SUMMARY_FILESMIN', 'Feld \"{{FIELD}}\" muss min. {{MINFILES}} Dateien hochgeladen haben.');\r\n        this.data.get('de').set('VALIDATION_ERROR_MULTILANGUAGEREQUIREDANY', 'Es muss min. 1 Sprache erfasst sein.');\r\n        this.data.get('de').set('VALIDATION_ERROR_SUMMARY_MULTILANGUAGEREQUIREDANY', 'Feld \"{{FIELD}}\" muss min. 1 Sprache erfasst haben.');\r\n        this.data.get('de').set('VALIDATION_ERROR_MULTILANGUAGEREQUIRED', 'Es müssen alle Sprachen erfasst sein.');\r\n        this.data.get('de').set('VALIDATION_ERROR_SUMMARY_MULTILANGUAGEREQUIRED', 'Feld \"{{FIELD}}\" muss alle Sprachen erfasst haben.');\r\n        // EN\r\n        this.data.set('en', new Map());\r\n    }\r\n    /**\r\n     * Die Funktion setzt die default Sprache auf DE, falls die Sprach-Setzung nicht möglich ist.\r\n     */\r\n    GetFallbackLanguage() {\r\n        return 'de';\r\n    }\r\n    /**\r\n     * Die Funktion ergibt die ausgewählte Sprache.\r\n     */\r\n    GetLanguage() {\r\n        const language = navigator.language;\r\n        if (language.indexOf('-') >= 0) {\r\n            return language.split('-')[0];\r\n        }\r\n        else {\r\n            return language;\r\n        }\r\n    }\r\n    /**\r\n    * Die Methode ergibt die selecte Sprache (string)  anhand von Key und Params\r\n    */\r\n    GetString(key, params) {\r\n        return new Observable((observer) => {\r\n            let language = this.GetLanguage();\r\n            if (!this.data.has(language)) {\r\n                language = this.GetFallbackLanguage();\r\n                // Return Key if no Language exists\r\n                if (!this.data.has(language)) {\r\n                    observer.next(key);\r\n                    observer.complete();\r\n                    return;\r\n                }\r\n            }\r\n            if (this.data.get(language).has(key)) {\r\n                const resource = this.data.get(language).get(key);\r\n                if (params !== undefined && params !== null) {\r\n                    const formatter = new Interpolation();\r\n                    observer.next(formatter.interpolateString(resource, params));\r\n                    observer.complete();\r\n                    return;\r\n                }\r\n                else {\r\n                    observer.next(resource);\r\n                    observer.complete();\r\n                    return;\r\n                }\r\n            }\r\n            else {\r\n                observer.next(key);\r\n                observer.complete();\r\n                return;\r\n            }\r\n        });\r\n    }\r\n};\r\nInternalLanguageResourceService$1.ɵprov = ɵɵdefineInjectable({ factory: function InternalLanguageResourceService_Factory() { return new InternalLanguageResourceService$1(); }, token: InternalLanguageResourceService$1, providedIn: \"root\" });\r\nInternalLanguageResourceService$1 = __decorate([\r\n    Injectable({ providedIn: 'root' }),\r\n    __metadata(\"design:paramtypes\", [])\r\n], InternalLanguageResourceService$1);\n\n/**\r\n * Model für Sprachen\r\n */\r\nclass LanguageModel$1 {\r\n}\n\nlet JNetworkCommonListboxOptionModule = class JNetworkCommonListboxOptionModule {\r\n};\r\nJNetworkCommonListboxOptionModule = __decorate([\r\n    NgModule({\r\n        declarations: [NgListboxOptionDirective],\r\n        imports: [],\r\n        exports: [NgListboxOptionDirective]\r\n    })\r\n], JNetworkCommonListboxOptionModule);\n\n/*\r\n * Public API Surface of jNetwork-controls-common\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { GridResponse, Interpolation, JNetworkCommonListboxOptionModule, LANGUAGERESOURCE_SERVICE$1 as LANGUAGERESOURCE_SERVICE, LANGUAGE_SERVICE, LanguageModel$1 as LanguageModel, LanguageResourceService$1 as LanguageResourceService, LanguageService, NgButtonCommon, NgCheckboxCommon, NgConfirmButton, NgConfirmCommon, NgDateCommon, NgDateSelectorCommon, NgDateTimeCommon, NgDialogCommon, NgDropdownCommon, NgDropdownOptionCommon, NgFormularCommon, NgGridButtonCommon, NgGridColumnActionCommon, NgGridColumnBaseCommon, NgGridColumnCommon, NgGridCommon, NgGridImageCommon, NgInputAreaCommon, NgInputCommon, NgInputCurrencyCommon, NgInputDecimalCommon, NgInputEmailCommon, NgInputIntegerCommon, NgInputPasswordCommon, NgInputSearchCommon, NgListboxCommon, NgListboxOptionDirective, NgMultilanguageInputAreaCommon, NgMultilanguageInputCommon, NgPagingCommon, NgRadiobuttonCommon, NgRadiobuttonsCommon, NgStaticFormContainerCommon, NgStaticLabelCommon, NgTabCommon, NgTabItemCommon, NgTimeCommon, NgTinyMceCommon, NgTinyMceEditorComponent, NgTooltipCommon, NgTreeItemActionCommon, NgTreeViewChildCommon, NgTreeViewCommon, NgUploadFile, NgUploadMultipleCommon, NgUploadSingleCommon, NgValidationSummaryCommon, NgWizardCommon, NgWizardItemCommon, PagerData, ServiceConfirmCommon, SortDescriptor, SortOrder, TooltipPosition, Validation, ValidationErrorItem, convertToBoolean, convertToNumber, isDefined, jNetworkTinyMceEditorModule, mapToObject, NgUploadBase as ɵa, NgBaseModelControl as ɵb, NgBaseSelectControl as ɵc, NgBaseListControl as ɵd, NgInputBase as ɵe, NgBaseDateTimeControl as ɵf, Events as ɵg };\n"]}